
multiplexer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006744  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08006888  08006888  00016888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c74  08006c74  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006c74  08006c74  00016c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c7c  08006c7c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c7c  08006c7c  00016c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c80  08006c80  00016c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  200001d4  08006e58  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08006e58  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000887b  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000181f  00000000  00000000  00028abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e0  00000000  00000000  0002a2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000600  00000000  00000000  0002aac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016b1d  00000000  00000000  0002b0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009a65  00000000  00000000  00041bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cbc7  00000000  00000000  0004b642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003164  00000000  00000000  000d820c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000db370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800686c 	.word	0x0800686c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	0800686c 	.word	0x0800686c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__aeabi_uldivmod>:
 8001014:	b953      	cbnz	r3, 800102c <__aeabi_uldivmod+0x18>
 8001016:	b94a      	cbnz	r2, 800102c <__aeabi_uldivmod+0x18>
 8001018:	2900      	cmp	r1, #0
 800101a:	bf08      	it	eq
 800101c:	2800      	cmpeq	r0, #0
 800101e:	bf1c      	itt	ne
 8001020:	f04f 31ff 	movne.w	r1, #4294967295
 8001024:	f04f 30ff 	movne.w	r0, #4294967295
 8001028:	f000 b972 	b.w	8001310 <__aeabi_idiv0>
 800102c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001030:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001034:	f000 f806 	bl	8001044 <__udivmoddi4>
 8001038:	f8dd e004 	ldr.w	lr, [sp, #4]
 800103c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001040:	b004      	add	sp, #16
 8001042:	4770      	bx	lr

08001044 <__udivmoddi4>:
 8001044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001048:	9e08      	ldr	r6, [sp, #32]
 800104a:	460d      	mov	r5, r1
 800104c:	4604      	mov	r4, r0
 800104e:	468e      	mov	lr, r1
 8001050:	2b00      	cmp	r3, #0
 8001052:	d14c      	bne.n	80010ee <__udivmoddi4+0xaa>
 8001054:	428a      	cmp	r2, r1
 8001056:	4694      	mov	ip, r2
 8001058:	d967      	bls.n	800112a <__udivmoddi4+0xe6>
 800105a:	fab2 f382 	clz	r3, r2
 800105e:	b153      	cbz	r3, 8001076 <__udivmoddi4+0x32>
 8001060:	fa02 fc03 	lsl.w	ip, r2, r3
 8001064:	f1c3 0220 	rsb	r2, r3, #32
 8001068:	fa01 fe03 	lsl.w	lr, r1, r3
 800106c:	fa20 f202 	lsr.w	r2, r0, r2
 8001070:	ea42 0e0e 	orr.w	lr, r2, lr
 8001074:	409c      	lsls	r4, r3
 8001076:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800107a:	fbbe f1f7 	udiv	r1, lr, r7
 800107e:	fa1f f58c 	uxth.w	r5, ip
 8001082:	fb07 ee11 	mls	lr, r7, r1, lr
 8001086:	fb01 f005 	mul.w	r0, r1, r5
 800108a:	0c22      	lsrs	r2, r4, #16
 800108c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8001090:	4290      	cmp	r0, r2
 8001092:	d90a      	bls.n	80010aa <__udivmoddi4+0x66>
 8001094:	eb1c 0202 	adds.w	r2, ip, r2
 8001098:	f101 3eff 	add.w	lr, r1, #4294967295
 800109c:	f080 8119 	bcs.w	80012d2 <__udivmoddi4+0x28e>
 80010a0:	4290      	cmp	r0, r2
 80010a2:	f240 8116 	bls.w	80012d2 <__udivmoddi4+0x28e>
 80010a6:	3902      	subs	r1, #2
 80010a8:	4462      	add	r2, ip
 80010aa:	1a12      	subs	r2, r2, r0
 80010ac:	fbb2 f0f7 	udiv	r0, r2, r7
 80010b0:	fb07 2210 	mls	r2, r7, r0, r2
 80010b4:	fb00 f505 	mul.w	r5, r0, r5
 80010b8:	b2a4      	uxth	r4, r4
 80010ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80010be:	42a5      	cmp	r5, r4
 80010c0:	d90a      	bls.n	80010d8 <__udivmoddi4+0x94>
 80010c2:	eb1c 0404 	adds.w	r4, ip, r4
 80010c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80010ca:	f080 8104 	bcs.w	80012d6 <__udivmoddi4+0x292>
 80010ce:	42a5      	cmp	r5, r4
 80010d0:	f240 8101 	bls.w	80012d6 <__udivmoddi4+0x292>
 80010d4:	4464      	add	r4, ip
 80010d6:	3802      	subs	r0, #2
 80010d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80010dc:	2100      	movs	r1, #0
 80010de:	1b64      	subs	r4, r4, r5
 80010e0:	b11e      	cbz	r6, 80010ea <__udivmoddi4+0xa6>
 80010e2:	40dc      	lsrs	r4, r3
 80010e4:	2300      	movs	r3, #0
 80010e6:	e9c6 4300 	strd	r4, r3, [r6]
 80010ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ee:	428b      	cmp	r3, r1
 80010f0:	d908      	bls.n	8001104 <__udivmoddi4+0xc0>
 80010f2:	2e00      	cmp	r6, #0
 80010f4:	f000 80ea 	beq.w	80012cc <__udivmoddi4+0x288>
 80010f8:	2100      	movs	r1, #0
 80010fa:	e9c6 0500 	strd	r0, r5, [r6]
 80010fe:	4608      	mov	r0, r1
 8001100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001104:	fab3 f183 	clz	r1, r3
 8001108:	2900      	cmp	r1, #0
 800110a:	d148      	bne.n	800119e <__udivmoddi4+0x15a>
 800110c:	42ab      	cmp	r3, r5
 800110e:	d302      	bcc.n	8001116 <__udivmoddi4+0xd2>
 8001110:	4282      	cmp	r2, r0
 8001112:	f200 80f8 	bhi.w	8001306 <__udivmoddi4+0x2c2>
 8001116:	1a84      	subs	r4, r0, r2
 8001118:	eb65 0203 	sbc.w	r2, r5, r3
 800111c:	2001      	movs	r0, #1
 800111e:	4696      	mov	lr, r2
 8001120:	2e00      	cmp	r6, #0
 8001122:	d0e2      	beq.n	80010ea <__udivmoddi4+0xa6>
 8001124:	e9c6 4e00 	strd	r4, lr, [r6]
 8001128:	e7df      	b.n	80010ea <__udivmoddi4+0xa6>
 800112a:	b902      	cbnz	r2, 800112e <__udivmoddi4+0xea>
 800112c:	deff      	udf	#255	; 0xff
 800112e:	fab2 f382 	clz	r3, r2
 8001132:	2b00      	cmp	r3, #0
 8001134:	f040 808e 	bne.w	8001254 <__udivmoddi4+0x210>
 8001138:	1a88      	subs	r0, r1, r2
 800113a:	2101      	movs	r1, #1
 800113c:	0c17      	lsrs	r7, r2, #16
 800113e:	fa1f fe82 	uxth.w	lr, r2
 8001142:	fbb0 f5f7 	udiv	r5, r0, r7
 8001146:	fb07 0015 	mls	r0, r7, r5, r0
 800114a:	0c22      	lsrs	r2, r4, #16
 800114c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001150:	fb0e f005 	mul.w	r0, lr, r5
 8001154:	4290      	cmp	r0, r2
 8001156:	d908      	bls.n	800116a <__udivmoddi4+0x126>
 8001158:	eb1c 0202 	adds.w	r2, ip, r2
 800115c:	f105 38ff 	add.w	r8, r5, #4294967295
 8001160:	d202      	bcs.n	8001168 <__udivmoddi4+0x124>
 8001162:	4290      	cmp	r0, r2
 8001164:	f200 80cc 	bhi.w	8001300 <__udivmoddi4+0x2bc>
 8001168:	4645      	mov	r5, r8
 800116a:	1a12      	subs	r2, r2, r0
 800116c:	fbb2 f0f7 	udiv	r0, r2, r7
 8001170:	fb07 2210 	mls	r2, r7, r0, r2
 8001174:	fb0e fe00 	mul.w	lr, lr, r0
 8001178:	b2a4      	uxth	r4, r4
 800117a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800117e:	45a6      	cmp	lr, r4
 8001180:	d908      	bls.n	8001194 <__udivmoddi4+0x150>
 8001182:	eb1c 0404 	adds.w	r4, ip, r4
 8001186:	f100 32ff 	add.w	r2, r0, #4294967295
 800118a:	d202      	bcs.n	8001192 <__udivmoddi4+0x14e>
 800118c:	45a6      	cmp	lr, r4
 800118e:	f200 80b4 	bhi.w	80012fa <__udivmoddi4+0x2b6>
 8001192:	4610      	mov	r0, r2
 8001194:	eba4 040e 	sub.w	r4, r4, lr
 8001198:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800119c:	e7a0      	b.n	80010e0 <__udivmoddi4+0x9c>
 800119e:	f1c1 0720 	rsb	r7, r1, #32
 80011a2:	408b      	lsls	r3, r1
 80011a4:	fa22 fc07 	lsr.w	ip, r2, r7
 80011a8:	ea4c 0c03 	orr.w	ip, ip, r3
 80011ac:	fa25 fa07 	lsr.w	sl, r5, r7
 80011b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80011b4:	fbba f8f9 	udiv	r8, sl, r9
 80011b8:	408d      	lsls	r5, r1
 80011ba:	fa20 f307 	lsr.w	r3, r0, r7
 80011be:	fb09 aa18 	mls	sl, r9, r8, sl
 80011c2:	fa1f fe8c 	uxth.w	lr, ip
 80011c6:	432b      	orrs	r3, r5
 80011c8:	fa00 f501 	lsl.w	r5, r0, r1
 80011cc:	fb08 f00e 	mul.w	r0, r8, lr
 80011d0:	0c1c      	lsrs	r4, r3, #16
 80011d2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80011d6:	42a0      	cmp	r0, r4
 80011d8:	fa02 f201 	lsl.w	r2, r2, r1
 80011dc:	d90b      	bls.n	80011f6 <__udivmoddi4+0x1b2>
 80011de:	eb1c 0404 	adds.w	r4, ip, r4
 80011e2:	f108 3aff 	add.w	sl, r8, #4294967295
 80011e6:	f080 8086 	bcs.w	80012f6 <__udivmoddi4+0x2b2>
 80011ea:	42a0      	cmp	r0, r4
 80011ec:	f240 8083 	bls.w	80012f6 <__udivmoddi4+0x2b2>
 80011f0:	f1a8 0802 	sub.w	r8, r8, #2
 80011f4:	4464      	add	r4, ip
 80011f6:	1a24      	subs	r4, r4, r0
 80011f8:	b298      	uxth	r0, r3
 80011fa:	fbb4 f3f9 	udiv	r3, r4, r9
 80011fe:	fb09 4413 	mls	r4, r9, r3, r4
 8001202:	fb03 fe0e 	mul.w	lr, r3, lr
 8001206:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800120a:	45a6      	cmp	lr, r4
 800120c:	d908      	bls.n	8001220 <__udivmoddi4+0x1dc>
 800120e:	eb1c 0404 	adds.w	r4, ip, r4
 8001212:	f103 30ff 	add.w	r0, r3, #4294967295
 8001216:	d26a      	bcs.n	80012ee <__udivmoddi4+0x2aa>
 8001218:	45a6      	cmp	lr, r4
 800121a:	d968      	bls.n	80012ee <__udivmoddi4+0x2aa>
 800121c:	3b02      	subs	r3, #2
 800121e:	4464      	add	r4, ip
 8001220:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001224:	fba0 9302 	umull	r9, r3, r0, r2
 8001228:	eba4 040e 	sub.w	r4, r4, lr
 800122c:	429c      	cmp	r4, r3
 800122e:	46c8      	mov	r8, r9
 8001230:	469e      	mov	lr, r3
 8001232:	d354      	bcc.n	80012de <__udivmoddi4+0x29a>
 8001234:	d051      	beq.n	80012da <__udivmoddi4+0x296>
 8001236:	2e00      	cmp	r6, #0
 8001238:	d067      	beq.n	800130a <__udivmoddi4+0x2c6>
 800123a:	ebb5 0308 	subs.w	r3, r5, r8
 800123e:	eb64 040e 	sbc.w	r4, r4, lr
 8001242:	40cb      	lsrs	r3, r1
 8001244:	fa04 f707 	lsl.w	r7, r4, r7
 8001248:	431f      	orrs	r7, r3
 800124a:	40cc      	lsrs	r4, r1
 800124c:	e9c6 7400 	strd	r7, r4, [r6]
 8001250:	2100      	movs	r1, #0
 8001252:	e74a      	b.n	80010ea <__udivmoddi4+0xa6>
 8001254:	fa02 fc03 	lsl.w	ip, r2, r3
 8001258:	f1c3 0020 	rsb	r0, r3, #32
 800125c:	40c1      	lsrs	r1, r0
 800125e:	409d      	lsls	r5, r3
 8001260:	fa24 f000 	lsr.w	r0, r4, r0
 8001264:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001268:	4328      	orrs	r0, r5
 800126a:	fbb1 f5f7 	udiv	r5, r1, r7
 800126e:	fb07 1115 	mls	r1, r7, r5, r1
 8001272:	fa1f fe8c 	uxth.w	lr, ip
 8001276:	0c02      	lsrs	r2, r0, #16
 8001278:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800127c:	fb05 f10e 	mul.w	r1, r5, lr
 8001280:	4291      	cmp	r1, r2
 8001282:	fa04 f403 	lsl.w	r4, r4, r3
 8001286:	d908      	bls.n	800129a <__udivmoddi4+0x256>
 8001288:	eb1c 0202 	adds.w	r2, ip, r2
 800128c:	f105 38ff 	add.w	r8, r5, #4294967295
 8001290:	d22f      	bcs.n	80012f2 <__udivmoddi4+0x2ae>
 8001292:	4291      	cmp	r1, r2
 8001294:	d92d      	bls.n	80012f2 <__udivmoddi4+0x2ae>
 8001296:	3d02      	subs	r5, #2
 8001298:	4462      	add	r2, ip
 800129a:	1a52      	subs	r2, r2, r1
 800129c:	fbb2 f1f7 	udiv	r1, r2, r7
 80012a0:	fb07 2211 	mls	r2, r7, r1, r2
 80012a4:	b280      	uxth	r0, r0
 80012a6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80012aa:	fb01 f20e 	mul.w	r2, r1, lr
 80012ae:	4282      	cmp	r2, r0
 80012b0:	d908      	bls.n	80012c4 <__udivmoddi4+0x280>
 80012b2:	eb1c 0000 	adds.w	r0, ip, r0
 80012b6:	f101 38ff 	add.w	r8, r1, #4294967295
 80012ba:	d216      	bcs.n	80012ea <__udivmoddi4+0x2a6>
 80012bc:	4282      	cmp	r2, r0
 80012be:	d914      	bls.n	80012ea <__udivmoddi4+0x2a6>
 80012c0:	3902      	subs	r1, #2
 80012c2:	4460      	add	r0, ip
 80012c4:	1a80      	subs	r0, r0, r2
 80012c6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80012ca:	e73a      	b.n	8001142 <__udivmoddi4+0xfe>
 80012cc:	4631      	mov	r1, r6
 80012ce:	4630      	mov	r0, r6
 80012d0:	e70b      	b.n	80010ea <__udivmoddi4+0xa6>
 80012d2:	4671      	mov	r1, lr
 80012d4:	e6e9      	b.n	80010aa <__udivmoddi4+0x66>
 80012d6:	4610      	mov	r0, r2
 80012d8:	e6fe      	b.n	80010d8 <__udivmoddi4+0x94>
 80012da:	454d      	cmp	r5, r9
 80012dc:	d2ab      	bcs.n	8001236 <__udivmoddi4+0x1f2>
 80012de:	ebb9 0802 	subs.w	r8, r9, r2
 80012e2:	eb63 0e0c 	sbc.w	lr, r3, ip
 80012e6:	3801      	subs	r0, #1
 80012e8:	e7a5      	b.n	8001236 <__udivmoddi4+0x1f2>
 80012ea:	4641      	mov	r1, r8
 80012ec:	e7ea      	b.n	80012c4 <__udivmoddi4+0x280>
 80012ee:	4603      	mov	r3, r0
 80012f0:	e796      	b.n	8001220 <__udivmoddi4+0x1dc>
 80012f2:	4645      	mov	r5, r8
 80012f4:	e7d1      	b.n	800129a <__udivmoddi4+0x256>
 80012f6:	46d0      	mov	r8, sl
 80012f8:	e77d      	b.n	80011f6 <__udivmoddi4+0x1b2>
 80012fa:	4464      	add	r4, ip
 80012fc:	3802      	subs	r0, #2
 80012fe:	e749      	b.n	8001194 <__udivmoddi4+0x150>
 8001300:	3d02      	subs	r5, #2
 8001302:	4462      	add	r2, ip
 8001304:	e731      	b.n	800116a <__udivmoddi4+0x126>
 8001306:	4608      	mov	r0, r1
 8001308:	e70a      	b.n	8001120 <__udivmoddi4+0xdc>
 800130a:	4631      	mov	r1, r6
 800130c:	e6ed      	b.n	80010ea <__udivmoddi4+0xa6>
 800130e:	bf00      	nop

08001310 <__aeabi_idiv0>:
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop

08001314 <selectMuxPin>:
#define ADC_RES 4095

const int SelectPins[3] = {S1_Pin, S2_Pin, S3_Pin};

void selectMuxPin(int pin)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 3; i++)
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	e01f      	b.n	8001362 <selectMuxPin+0x4e>
	{
		if(pin & (1 << i))
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	fa42 f303 	asr.w	r3, r2, r3
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00a      	beq.n	8001348 <selectMuxPin+0x34>
			HAL_GPIO_WritePin(SelectPinsPort, SelectPins[i], GPIO_PIN_SET);
 8001332:	4a10      	ldr	r2, [pc, #64]	; (8001374 <selectMuxPin+0x60>)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	b29b      	uxth	r3, r3
 800133c:	2201      	movs	r2, #1
 800133e:	4619      	mov	r1, r3
 8001340:	480d      	ldr	r0, [pc, #52]	; (8001378 <selectMuxPin+0x64>)
 8001342:	f001 fbdf 	bl	8002b04 <HAL_GPIO_WritePin>
 8001346:	e009      	b.n	800135c <selectMuxPin+0x48>
		else
			HAL_GPIO_WritePin(SelectPinsPort, SelectPins[i], GPIO_PIN_RESET);
 8001348:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <selectMuxPin+0x60>)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001350:	b29b      	uxth	r3, r3
 8001352:	2200      	movs	r2, #0
 8001354:	4619      	mov	r1, r3
 8001356:	4808      	ldr	r0, [pc, #32]	; (8001378 <selectMuxPin+0x64>)
 8001358:	f001 fbd4 	bl	8002b04 <HAL_GPIO_WritePin>
	for(int i = 0; i < 3; i++)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3301      	adds	r3, #1
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2b02      	cmp	r3, #2
 8001366:	dddc      	ble.n	8001322 <selectMuxPin+0xe>

	}
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	080068d4 	.word	0x080068d4
 8001378:	40020000 	.word	0x40020000
 800137c:	00000000 	.word	0x00000000

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b0a4      	sub	sp, #144	; 0x90
 8001384:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t raw;
	char buffer[100];
	float voltages[3];
	float temperature;
	float TotalVoltage = 0.0f;
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800138e:	f000 fc3c 	bl	8001c0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001392:	f000 f921 	bl	80015d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001396:	f000 f9ef 	bl	8001778 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800139a:	f000 f9c3 	bl	8001724 <MX_USART2_UART_Init>
  MX_ADC_Init();
 800139e:	f000 f969 	bl	8001674 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
   // HAL_GPIO_WritePin(GPIOA, EN_Pin, RESET);
  for(int i = 0; i < 3; i++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80013a6:	e00c      	b.n	80013c2 <main+0x42>
  	{

  	HAL_GPIO_WritePin(SelectPinsPort, SelectPins[i], GPIO_PIN_SET);
 80013a8:	4a81      	ldr	r2, [pc, #516]	; (80015b0 <main+0x230>)
 80013aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	2201      	movs	r2, #1
 80013b4:	4619      	mov	r1, r3
 80013b6:	487f      	ldr	r0, [pc, #508]	; (80015b4 <main+0x234>)
 80013b8:	f001 fba4 	bl	8002b04 <HAL_GPIO_WritePin>
  for(int i = 0; i < 3; i++)
 80013bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013be:	3301      	adds	r3, #1
 80013c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80013c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	ddef      	ble.n	80013a8 <main+0x28>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i = 0; i < 3; i++)
 80013c8:	2300      	movs	r3, #0
 80013ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80013cc:	e04b      	b.n	8001466 <main+0xe6>
	  {
		  selectMuxPin(i);
 80013ce:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80013d0:	f7ff ffa0 	bl	8001314 <selectMuxPin>
		  HAL_ADC_Start(&hadc);
 80013d4:	4878      	ldr	r0, [pc, #480]	; (80015b8 <main+0x238>)
 80013d6:	f000 fdef 	bl	8001fb8 <HAL_ADC_Start>

		  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80013da:	f04f 31ff 	mov.w	r1, #4294967295
 80013de:	4876      	ldr	r0, [pc, #472]	; (80015b8 <main+0x238>)
 80013e0:	f000 fe76 	bl	80020d0 <HAL_ADC_PollForConversion>
		  value[i] = HAL_ADC_GetValue(&hadc);
 80013e4:	4874      	ldr	r0, [pc, #464]	; (80015b8 <main+0x238>)
 80013e6:	f000 ff03 	bl	80021f0 <HAL_ADC_GetValue>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fc69 	bl	8000cc4 <__aeabi_ui2f>
 80013f2:	4602      	mov	r2, r0
 80013f4:	4971      	ldr	r1, [pc, #452]	; (80015bc <main+0x23c>)
 80013f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  raw = HAL_ADC_GetValue(&hadc);
 80013fc:	486e      	ldr	r0, [pc, #440]	; (80015b8 <main+0x238>)
 80013fe:	f000 fef7 	bl	80021f0 <HAL_ADC_GetValue>
 8001402:	4603      	mov	r3, r0
 8001404:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

		  temperature = ((float)raw / 4095.0) * 3300.0 / 10.0;
 8001408:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fc59 	bl	8000cc4 <__aeabi_ui2f>
 8001412:	4603      	mov	r3, r0
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f81f 	bl	8000458 <__aeabi_f2d>
 800141a:	a35f      	add	r3, pc, #380	; (adr r3, 8001598 <main+0x218>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff f99c 	bl	800075c <__aeabi_ddiv>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	a35c      	add	r3, pc, #368	; (adr r3, 80015a0 <main+0x220>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7ff f869 	bl	8000508 <__aeabi_dmul>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	4b5f      	ldr	r3, [pc, #380]	; (80015c0 <main+0x240>)
 8001444:	f7ff f98a 	bl	800075c <__aeabi_ddiv>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4610      	mov	r0, r2
 800144e:	4619      	mov	r1, r3
 8001450:	f7ff fb32 	bl	8000ab8 <__aeabi_d2f>
 8001454:	4603      	mov	r3, r0
 8001456:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

		  HAL_ADC_Stop(&hadc);
 800145a:	4857      	ldr	r0, [pc, #348]	; (80015b8 <main+0x238>)
 800145c:	f000 fe0c 	bl	8002078 <HAL_ADC_Stop>
	  for(int i = 0; i < 3; i++)
 8001460:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001462:	3301      	adds	r3, #1
 8001464:	67bb      	str	r3, [r7, #120]	; 0x78
 8001466:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001468:	2b02      	cmp	r3, #2
 800146a:	ddb0      	ble.n	80013ce <main+0x4e>


	  }

	  for(int i = 0; i < 3; i++)
 800146c:	2300      	movs	r3, #0
 800146e:	677b      	str	r3, [r7, #116]	; 0x74
 8001470:	e054      	b.n	800151c <main+0x19c>
	  {
		  voltages[i] = (value[i] / ADC_RES) * Vref;
 8001472:	4a52      	ldr	r2, [pc, #328]	; (80015bc <main+0x23c>)
 8001474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147a:	4952      	ldr	r1, [pc, #328]	; (80015c4 <main+0x244>)
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fd2d 	bl	8000edc <__aeabi_fdiv>
 8001482:	4603      	mov	r3, r0
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ffe7 	bl	8000458 <__aeabi_f2d>
 800148a:	a347      	add	r3, pc, #284	; (adr r3, 80015a8 <main+0x228>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	f7ff f83a 	bl	8000508 <__aeabi_dmul>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f7ff fb0c 	bl	8000ab8 <__aeabi_d2f>
 80014a0:	4602      	mov	r2, r0
 80014a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	3388      	adds	r3, #136	; 0x88
 80014a8:	443b      	add	r3, r7
 80014aa:	f843 2c88 	str.w	r2, [r3, #-136]
		  snprintf(buffer,sizeof(buffer), "Voltage at channel(%d): %.2f\r\n",i,voltages[i]);
 80014ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	3388      	adds	r3, #136	; 0x88
 80014b4:	443b      	add	r3, r7
 80014b6:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7fe ffcc 	bl	8000458 <__aeabi_f2d>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	f107 000c 	add.w	r0, r7, #12
 80014c8:	e9cd 2300 	strd	r2, r3, [sp]
 80014cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014ce:	4a3e      	ldr	r2, [pc, #248]	; (80015c8 <main+0x248>)
 80014d0:	2164      	movs	r1, #100	; 0x64
 80014d2:	f003 f86b 	bl	80045ac <sniprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	4618      	mov	r0, r3
 80014dc:	f7fe fe50 	bl	8000180 <strlen>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	f107 010c 	add.w	r1, r7, #12
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ec:	4837      	ldr	r0, [pc, #220]	; (80015cc <main+0x24c>)
 80014ee:	f002 f967 	bl	80037c0 <HAL_UART_Transmit>
		  HAL_Delay(1000);
 80014f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014f6:	f000 fbf7 	bl	8001ce8 <HAL_Delay>

		  TotalVoltage += voltages[i];
 80014fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	3388      	adds	r3, #136	; 0x88
 8001500:	443b      	add	r3, r7
 8001502:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001506:	4619      	mov	r1, r3
 8001508:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800150c:	f7ff fb2a 	bl	8000b64 <__addsf3>
 8001510:	4603      	mov	r3, r0
 8001512:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  for(int i = 0; i < 3; i++)
 8001516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001518:	3301      	adds	r3, #1
 800151a:	677b      	str	r3, [r7, #116]	; 0x74
 800151c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800151e:	2b02      	cmp	r3, #2
 8001520:	dda7      	ble.n	8001472 <main+0xf2>
	  }

	  	  snprintf(buffer, sizeof(buffer), "Total Voltage: %.2f\r\n", TotalVoltage);
 8001522:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001526:	f7fe ff97 	bl	8000458 <__aeabi_f2d>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	f107 000c 	add.w	r0, r7, #12
 8001532:	e9cd 2300 	strd	r2, r3, [sp]
 8001536:	4a26      	ldr	r2, [pc, #152]	; (80015d0 <main+0x250>)
 8001538:	2164      	movs	r1, #100	; 0x64
 800153a:	f003 f837 	bl	80045ac <sniprintf>
	      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe fe1c 	bl	8000180 <strlen>
 8001548:	4603      	mov	r3, r0
 800154a:	b29a      	uxth	r2, r3
 800154c:	f107 010c 	add.w	r1, r7, #12
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	481d      	ldr	r0, [pc, #116]	; (80015cc <main+0x24c>)
 8001556:	f002 f933 	bl	80037c0 <HAL_UART_Transmit>

	      snprintf(buffer, sizeof(buffer), "Temperature: %.2f\r\n", temperature);
 800155a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800155e:	f7fe ff7b 	bl	8000458 <__aeabi_f2d>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	f107 000c 	add.w	r0, r7, #12
 800156a:	e9cd 2300 	strd	r2, r3, [sp]
 800156e:	4a19      	ldr	r2, [pc, #100]	; (80015d4 <main+0x254>)
 8001570:	2164      	movs	r1, #100	; 0x64
 8001572:	f003 f81b 	bl	80045ac <sniprintf>
	      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe fe00 	bl	8000180 <strlen>
 8001580:	4603      	mov	r3, r0
 8001582:	b29a      	uxth	r2, r3
 8001584:	f107 010c 	add.w	r1, r7, #12
 8001588:	f04f 33ff 	mov.w	r3, #4294967295
 800158c:	480f      	ldr	r0, [pc, #60]	; (80015cc <main+0x24c>)
 800158e:	f002 f917 	bl	80037c0 <HAL_UART_Transmit>
	  for(int i = 0; i < 3; i++)
 8001592:	e719      	b.n	80013c8 <main+0x48>
 8001594:	f3af 8000 	nop.w
 8001598:	00000000 	.word	0x00000000
 800159c:	40affe00 	.word	0x40affe00
 80015a0:	00000000 	.word	0x00000000
 80015a4:	40a9c800 	.word	0x40a9c800
 80015a8:	66666666 	.word	0x66666666
 80015ac:	400a6666 	.word	0x400a6666
 80015b0:	080068d4 	.word	0x080068d4
 80015b4:	40020000 	.word	0x40020000
 80015b8:	200001f0 	.word	0x200001f0
 80015bc:	2000028c 	.word	0x2000028c
 80015c0:	40240000 	.word	0x40240000
 80015c4:	457ff000 	.word	0x457ff000
 80015c8:	08006888 	.word	0x08006888
 80015cc:	20000244 	.word	0x20000244
 80015d0:	080068a8 	.word	0x080068a8
 80015d4:	080068c0 	.word	0x080068c0

080015d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b092      	sub	sp, #72	; 0x48
 80015dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	2234      	movs	r2, #52	; 0x34
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 f857 	bl	800469a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ec:	463b      	mov	r3, r7
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <SystemClock_Config+0x98>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001602:	4a1b      	ldr	r2, [pc, #108]	; (8001670 <SystemClock_Config+0x98>)
 8001604:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001608:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800160a:	2302      	movs	r3, #2
 800160c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800160e:	2301      	movs	r3, #1
 8001610:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001612:	2310      	movs	r3, #16
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001616:	2302      	movs	r3, #2
 8001618:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800161a:	2300      	movs	r3, #0
 800161c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800161e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001624:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001628:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4618      	mov	r0, r3
 8001630:	f001 fa80 	bl	8002b34 <HAL_RCC_OscConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800163a:	f000 f919 	bl	8001870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800163e:	230f      	movs	r3, #15
 8001640:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001642:	2303      	movs	r3, #3
 8001644:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001652:	463b      	mov	r3, r7
 8001654:	2101      	movs	r1, #1
 8001656:	4618      	mov	r0, r3
 8001658:	f001 fd9c 	bl	8003194 <HAL_RCC_ClockConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001662:	f000 f905 	bl	8001870 <Error_Handler>
  }
}
 8001666:	bf00      	nop
 8001668:	3748      	adds	r7, #72	; 0x48
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40007000 	.word	0x40007000

08001674 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001684:	4b25      	ldr	r3, [pc, #148]	; (800171c <MX_ADC_Init+0xa8>)
 8001686:	4a26      	ldr	r2, [pc, #152]	; (8001720 <MX_ADC_Init+0xac>)
 8001688:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800168a:	4b24      	ldr	r3, [pc, #144]	; (800171c <MX_ADC_Init+0xa8>)
 800168c:	2200      	movs	r2, #0
 800168e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001690:	4b22      	ldr	r3, [pc, #136]	; (800171c <MX_ADC_Init+0xa8>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <MX_ADC_Init+0xa8>)
 8001698:	2200      	movs	r2, #0
 800169a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800169c:	4b1f      	ldr	r3, [pc, #124]	; (800171c <MX_ADC_Init+0xa8>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80016a2:	4b1e      	ldr	r3, [pc, #120]	; (800171c <MX_ADC_Init+0xa8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80016a8:	4b1c      	ldr	r3, [pc, #112]	; (800171c <MX_ADC_Init+0xa8>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80016ae:	4b1b      	ldr	r3, [pc, #108]	; (800171c <MX_ADC_Init+0xa8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <MX_ADC_Init+0xa8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <MX_ADC_Init+0xa8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80016c2:	4b16      	ldr	r3, [pc, #88]	; (800171c <MX_ADC_Init+0xa8>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_ADC_Init+0xa8>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <MX_ADC_Init+0xa8>)
 80016d2:	2210      	movs	r2, #16
 80016d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_ADC_Init+0xa8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_ADC_Init+0xa8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80016e4:	480d      	ldr	r0, [pc, #52]	; (800171c <MX_ADC_Init+0xa8>)
 80016e6:	f000 fb21 	bl	8001d2c <HAL_ADC_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 80016f0:	f000 f8be 	bl	8001870 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016f8:	2301      	movs	r3, #1
 80016fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	4619      	mov	r1, r3
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_ADC_Init+0xa8>)
 8001706:	f000 fd7f 	bl	8002208 <HAL_ADC_ConfigChannel>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8001710:	f000 f8ae 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200001f0 	.word	0x200001f0
 8001720:	40012400 	.word	0x40012400

08001724 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <MX_USART2_UART_Init+0x50>)
 800172c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 8001730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 800174a:	220c      	movs	r2, #12
 800174c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 800175c:	f001 ffe0 	bl	8003720 <HAL_UART_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001766:	f000 f883 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000244 	.word	0x20000244
 8001774:	40004400 	.word	0x40004400

08001778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178e:	4b35      	ldr	r3, [pc, #212]	; (8001864 <MX_GPIO_Init+0xec>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	4a34      	ldr	r2, [pc, #208]	; (8001864 <MX_GPIO_Init+0xec>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	61d3      	str	r3, [r2, #28]
 800179a:	4b32      	ldr	r3, [pc, #200]	; (8001864 <MX_GPIO_Init+0xec>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017a6:	4b2f      	ldr	r3, [pc, #188]	; (8001864 <MX_GPIO_Init+0xec>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	4a2e      	ldr	r2, [pc, #184]	; (8001864 <MX_GPIO_Init+0xec>)
 80017ac:	f043 0320 	orr.w	r3, r3, #32
 80017b0:	61d3      	str	r3, [r2, #28]
 80017b2:	4b2c      	ldr	r3, [pc, #176]	; (8001864 <MX_GPIO_Init+0xec>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	f003 0320 	and.w	r3, r3, #32
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	4b29      	ldr	r3, [pc, #164]	; (8001864 <MX_GPIO_Init+0xec>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	4a28      	ldr	r2, [pc, #160]	; (8001864 <MX_GPIO_Init+0xec>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	61d3      	str	r3, [r2, #28]
 80017ca:	4b26      	ldr	r3, [pc, #152]	; (8001864 <MX_GPIO_Init+0xec>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	4b23      	ldr	r3, [pc, #140]	; (8001864 <MX_GPIO_Init+0xec>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	4a22      	ldr	r2, [pc, #136]	; (8001864 <MX_GPIO_Init+0xec>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	61d3      	str	r3, [r2, #28]
 80017e2:	4b20      	ldr	r3, [pc, #128]	; (8001864 <MX_GPIO_Init+0xec>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|S3_Pin|S1_Pin|EN_Pin, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	f44f 61d4 	mov.w	r1, #1696	; 0x6a0
 80017f4:	481c      	ldr	r0, [pc, #112]	; (8001868 <MX_GPIO_Init+0xf0>)
 80017f6:	f001 f985 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	481b      	ldr	r0, [pc, #108]	; (800186c <MX_GPIO_Init+0xf4>)
 8001800:	f001 f980 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800180a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800180e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	4814      	ldr	r0, [pc, #80]	; (800186c <MX_GPIO_Init+0xf4>)
 800181c:	f000 ffe2 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin S3_Pin S1_Pin EN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|S3_Pin|S1_Pin|EN_Pin;
 8001820:	f44f 63d4 	mov.w	r3, #1696	; 0x6a0
 8001824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	480b      	ldr	r0, [pc, #44]	; (8001868 <MX_GPIO_Init+0xf0>)
 800183a:	f000 ffd3 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : S2_Pin */
  GPIO_InitStruct.Pin = S2_Pin;
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001842:	2301      	movs	r3, #1
 8001844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4619      	mov	r1, r3
 8001854:	4805      	ldr	r0, [pc, #20]	; (800186c <MX_GPIO_Init+0xf4>)
 8001856:	f000 ffc5 	bl	80027e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800185a:	bf00      	nop
 800185c:	3728      	adds	r7, #40	; 0x28
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800
 8001868:	40020000 	.word	0x40020000
 800186c:	40020800 	.word	0x40020800

08001870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001874:	b672      	cpsid	i
}
 8001876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001878:	e7fe      	b.n	8001878 <Error_Handler+0x8>
	...

0800187c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_MspInit+0x5c>)
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <HAL_MspInit+0x5c>)
 8001888:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800188c:	6253      	str	r3, [r2, #36]	; 0x24
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_MspInit+0x5c>)
 8001890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001892:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <HAL_MspInit+0x5c>)
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <HAL_MspInit+0x5c>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6213      	str	r3, [r2, #32]
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <HAL_MspInit+0x5c>)
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_MspInit+0x5c>)
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <HAL_MspInit+0x5c>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018bc:	6253      	str	r3, [r2, #36]	; 0x24
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_MspInit+0x5c>)
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018ca:	2007      	movs	r0, #7
 80018cc:	f000 ff56 	bl	800277c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40023800 	.word	0x40023800

080018dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a15      	ldr	r2, [pc, #84]	; (8001950 <HAL_ADC_MspInit+0x74>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d123      	bne.n	8001946 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_ADC_MspInit+0x78>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4a14      	ldr	r2, [pc, #80]	; (8001954 <HAL_ADC_MspInit+0x78>)
 8001904:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001908:	6213      	str	r3, [r2, #32]
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_ADC_MspInit+0x78>)
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_ADC_MspInit+0x78>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <HAL_ADC_MspInit+0x78>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	61d3      	str	r3, [r2, #28]
 8001922:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <HAL_ADC_MspInit+0x78>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800192e:	2303      	movs	r3, #3
 8001930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001932:	2303      	movs	r3, #3
 8001934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4619      	mov	r1, r3
 8001940:	4805      	ldr	r0, [pc, #20]	; (8001958 <HAL_ADC_MspInit+0x7c>)
 8001942:	f000 ff4f 	bl	80027e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001946:	bf00      	nop
 8001948:	3728      	adds	r7, #40	; 0x28
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40012400 	.word	0x40012400
 8001954:	40023800 	.word	0x40023800
 8001958:	40020000 	.word	0x40020000

0800195c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a17      	ldr	r2, [pc, #92]	; (80019d8 <HAL_UART_MspInit+0x7c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d127      	bne.n	80019ce <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_UART_MspInit+0x80>)
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	4a16      	ldr	r2, [pc, #88]	; (80019dc <HAL_UART_MspInit+0x80>)
 8001984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001988:	6253      	str	r3, [r2, #36]	; 0x24
 800198a:	4b14      	ldr	r3, [pc, #80]	; (80019dc <HAL_UART_MspInit+0x80>)
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_UART_MspInit+0x80>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4a10      	ldr	r2, [pc, #64]	; (80019dc <HAL_UART_MspInit+0x80>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	61d3      	str	r3, [r2, #28]
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_UART_MspInit+0x80>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019ae:	230c      	movs	r3, #12
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019be:	2307      	movs	r3, #7
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <HAL_UART_MspInit+0x84>)
 80019ca:	f000 ff0b 	bl	80027e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40004400 	.word	0x40004400
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020000 	.word	0x40020000

080019e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <NMI_Handler+0x4>

080019ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ee:	e7fe      	b.n	80019ee <HardFault_Handler+0x4>

080019f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <MemManage_Handler+0x4>

080019f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fa:	e7fe      	b.n	80019fa <BusFault_Handler+0x4>

080019fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <UsageFault_Handler+0x4>

08001a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr

08001a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a2a:	f000 f941 	bl	8001cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  return 1;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <_kill>:

int _kill(int pid, int sig)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a4a:	f002 fe79 	bl	8004740 <__errno>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2216      	movs	r2, #22
 8001a52:	601a      	str	r2, [r3, #0]
  return -1;
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_exit>:

void _exit (int status)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ffe7 	bl	8001a40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a72:	e7fe      	b.n	8001a72 <_exit+0x12>

08001a74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	e00a      	b.n	8001a9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a86:	f3af 8000 	nop.w
 8001a8a:	4601      	mov	r1, r0
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	60ba      	str	r2, [r7, #8]
 8001a92:	b2ca      	uxtb	r2, r1
 8001a94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dbf0      	blt.n	8001a86 <_read+0x12>
  }

  return len;
 8001aa4:	687b      	ldr	r3, [r7, #4]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	e009      	b.n	8001ad4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	60ba      	str	r2, [r7, #8]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dbf1      	blt.n	8001ac0 <_write+0x12>
  }
  return len;
 8001adc:	687b      	ldr	r3, [r7, #4]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <_close>:

int _close(int file)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b0c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <_isatty>:

int _isatty(int file)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b085      	sub	sp, #20
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr
	...

08001b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b50:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <_sbrk+0x5c>)
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <_sbrk+0x60>)
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <_sbrk+0x64>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <_sbrk+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d207      	bcs.n	8001b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b78:	f002 fde2 	bl	8004740 <__errno>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	220c      	movs	r2, #12
 8001b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	e009      	b.n	8001b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <_sbrk+0x64>)
 8001b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20014000 	.word	0x20014000
 8001ba8:	00000400 	.word	0x00000400
 8001bac:	20000298 	.word	0x20000298
 8001bb0:	200003f0 	.word	0x200003f0

08001bb4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc0:	f7ff fff8 	bl	8001bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc4:	480b      	ldr	r0, [pc, #44]	; (8001bf4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bc6:	490c      	ldr	r1, [pc, #48]	; (8001bf8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bc8:	4a0c      	ldr	r2, [pc, #48]	; (8001bfc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bcc:	e002      	b.n	8001bd4 <LoopCopyDataInit>

08001bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd2:	3304      	adds	r3, #4

08001bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd8:	d3f9      	bcc.n	8001bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bdc:	4c09      	ldr	r4, [pc, #36]	; (8001c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be0:	e001      	b.n	8001be6 <LoopFillZerobss>

08001be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be4:	3204      	adds	r2, #4

08001be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be8:	d3fb      	bcc.n	8001be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bea:	f002 fdaf 	bl	800474c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bee:	f7ff fbc7 	bl	8001380 <main>
  bx lr
 8001bf2:	4770      	bx	lr
  ldr r0, =_sdata
 8001bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001bfc:	08006c84 	.word	0x08006c84
  ldr r2, =_sbss
 8001c00:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c04:	200003ec 	.word	0x200003ec

08001c08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC1_IRQHandler>

08001c0a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c14:	2003      	movs	r0, #3
 8001c16:	f000 fdb1 	bl	800277c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f000 f80e 	bl	8001c3c <HAL_InitTick>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	71fb      	strb	r3, [r7, #7]
 8001c2a:	e001      	b.n	8001c30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c2c:	f7ff fe26 	bl	800187c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c30:	79fb      	ldrb	r3, [r7, #7]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c48:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <HAL_InitTick+0x68>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d022      	beq.n	8001c96 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c50:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <HAL_InitTick+0x6c>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <HAL_InitTick+0x68>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 fdb0 	bl	80027ca <HAL_SYSTICK_Config>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10f      	bne.n	8001c90 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b0f      	cmp	r3, #15
 8001c74:	d809      	bhi.n	8001c8a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c76:	2200      	movs	r2, #0
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7e:	f000 fd88 	bl	8002792 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c82:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <HAL_InitTick+0x70>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	e007      	b.n	8001c9a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	73fb      	strb	r3, [r7, #15]
 8001c8e:	e004      	b.n	8001c9a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
 8001c94:	e001      	b.n	8001c9a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000008 	.word	0x20000008
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	20000004 	.word	0x20000004

08001cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_IncTick+0x1c>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_IncTick+0x20>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4a03      	ldr	r2, [pc, #12]	; (8001ccc <HAL_IncTick+0x1c>)
 8001cc0:	6013      	str	r3, [r2, #0]
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	2000029c 	.word	0x2000029c
 8001cd0:	20000008 	.word	0x20000008

08001cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd8:	4b02      	ldr	r3, [pc, #8]	; (8001ce4 <HAL_GetTick+0x10>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr
 8001ce4:	2000029c 	.word	0x2000029c

08001ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf0:	f7ff fff0 	bl	8001cd4 <HAL_GetTick>
 8001cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d00:	d004      	beq.n	8001d0c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_Delay+0x40>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4413      	add	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d0c:	bf00      	nop
 8001d0e:	f7ff ffe1 	bl	8001cd4 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d8f7      	bhi.n	8001d0e <HAL_Delay+0x26>
  {
  }
}
 8001d1e:	bf00      	nop
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000008 	.word	0x20000008

08001d2c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08e      	sub	sp, #56	; 0x38
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e127      	b.n	8001f9c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d115      	bne.n	8001d86 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d68:	4b8e      	ldr	r3, [pc, #568]	; (8001fa4 <HAL_ADC_Init+0x278>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a8d      	ldr	r2, [pc, #564]	; (8001fa4 <HAL_ADC_Init+0x278>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6213      	str	r3, [r2, #32]
 8001d74:	4b8b      	ldr	r3, [pc, #556]	; (8001fa4 <HAL_ADC_Init+0x278>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff fdab 	bl	80018dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	f003 0310 	and.w	r3, r3, #16
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f040 80ff 	bne.w	8001f92 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d9c:	f023 0302 	bic.w	r3, r3, #2
 8001da0:	f043 0202 	orr.w	r2, r3, #2
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001da8:	4b7f      	ldr	r3, [pc, #508]	; (8001fa8 <HAL_ADC_Init+0x27c>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	497c      	ldr	r1, [pc, #496]	; (8001fa8 <HAL_ADC_Init+0x27c>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001dc2:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dd0:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	fab3 f383 	clz	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001de6:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001dec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001df4:	4619      	mov	r1, r3
 8001df6:	2302      	movs	r3, #2
 8001df8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfc:	fa93 f3a3 	rbit	r3, r3
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	fab3 f383 	clz	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001e0e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e12:	4313      	orrs	r3, r2
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1a:	2b10      	cmp	r3, #16
 8001e1c:	d007      	beq.n	8001e2e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001e26:	4313      	orrs	r3, r2
 8001e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e38:	2b40      	cmp	r3, #64	; 0x40
 8001e3a:	d04f      	beq.n	8001edc <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e42:	4313      	orrs	r3, r2
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001e4e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6912      	ldr	r2, [r2, #16]
 8001e54:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001e58:	d003      	beq.n	8001e62 <HAL_ADC_Init+0x136>
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6912      	ldr	r2, [r2, #16]
 8001e5e:	2a01      	cmp	r2, #1
 8001e60:	d102      	bne.n	8001e68 <HAL_ADC_Init+0x13c>
 8001e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e66:	e000      	b.n	8001e6a <HAL_ADC_Init+0x13e>
 8001e68:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001e6a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d125      	bne.n	8001ec8 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d114      	bne.n	8001eb0 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001e90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	fa92 f2a2 	rbit	r2, r2
 8001e98:	617a      	str	r2, [r7, #20]
  return result;
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	fab2 f282 	clz	r2, r2
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	4093      	lsls	r3, r2
 8001ea4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
 8001eae:	e00b      	b.n	8001ec8 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb4:	f043 0220 	orr.w	r2, r3, #32
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec0:	f043 0201 	orr.w	r2, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	4b37      	ldr	r3, [pc, #220]	; (8001fac <HAL_ADC_Init+0x280>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	4b33      	ldr	r3, [pc, #204]	; (8001fb0 <HAL_ADC_Init+0x284>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001eec:	430b      	orrs	r3, r1
 8001eee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ef8:	d003      	beq.n	8001f02 <HAL_ADC_Init+0x1d6>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d119      	bne.n	8001f36 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	3b01      	subs	r3, #1
 8001f12:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001f16:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	fa92 f2a2 	rbit	r2, r2
 8001f1e:	60fa      	str	r2, [r7, #12]
  return result;
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	fab2 f282 	clz	r2, r2
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	fa03 f202 	lsl.w	r2, r3, r2
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
 8001f34:	e007      	b.n	8001f46 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001f44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <HAL_ADC_Init+0x288>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d10b      	bne.n	8001f6e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f60:	f023 0303 	bic.w	r3, r3, #3
 8001f64:	f043 0201 	orr.w	r2, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f6c:	e014      	b.n	8001f98 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f72:	f023 0312 	bic.w	r3, r3, #18
 8001f76:	f043 0210 	orr.w	r2, r3, #16
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f82:	f043 0201 	orr.w	r2, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001f90:	e002      	b.n	8001f98 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3738      	adds	r7, #56	; 0x38
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40012700 	.word	0x40012700
 8001fac:	fcfc16ff 	.word	0xfcfc16ff
 8001fb0:	c0fff189 	.word	0xc0fff189
 8001fb4:	bf80fffe 	.word	0xbf80fffe

08001fb8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_Start+0x1a>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e04e      	b.n	8002070 <HAL_ADC_Start+0xb8>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fa80 	bl	80024e0 <ADC_Enable>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d141      	bne.n	800206e <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ff2:	f023 0301 	bic.w	r3, r3, #1
 8001ff6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002010:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002014:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002028:	d106      	bne.n	8002038 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202e:	f023 0206 	bic.w	r2, r3, #6
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	651a      	str	r2, [r3, #80]	; 0x50
 8002036:	e002      	b.n	800203e <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800204e:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d107      	bne.n	800206e <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800206c:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800206e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_ADC_Stop+0x1a>
 800208e:	2302      	movs	r3, #2
 8002090:	e01a      	b.n	80020c8 <HAL_ADC_Stop+0x50>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fa7c 	bl	8002598 <ADC_ConversionStop_Disable>
 80020a0:	4603      	mov	r3, r0
 80020a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d109      	bne.n	80020be <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020b2:	f023 0301 	bic.w	r3, r3, #1
 80020b6:	f043 0201 	orr.w	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ec:	d113      	bne.n	8002116 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020fc:	d10b      	bne.n	8002116 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002102:	f043 0220 	orr.w	r2, r3, #32
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e068      	b.n	80021e8 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002116:	f7ff fddd 	bl	8001cd4 <HAL_GetTick>
 800211a:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800211c:	e021      	b.n	8002162 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002124:	d01d      	beq.n	8002162 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <HAL_ADC_PollForConversion+0x6c>
 800212c:	f7ff fdd2 	bl	8001cd4 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d212      	bcs.n	8002162 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10b      	bne.n	8002162 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	f043 0204 	orr.w	r2, r3, #4
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e042      	b.n	80021e8 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0d6      	beq.n	800211e <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d104      	bne.n	8002182 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0212 	mvn.w	r2, #18
 8002180:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d124      	bne.n	80021e6 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d11f      	bne.n	80021e6 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ac:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d006      	beq.n	80021c2 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d111      	bne.n	80021e6 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d105      	bne.n	80021e6 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	f043 0201 	orr.w	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x20>
 8002224:	2302      	movs	r3, #2
 8002226:	e14f      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x2c0>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b06      	cmp	r3, #6
 8002236:	d81c      	bhi.n	8002272 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	3b05      	subs	r3, #5
 800224a:	221f      	movs	r2, #31
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	4019      	ands	r1, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	3b05      	subs	r3, #5
 8002264:	fa00 f203 	lsl.w	r2, r0, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	641a      	str	r2, [r3, #64]	; 0x40
 8002270:	e07e      	b.n	8002370 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b0c      	cmp	r3, #12
 8002278:	d81c      	bhi.n	80022b4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	3b23      	subs	r3, #35	; 0x23
 800228c:	221f      	movs	r2, #31
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	4019      	ands	r1, r3
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	3b23      	subs	r3, #35	; 0x23
 80022a6:	fa00 f203 	lsl.w	r2, r0, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80022b2:	e05d      	b.n	8002370 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b12      	cmp	r3, #18
 80022ba:	d81c      	bhi.n	80022f6 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	3b41      	subs	r3, #65	; 0x41
 80022ce:	221f      	movs	r2, #31
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	4019      	ands	r1, r3
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	3b41      	subs	r3, #65	; 0x41
 80022e8:	fa00 f203 	lsl.w	r2, r0, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	639a      	str	r2, [r3, #56]	; 0x38
 80022f4:	e03c      	b.n	8002370 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b18      	cmp	r3, #24
 80022fc:	d81c      	bhi.n	8002338 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	3b5f      	subs	r3, #95	; 0x5f
 8002310:	221f      	movs	r2, #31
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	4019      	ands	r1, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	3b5f      	subs	r3, #95	; 0x5f
 800232a:	fa00 f203 	lsl.w	r2, r0, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	635a      	str	r2, [r3, #52]	; 0x34
 8002336:	e01b      	b.n	8002370 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	3b7d      	subs	r3, #125	; 0x7d
 800234a:	221f      	movs	r2, #31
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	4019      	ands	r1, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	3b7d      	subs	r3, #125	; 0x7d
 8002364:	fa00 f203 	lsl.w	r2, r0, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b09      	cmp	r3, #9
 8002376:	d81a      	bhi.n	80023ae <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6959      	ldr	r1, [r3, #20]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4613      	mov	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4413      	add	r3, r2
 8002388:	2207      	movs	r2, #7
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	4019      	ands	r1, r3
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	6898      	ldr	r0, [r3, #8]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	4613      	mov	r3, r2
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	4413      	add	r3, r2
 80023a0:	fa00 f203 	lsl.w	r2, r0, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	615a      	str	r2, [r3, #20]
 80023ac:	e05d      	b.n	800246a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b13      	cmp	r3, #19
 80023b4:	d81c      	bhi.n	80023f0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6919      	ldr	r1, [r3, #16]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4613      	mov	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4413      	add	r3, r2
 80023c6:	3b1e      	subs	r3, #30
 80023c8:	2207      	movs	r2, #7
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	4019      	ands	r1, r3
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	6898      	ldr	r0, [r3, #8]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4613      	mov	r3, r2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	3b1e      	subs	r3, #30
 80023e2:	fa00 f203 	lsl.w	r2, r0, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	611a      	str	r2, [r3, #16]
 80023ee:	e03c      	b.n	800246a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b1d      	cmp	r3, #29
 80023f6:	d81c      	bhi.n	8002432 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68d9      	ldr	r1, [r3, #12]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	4613      	mov	r3, r2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	4413      	add	r3, r2
 8002408:	3b3c      	subs	r3, #60	; 0x3c
 800240a:	2207      	movs	r2, #7
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	4019      	ands	r1, r3
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	6898      	ldr	r0, [r3, #8]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	4413      	add	r3, r2
 8002422:	3b3c      	subs	r3, #60	; 0x3c
 8002424:	fa00 f203 	lsl.w	r2, r0, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	60da      	str	r2, [r3, #12]
 8002430:	e01b      	b.n	800246a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4613      	mov	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4413      	add	r3, r2
 8002442:	3b5a      	subs	r3, #90	; 0x5a
 8002444:	2207      	movs	r2, #7
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	4019      	ands	r1, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6898      	ldr	r0, [r3, #8]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4613      	mov	r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	4413      	add	r3, r2
 800245c:	3b5a      	subs	r3, #90	; 0x5a
 800245e:	fa00 f203 	lsl.w	r2, r0, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b10      	cmp	r3, #16
 8002470:	d003      	beq.n	800247a <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002476:	2b11      	cmp	r3, #17
 8002478:	d121      	bne.n	80024be <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800247a:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <HAL_ADC_ConfigChannel+0x2cc>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d11b      	bne.n	80024be <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002486:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <HAL_ADC_ConfigChannel+0x2cc>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <HAL_ADC_ConfigChannel+0x2cc>)
 800248c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002490:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b10      	cmp	r3, #16
 8002498:	d111      	bne.n	80024be <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800249a:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_ADC_ConfigChannel+0x2d0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a0f      	ldr	r2, [pc, #60]	; (80024dc <HAL_ADC_ConfigChannel+0x2d4>)
 80024a0:	fba2 2303 	umull	r2, r3, r2, r3
 80024a4:	0c9a      	lsrs	r2, r3, #18
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80024b0:	e002      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	3b01      	subs	r3, #1
 80024b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f9      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40012700 	.word	0x40012700
 80024d8:	20000000 	.word	0x20000000
 80024dc:	431bde83 	.word	0x431bde83

080024e0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fa:	2b40      	cmp	r3, #64	; 0x40
 80024fc:	d043      	beq.n	8002586 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0201 	orr.w	r2, r2, #1
 800250c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <ADC_Enable+0xb0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a20      	ldr	r2, [pc, #128]	; (8002594 <ADC_Enable+0xb4>)
 8002514:	fba2 2303 	umull	r2, r3, r2, r3
 8002518:	0c9a      	lsrs	r2, r3, #18
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002522:	e002      	b.n	800252a <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	3b01      	subs	r3, #1
 8002528:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f9      	bne.n	8002524 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8002530:	f7ff fbd0 	bl	8001cd4 <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002536:	e01f      	b.n	8002578 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002538:	f7ff fbcc 	bl	8001cd4 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d918      	bls.n	8002578 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002550:	2b40      	cmp	r3, #64	; 0x40
 8002552:	d011      	beq.n	8002578 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002558:	f043 0210 	orr.w	r2, r3, #16
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002564:	f043 0201 	orr.w	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e007      	b.n	8002588 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002582:	2b40      	cmp	r3, #64	; 0x40
 8002584:	d1d8      	bne.n	8002538 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20000000 	.word	0x20000000
 8002594:	431bde83 	.word	0x431bde83

08002598 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ae:	2b40      	cmp	r3, #64	; 0x40
 80025b0:	d12e      	bne.n	8002610 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0201 	bic.w	r2, r2, #1
 80025c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025c2:	f7ff fb87 	bl	8001cd4 <HAL_GetTick>
 80025c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025c8:	e01b      	b.n	8002602 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 80025ca:	f7ff fb83 	bl	8001cd4 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d914      	bls.n	8002602 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e2:	2b40      	cmp	r3, #64	; 0x40
 80025e4:	d10d      	bne.n	8002602 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ea:	f043 0210 	orr.w	r2, r3, #16
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f6:	f043 0201 	orr.w	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e007      	b.n	8002612 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260c:	2b40      	cmp	r3, #64	; 0x40
 800260e:	d0dc      	beq.n	80025ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <__NVIC_SetPriorityGrouping+0x44>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002638:	4013      	ands	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800264c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800264e:	4a04      	ldr	r2, [pc, #16]	; (8002660 <__NVIC_SetPriorityGrouping+0x44>)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	60d3      	str	r3, [r2, #12]
}
 8002654:	bf00      	nop
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002668:	4b04      	ldr	r3, [pc, #16]	; (800267c <__NVIC_GetPriorityGrouping+0x18>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	0a1b      	lsrs	r3, r3, #8
 800266e:	f003 0307 	and.w	r3, r3, #7
}
 8002672:	4618      	mov	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	2b00      	cmp	r3, #0
 8002692:	db0a      	blt.n	80026aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	490c      	ldr	r1, [pc, #48]	; (80026cc <__NVIC_SetPriority+0x4c>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a8:	e00a      	b.n	80026c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4908      	ldr	r1, [pc, #32]	; (80026d0 <__NVIC_SetPriority+0x50>)
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3b04      	subs	r3, #4
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	440b      	add	r3, r1
 80026be:	761a      	strb	r2, [r3, #24]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000e100 	.word	0xe000e100
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	; 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f1c3 0307 	rsb	r3, r3, #7
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	bf28      	it	cs
 80026f2:	2304      	movcs	r3, #4
 80026f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d902      	bls.n	8002704 <NVIC_EncodePriority+0x30>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3b03      	subs	r3, #3
 8002702:	e000      	b.n	8002706 <NVIC_EncodePriority+0x32>
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	f04f 32ff 	mov.w	r2, #4294967295
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	401a      	ands	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800271c:	f04f 31ff 	mov.w	r1, #4294967295
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	43d9      	mvns	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	4313      	orrs	r3, r2
         );
}
 800272e:	4618      	mov	r0, r3
 8002730:	3724      	adds	r7, #36	; 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3b01      	subs	r3, #1
 8002744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002748:	d301      	bcc.n	800274e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800274a:	2301      	movs	r3, #1
 800274c:	e00f      	b.n	800276e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800274e:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <SysTick_Config+0x40>)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002756:	210f      	movs	r1, #15
 8002758:	f04f 30ff 	mov.w	r0, #4294967295
 800275c:	f7ff ff90 	bl	8002680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <SysTick_Config+0x40>)
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002766:	4b04      	ldr	r3, [pc, #16]	; (8002778 <SysTick_Config+0x40>)
 8002768:	2207      	movs	r2, #7
 800276a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	e000e010 	.word	0xe000e010

0800277c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff ff49 	bl	800261c <__NVIC_SetPriorityGrouping>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b086      	sub	sp, #24
 8002796:	af00      	add	r7, sp, #0
 8002798:	4603      	mov	r3, r0
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
 800279e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027a4:	f7ff ff5e 	bl	8002664 <__NVIC_GetPriorityGrouping>
 80027a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	6978      	ldr	r0, [r7, #20]
 80027b0:	f7ff ff90 	bl	80026d4 <NVIC_EncodePriority>
 80027b4:	4602      	mov	r2, r0
 80027b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff ff5f 	bl	8002680 <__NVIC_SetPriority>
}
 80027c2:	bf00      	nop
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff ffb0 	bl	8002738 <SysTick_Config>
 80027d8:	4603      	mov	r3, r0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80027fa:	e160      	b.n	8002abe <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	2101      	movs	r1, #1
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	4013      	ands	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 8152 	beq.w	8002ab8 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b01      	cmp	r3, #1
 800281e:	d005      	beq.n	800282c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002828:	2b02      	cmp	r3, #2
 800282a:	d130      	bne.n	800288e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	2203      	movs	r2, #3
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4013      	ands	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002862:	2201      	movs	r2, #1
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	091b      	lsrs	r3, r3, #4
 8002878:	f003 0201 	and.w	r2, r3, #1
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b03      	cmp	r3, #3
 8002898:	d017      	beq.n	80028ca <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	2203      	movs	r2, #3
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d123      	bne.n	800291e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	08da      	lsrs	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3208      	adds	r2, #8
 80028de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	220f      	movs	r2, #15
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	08da      	lsrs	r2, r3, #3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3208      	adds	r2, #8
 8002918:	6939      	ldr	r1, [r7, #16]
 800291a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	2203      	movs	r2, #3
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 0203 	and.w	r2, r3, #3
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 80ac 	beq.w	8002ab8 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002960:	4b5e      	ldr	r3, [pc, #376]	; (8002adc <HAL_GPIO_Init+0x2f8>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4a5d      	ldr	r2, [pc, #372]	; (8002adc <HAL_GPIO_Init+0x2f8>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6213      	str	r3, [r2, #32]
 800296c:	4b5b      	ldr	r3, [pc, #364]	; (8002adc <HAL_GPIO_Init+0x2f8>)
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002978:	4a59      	ldr	r2, [pc, #356]	; (8002ae0 <HAL_GPIO_Init+0x2fc>)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	3302      	adds	r3, #2
 8002980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002984:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	220f      	movs	r2, #15
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4013      	ands	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a51      	ldr	r2, [pc, #324]	; (8002ae4 <HAL_GPIO_Init+0x300>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d025      	beq.n	80029f0 <HAL_GPIO_Init+0x20c>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a50      	ldr	r2, [pc, #320]	; (8002ae8 <HAL_GPIO_Init+0x304>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d01f      	beq.n	80029ec <HAL_GPIO_Init+0x208>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a4f      	ldr	r2, [pc, #316]	; (8002aec <HAL_GPIO_Init+0x308>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d019      	beq.n	80029e8 <HAL_GPIO_Init+0x204>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a4e      	ldr	r2, [pc, #312]	; (8002af0 <HAL_GPIO_Init+0x30c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d013      	beq.n	80029e4 <HAL_GPIO_Init+0x200>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a4d      	ldr	r2, [pc, #308]	; (8002af4 <HAL_GPIO_Init+0x310>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00d      	beq.n	80029e0 <HAL_GPIO_Init+0x1fc>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a4c      	ldr	r2, [pc, #304]	; (8002af8 <HAL_GPIO_Init+0x314>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d007      	beq.n	80029dc <HAL_GPIO_Init+0x1f8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a4b      	ldr	r2, [pc, #300]	; (8002afc <HAL_GPIO_Init+0x318>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d101      	bne.n	80029d8 <HAL_GPIO_Init+0x1f4>
 80029d4:	2306      	movs	r3, #6
 80029d6:	e00c      	b.n	80029f2 <HAL_GPIO_Init+0x20e>
 80029d8:	2307      	movs	r3, #7
 80029da:	e00a      	b.n	80029f2 <HAL_GPIO_Init+0x20e>
 80029dc:	2305      	movs	r3, #5
 80029de:	e008      	b.n	80029f2 <HAL_GPIO_Init+0x20e>
 80029e0:	2304      	movs	r3, #4
 80029e2:	e006      	b.n	80029f2 <HAL_GPIO_Init+0x20e>
 80029e4:	2303      	movs	r3, #3
 80029e6:	e004      	b.n	80029f2 <HAL_GPIO_Init+0x20e>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e002      	b.n	80029f2 <HAL_GPIO_Init+0x20e>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <HAL_GPIO_Init+0x20e>
 80029f0:	2300      	movs	r3, #0
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	f002 0203 	and.w	r2, r2, #3
 80029f8:	0092      	lsls	r2, r2, #2
 80029fa:	4093      	lsls	r3, r2
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a02:	4937      	ldr	r1, [pc, #220]	; (8002ae0 <HAL_GPIO_Init+0x2fc>)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	3302      	adds	r3, #2
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a10:	4b3b      	ldr	r3, [pc, #236]	; (8002b00 <HAL_GPIO_Init+0x31c>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a34:	4a32      	ldr	r2, [pc, #200]	; (8002b00 <HAL_GPIO_Init+0x31c>)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a3a:	4b31      	ldr	r3, [pc, #196]	; (8002b00 <HAL_GPIO_Init+0x31c>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a5e:	4a28      	ldr	r2, [pc, #160]	; (8002b00 <HAL_GPIO_Init+0x31c>)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a64:	4b26      	ldr	r3, [pc, #152]	; (8002b00 <HAL_GPIO_Init+0x31c>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a88:	4a1d      	ldr	r2, [pc, #116]	; (8002b00 <HAL_GPIO_Init+0x31c>)
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a8e:	4b1c      	ldr	r3, [pc, #112]	; (8002b00 <HAL_GPIO_Init+0x31c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ab2:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <HAL_GPIO_Init+0x31c>)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	3301      	adds	r3, #1
 8002abc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f47f ae97 	bne.w	80027fc <HAL_GPIO_Init+0x18>
  }
}
 8002ace:	bf00      	nop
 8002ad0:	bf00      	nop
 8002ad2:	371c      	adds	r7, #28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40010000 	.word	0x40010000
 8002ae4:	40020000 	.word	0x40020000
 8002ae8:	40020400 	.word	0x40020400
 8002aec:	40020800 	.word	0x40020800
 8002af0:	40020c00 	.word	0x40020c00
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40021400 	.word	0x40021400
 8002afc:	40021800 	.word	0x40021800
 8002b00:	40010400 	.word	0x40010400

08002b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]
 8002b10:	4613      	mov	r3, r2
 8002b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b14:	787b      	ldrb	r3, [r7, #1]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002b20:	e003      	b.n	8002b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002b22:	887b      	ldrh	r3, [r7, #2]
 8002b24:	041a      	lsls	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	619a      	str	r2, [r3, #24]
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e31d      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b46:	4b94      	ldr	r3, [pc, #592]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b50:	4b91      	ldr	r3, [pc, #580]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b58:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d07b      	beq.n	8002c5e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d006      	beq.n	8002b7a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2b0c      	cmp	r3, #12
 8002b70:	d10f      	bne.n	8002b92 <HAL_RCC_OscConfig+0x5e>
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b78:	d10b      	bne.n	8002b92 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7a:	4b87      	ldr	r3, [pc, #540]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d06a      	beq.n	8002c5c <HAL_RCC_OscConfig+0x128>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d166      	bne.n	8002c5c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e2f7      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d106      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x74>
 8002b9a:	4b7f      	ldr	r3, [pc, #508]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a7e      	ldr	r2, [pc, #504]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e02d      	b.n	8002c04 <HAL_RCC_OscConfig+0xd0>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10c      	bne.n	8002bca <HAL_RCC_OscConfig+0x96>
 8002bb0:	4b79      	ldr	r3, [pc, #484]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a78      	ldr	r2, [pc, #480]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	4b76      	ldr	r3, [pc, #472]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a75      	ldr	r2, [pc, #468]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	e01c      	b.n	8002c04 <HAL_RCC_OscConfig+0xd0>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b05      	cmp	r3, #5
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0xb8>
 8002bd2:	4b71      	ldr	r3, [pc, #452]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a70      	ldr	r2, [pc, #448]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b6e      	ldr	r3, [pc, #440]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a6d      	ldr	r2, [pc, #436]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e00b      	b.n	8002c04 <HAL_RCC_OscConfig+0xd0>
 8002bec:	4b6a      	ldr	r3, [pc, #424]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a69      	ldr	r2, [pc, #420]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	4b67      	ldr	r3, [pc, #412]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a66      	ldr	r2, [pc, #408]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d013      	beq.n	8002c34 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7ff f862 	bl	8001cd4 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c14:	f7ff f85e 	bl	8001cd4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e2ad      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c26:	4b5c      	ldr	r3, [pc, #368]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0xe0>
 8002c32:	e014      	b.n	8002c5e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7ff f84e 	bl	8001cd4 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c3c:	f7ff f84a 	bl	8001cd4 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	; 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e299      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c4e:	4b52      	ldr	r3, [pc, #328]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x108>
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d05a      	beq.n	8002d20 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	2b0c      	cmp	r3, #12
 8002c74:	d119      	bne.n	8002caa <HAL_RCC_OscConfig+0x176>
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d116      	bne.n	8002caa <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7c:	4b46      	ldr	r3, [pc, #280]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_RCC_OscConfig+0x160>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e276      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c94:	4b40      	ldr	r3, [pc, #256]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	021b      	lsls	r3, r3, #8
 8002ca2:	493d      	ldr	r1, [pc, #244]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca8:	e03a      	b.n	8002d20 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d020      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb2:	4b3a      	ldr	r3, [pc, #232]	; (8002d9c <HAL_RCC_OscConfig+0x268>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7ff f80c 	bl	8001cd4 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cc0:	f7ff f808 	bl	8001cd4 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e257      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cd2:	4b31      	ldr	r3, [pc, #196]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cde:	4b2e      	ldr	r3, [pc, #184]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	492a      	ldr	r1, [pc, #168]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]
 8002cf2:	e015      	b.n	8002d20 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf4:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <HAL_RCC_OscConfig+0x268>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfa:	f7fe ffeb 	bl	8001cd4 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d02:	f7fe ffe7 	bl	8001cd4 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e236      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d14:	4b20      	ldr	r3, [pc, #128]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f0      	bne.n	8002d02 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80b8 	beq.w	8002e9e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d170      	bne.n	8002e16 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d34:	4b18      	ldr	r3, [pc, #96]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_OscConfig+0x218>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e21a      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1a      	ldr	r2, [r3, #32]
 8002d50:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d921      	bls.n	8002da0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 fc7d 	bl	8003660 <RCC_SetFlashLatencyFromMSIRange>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e208      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d70:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	4906      	ldr	r1, [pc, #24]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d82:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	061b      	lsls	r3, r3, #24
 8002d90:	4901      	ldr	r1, [pc, #4]	; (8002d98 <HAL_RCC_OscConfig+0x264>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	604b      	str	r3, [r1, #4]
 8002d96:	e020      	b.n	8002dda <HAL_RCC_OscConfig+0x2a6>
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002da0:	4b99      	ldr	r3, [pc, #612]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	4996      	ldr	r1, [pc, #600]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002db2:	4b95      	ldr	r3, [pc, #596]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	061b      	lsls	r3, r3, #24
 8002dc0:	4991      	ldr	r1, [pc, #580]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fc48 	bl	8003660 <RCC_SetFlashLatencyFromMSIRange>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e1d3      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	0b5b      	lsrs	r3, r3, #13
 8002de0:	3301      	adds	r3, #1
 8002de2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002dea:	4a87      	ldr	r2, [pc, #540]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002dec:	6892      	ldr	r2, [r2, #8]
 8002dee:	0912      	lsrs	r2, r2, #4
 8002df0:	f002 020f 	and.w	r2, r2, #15
 8002df4:	4985      	ldr	r1, [pc, #532]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002df6:	5c8a      	ldrb	r2, [r1, r2]
 8002df8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002dfa:	4a85      	ldr	r2, [pc, #532]	; (8003010 <HAL_RCC_OscConfig+0x4dc>)
 8002dfc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dfe:	4b85      	ldr	r3, [pc, #532]	; (8003014 <HAL_RCC_OscConfig+0x4e0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe ff1a 	bl	8001c3c <HAL_InitTick>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d045      	beq.n	8002e9e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	e1b5      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d029      	beq.n	8002e72 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e1e:	4b7e      	ldr	r3, [pc, #504]	; (8003018 <HAL_RCC_OscConfig+0x4e4>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fe ff56 	bl	8001cd4 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e2c:	f7fe ff52 	bl	8001cd4 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e1a1      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e3e:	4b72      	ldr	r3, [pc, #456]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e4a:	4b6f      	ldr	r3, [pc, #444]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	496c      	ldr	r1, [pc, #432]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e5c:	4b6a      	ldr	r3, [pc, #424]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	061b      	lsls	r3, r3, #24
 8002e6a:	4967      	ldr	r1, [pc, #412]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]
 8002e70:	e015      	b.n	8002e9e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e72:	4b69      	ldr	r3, [pc, #420]	; (8003018 <HAL_RCC_OscConfig+0x4e4>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e78:	f7fe ff2c 	bl	8001cd4 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e80:	f7fe ff28 	bl	8001cd4 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e177      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e92:	4b5d      	ldr	r3, [pc, #372]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d030      	beq.n	8002f0c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d016      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb2:	4b5a      	ldr	r3, [pc, #360]	; (800301c <HAL_RCC_OscConfig+0x4e8>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb8:	f7fe ff0c 	bl	8001cd4 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec0:	f7fe ff08 	bl	8001cd4 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e157      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ed2:	4b4d      	ldr	r3, [pc, #308]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x38c>
 8002ede:	e015      	b.n	8002f0c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee0:	4b4e      	ldr	r3, [pc, #312]	; (800301c <HAL_RCC_OscConfig+0x4e8>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee6:	f7fe fef5 	bl	8001cd4 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eee:	f7fe fef1 	bl	8001cd4 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e140      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f00:	4b41      	ldr	r3, [pc, #260]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1f0      	bne.n	8002eee <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 80b5 	beq.w	8003084 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1e:	4b3a      	ldr	r3, [pc, #232]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10d      	bne.n	8002f46 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f2a:	4b37      	ldr	r3, [pc, #220]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	4a36      	ldr	r2, [pc, #216]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f34:	6253      	str	r3, [r2, #36]	; 0x24
 8002f36:	4b34      	ldr	r3, [pc, #208]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f42:	2301      	movs	r3, #1
 8002f44:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f46:	4b36      	ldr	r3, [pc, #216]	; (8003020 <HAL_RCC_OscConfig+0x4ec>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d118      	bne.n	8002f84 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f52:	4b33      	ldr	r3, [pc, #204]	; (8003020 <HAL_RCC_OscConfig+0x4ec>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a32      	ldr	r2, [pc, #200]	; (8003020 <HAL_RCC_OscConfig+0x4ec>)
 8002f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5e:	f7fe feb9 	bl	8001cd4 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f66:	f7fe feb5 	bl	8001cd4 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b64      	cmp	r3, #100	; 0x64
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e104      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f78:	4b29      	ldr	r3, [pc, #164]	; (8003020 <HAL_RCC_OscConfig+0x4ec>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d106      	bne.n	8002f9a <HAL_RCC_OscConfig+0x466>
 8002f8c:	4b1e      	ldr	r3, [pc, #120]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f90:	4a1d      	ldr	r2, [pc, #116]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f96:	6353      	str	r3, [r2, #52]	; 0x34
 8002f98:	e02d      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4c2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x488>
 8002fa2:	4b19      	ldr	r3, [pc, #100]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa6:	4a18      	ldr	r2, [pc, #96]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fac:	6353      	str	r3, [r2, #52]	; 0x34
 8002fae:	4b16      	ldr	r3, [pc, #88]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb2:	4a15      	ldr	r2, [pc, #84]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002fb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fb8:	6353      	str	r3, [r2, #52]	; 0x34
 8002fba:	e01c      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4c2>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b05      	cmp	r3, #5
 8002fc2:	d10c      	bne.n	8002fde <HAL_RCC_OscConfig+0x4aa>
 8002fc4:	4b10      	ldr	r3, [pc, #64]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc8:	4a0f      	ldr	r2, [pc, #60]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002fca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fce:	6353      	str	r3, [r2, #52]	; 0x34
 8002fd0:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd4:	4a0c      	ldr	r2, [pc, #48]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fda:	6353      	str	r3, [r2, #52]	; 0x34
 8002fdc:	e00b      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4c2>
 8002fde:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe2:	4a09      	ldr	r2, [pc, #36]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fe8:	6353      	str	r3, [r2, #52]	; 0x34
 8002fea:	4b07      	ldr	r3, [pc, #28]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fee:	4a06      	ldr	r2, [pc, #24]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002ff0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ff4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d024      	beq.n	8003048 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffe:	f7fe fe69 	bl	8001cd4 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003004:	e019      	b.n	800303a <HAL_RCC_OscConfig+0x506>
 8003006:	bf00      	nop
 8003008:	40023800 	.word	0x40023800
 800300c:	080068ec 	.word	0x080068ec
 8003010:	20000000 	.word	0x20000000
 8003014:	20000004 	.word	0x20000004
 8003018:	42470020 	.word	0x42470020
 800301c:	42470680 	.word	0x42470680
 8003020:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003024:	f7fe fe56 	bl	8001cd4 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e0a3      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800303a:	4b54      	ldr	r3, [pc, #336]	; (800318c <HAL_RCC_OscConfig+0x658>)
 800303c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0ee      	beq.n	8003024 <HAL_RCC_OscConfig+0x4f0>
 8003046:	e014      	b.n	8003072 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003048:	f7fe fe44 	bl	8001cd4 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800304e:	e00a      	b.n	8003066 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003050:	f7fe fe40 	bl	8001cd4 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	; 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e08d      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003066:	4b49      	ldr	r3, [pc, #292]	; (800318c <HAL_RCC_OscConfig+0x658>)
 8003068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1ee      	bne.n	8003050 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003072:	7ffb      	ldrb	r3, [r7, #31]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d105      	bne.n	8003084 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003078:	4b44      	ldr	r3, [pc, #272]	; (800318c <HAL_RCC_OscConfig+0x658>)
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	4a43      	ldr	r2, [pc, #268]	; (800318c <HAL_RCC_OscConfig+0x658>)
 800307e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003082:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	2b00      	cmp	r3, #0
 800308a:	d079      	beq.n	8003180 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	2b0c      	cmp	r3, #12
 8003090:	d056      	beq.n	8003140 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	2b02      	cmp	r3, #2
 8003098:	d13b      	bne.n	8003112 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309a:	4b3d      	ldr	r3, [pc, #244]	; (8003190 <HAL_RCC_OscConfig+0x65c>)
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7fe fe18 	bl	8001cd4 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a8:	f7fe fe14 	bl	8001cd4 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e063      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030ba:	4b34      	ldr	r3, [pc, #208]	; (800318c <HAL_RCC_OscConfig+0x658>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030c6:	4b31      	ldr	r3, [pc, #196]	; (800318c <HAL_RCC_OscConfig+0x658>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	4319      	orrs	r1, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	430b      	orrs	r3, r1
 80030de:	492b      	ldr	r1, [pc, #172]	; (800318c <HAL_RCC_OscConfig+0x658>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e4:	4b2a      	ldr	r3, [pc, #168]	; (8003190 <HAL_RCC_OscConfig+0x65c>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ea:	f7fe fdf3 	bl	8001cd4 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f2:	f7fe fdef 	bl	8001cd4 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e03e      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003104:	4b21      	ldr	r3, [pc, #132]	; (800318c <HAL_RCC_OscConfig+0x658>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0f0      	beq.n	80030f2 <HAL_RCC_OscConfig+0x5be>
 8003110:	e036      	b.n	8003180 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003112:	4b1f      	ldr	r3, [pc, #124]	; (8003190 <HAL_RCC_OscConfig+0x65c>)
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7fe fddc 	bl	8001cd4 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003120:	f7fe fdd8 	bl	8001cd4 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e027      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003132:	4b16      	ldr	r3, [pc, #88]	; (800318c <HAL_RCC_OscConfig+0x658>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x5ec>
 800313e:	e01f      	b.n	8003180 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e01a      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800314c:	4b0f      	ldr	r3, [pc, #60]	; (800318c <HAL_RCC_OscConfig+0x658>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	429a      	cmp	r2, r3
 800315e:	d10d      	bne.n	800317c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316a:	429a      	cmp	r2, r3
 800316c:	d106      	bne.n	800317c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3720      	adds	r7, #32
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	42470060 	.word	0x42470060

08003194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e11a      	b.n	80033de <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031a8:	4b8f      	ldr	r3, [pc, #572]	; (80033e8 <HAL_RCC_ClockConfig+0x254>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d919      	bls.n	80031ea <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d105      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x34>
 80031bc:	4b8a      	ldr	r3, [pc, #552]	; (80033e8 <HAL_RCC_ClockConfig+0x254>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a89      	ldr	r2, [pc, #548]	; (80033e8 <HAL_RCC_ClockConfig+0x254>)
 80031c2:	f043 0304 	orr.w	r3, r3, #4
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	4b87      	ldr	r3, [pc, #540]	; (80033e8 <HAL_RCC_ClockConfig+0x254>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f023 0201 	bic.w	r2, r3, #1
 80031d0:	4985      	ldr	r1, [pc, #532]	; (80033e8 <HAL_RCC_ClockConfig+0x254>)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d8:	4b83      	ldr	r3, [pc, #524]	; (80033e8 <HAL_RCC_ClockConfig+0x254>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d001      	beq.n	80031ea <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e0f9      	b.n	80033de <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d008      	beq.n	8003208 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f6:	4b7d      	ldr	r3, [pc, #500]	; (80033ec <HAL_RCC_ClockConfig+0x258>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	497a      	ldr	r1, [pc, #488]	; (80033ec <HAL_RCC_ClockConfig+0x258>)
 8003204:	4313      	orrs	r3, r2
 8003206:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 808e 	beq.w	8003332 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d107      	bne.n	800322e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800321e:	4b73      	ldr	r3, [pc, #460]	; (80033ec <HAL_RCC_ClockConfig+0x258>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d121      	bne.n	800326e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e0d7      	b.n	80033de <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d107      	bne.n	8003246 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003236:	4b6d      	ldr	r3, [pc, #436]	; (80033ec <HAL_RCC_ClockConfig+0x258>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d115      	bne.n	800326e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e0cb      	b.n	80033de <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d107      	bne.n	800325e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800324e:	4b67      	ldr	r3, [pc, #412]	; (80033ec <HAL_RCC_ClockConfig+0x258>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e0bf      	b.n	80033de <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800325e:	4b63      	ldr	r3, [pc, #396]	; (80033ec <HAL_RCC_ClockConfig+0x258>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e0b7      	b.n	80033de <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800326e:	4b5f      	ldr	r3, [pc, #380]	; (80033ec <HAL_RCC_ClockConfig+0x258>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f023 0203 	bic.w	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	495c      	ldr	r1, [pc, #368]	; (80033ec <HAL_RCC_ClockConfig+0x258>)
 800327c:	4313      	orrs	r3, r2
 800327e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003280:	f7fe fd28 	bl	8001cd4 <HAL_GetTick>
 8003284:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d112      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800328e:	e00a      	b.n	80032a6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003290:	f7fe fd20 	bl	8001cd4 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	f241 3288 	movw	r2, #5000	; 0x1388
 800329e:	4293      	cmp	r3, r2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e09b      	b.n	80033de <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032a6:	4b51      	ldr	r3, [pc, #324]	; (80033ec <HAL_RCC_ClockConfig+0x258>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d1ee      	bne.n	8003290 <HAL_RCC_ClockConfig+0xfc>
 80032b2:	e03e      	b.n	8003332 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d112      	bne.n	80032e2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032be:	f7fe fd09 	bl	8001cd4 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e084      	b.n	80033de <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032d4:	4b45      	ldr	r3, [pc, #276]	; (80033ec <HAL_RCC_ClockConfig+0x258>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b0c      	cmp	r3, #12
 80032de:	d1ee      	bne.n	80032be <HAL_RCC_ClockConfig+0x12a>
 80032e0:	e027      	b.n	8003332 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d11d      	bne.n	8003326 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032ea:	e00a      	b.n	8003302 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ec:	f7fe fcf2 	bl	8001cd4 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e06d      	b.n	80033de <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003302:	4b3a      	ldr	r3, [pc, #232]	; (80033ec <HAL_RCC_ClockConfig+0x258>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b04      	cmp	r3, #4
 800330c:	d1ee      	bne.n	80032ec <HAL_RCC_ClockConfig+0x158>
 800330e:	e010      	b.n	8003332 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003310:	f7fe fce0 	bl	8001cd4 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f241 3288 	movw	r2, #5000	; 0x1388
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e05b      	b.n	80033de <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003326:	4b31      	ldr	r3, [pc, #196]	; (80033ec <HAL_RCC_ClockConfig+0x258>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1ee      	bne.n	8003310 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003332:	4b2d      	ldr	r3, [pc, #180]	; (80033e8 <HAL_RCC_ClockConfig+0x254>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d219      	bcs.n	8003374 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d105      	bne.n	8003352 <HAL_RCC_ClockConfig+0x1be>
 8003346:	4b28      	ldr	r3, [pc, #160]	; (80033e8 <HAL_RCC_ClockConfig+0x254>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a27      	ldr	r2, [pc, #156]	; (80033e8 <HAL_RCC_ClockConfig+0x254>)
 800334c:	f043 0304 	orr.w	r3, r3, #4
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	4b25      	ldr	r3, [pc, #148]	; (80033e8 <HAL_RCC_ClockConfig+0x254>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 0201 	bic.w	r2, r3, #1
 800335a:	4923      	ldr	r1, [pc, #140]	; (80033e8 <HAL_RCC_ClockConfig+0x254>)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003362:	4b21      	ldr	r3, [pc, #132]	; (80033e8 <HAL_RCC_ClockConfig+0x254>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d001      	beq.n	8003374 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e034      	b.n	80033de <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003380:	4b1a      	ldr	r3, [pc, #104]	; (80033ec <HAL_RCC_ClockConfig+0x258>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	4917      	ldr	r1, [pc, #92]	; (80033ec <HAL_RCC_ClockConfig+0x258>)
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d009      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800339e:	4b13      	ldr	r3, [pc, #76]	; (80033ec <HAL_RCC_ClockConfig+0x258>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	490f      	ldr	r1, [pc, #60]	; (80033ec <HAL_RCC_ClockConfig+0x258>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033b2:	f000 f823 	bl	80033fc <HAL_RCC_GetSysClockFreq>
 80033b6:	4602      	mov	r2, r0
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <HAL_RCC_ClockConfig+0x258>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	490b      	ldr	r1, [pc, #44]	; (80033f0 <HAL_RCC_ClockConfig+0x25c>)
 80033c4:	5ccb      	ldrb	r3, [r1, r3]
 80033c6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ca:	4a0a      	ldr	r2, [pc, #40]	; (80033f4 <HAL_RCC_ClockConfig+0x260>)
 80033cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033ce:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <HAL_RCC_ClockConfig+0x264>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe fc32 	bl	8001c3c <HAL_InitTick>
 80033d8:	4603      	mov	r3, r0
 80033da:	72fb      	strb	r3, [r7, #11]

  return status;
 80033dc:	7afb      	ldrb	r3, [r7, #11]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40023c00 	.word	0x40023c00
 80033ec:	40023800 	.word	0x40023800
 80033f0:	080068ec 	.word	0x080068ec
 80033f4:	20000000 	.word	0x20000000
 80033f8:	20000004 	.word	0x20000004

080033fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003400:	b092      	sub	sp, #72	; 0x48
 8003402:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003404:	4b79      	ldr	r3, [pc, #484]	; (80035ec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800340a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800340c:	f003 030c 	and.w	r3, r3, #12
 8003410:	2b0c      	cmp	r3, #12
 8003412:	d00d      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0x34>
 8003414:	2b0c      	cmp	r3, #12
 8003416:	f200 80d5 	bhi.w	80035c4 <HAL_RCC_GetSysClockFreq+0x1c8>
 800341a:	2b04      	cmp	r3, #4
 800341c:	d002      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0x28>
 800341e:	2b08      	cmp	r3, #8
 8003420:	d003      	beq.n	800342a <HAL_RCC_GetSysClockFreq+0x2e>
 8003422:	e0cf      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003424:	4b72      	ldr	r3, [pc, #456]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003426:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003428:	e0da      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800342a:	4b72      	ldr	r3, [pc, #456]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800342c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800342e:	e0d7      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003432:	0c9b      	lsrs	r3, r3, #18
 8003434:	f003 020f 	and.w	r2, r3, #15
 8003438:	4b6f      	ldr	r3, [pc, #444]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800343a:	5c9b      	ldrb	r3, [r3, r2]
 800343c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800343e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003440:	0d9b      	lsrs	r3, r3, #22
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	3301      	adds	r3, #1
 8003448:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800344a:	4b68      	ldr	r3, [pc, #416]	; (80035ec <HAL_RCC_GetSysClockFreq+0x1f0>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d05d      	beq.n	8003512 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003458:	2200      	movs	r2, #0
 800345a:	4618      	mov	r0, r3
 800345c:	4611      	mov	r1, r2
 800345e:	4604      	mov	r4, r0
 8003460:	460d      	mov	r5, r1
 8003462:	4622      	mov	r2, r4
 8003464:	462b      	mov	r3, r5
 8003466:	f04f 0000 	mov.w	r0, #0
 800346a:	f04f 0100 	mov.w	r1, #0
 800346e:	0159      	lsls	r1, r3, #5
 8003470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003474:	0150      	lsls	r0, r2, #5
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4621      	mov	r1, r4
 800347c:	1a51      	subs	r1, r2, r1
 800347e:	6139      	str	r1, [r7, #16]
 8003480:	4629      	mov	r1, r5
 8003482:	eb63 0301 	sbc.w	r3, r3, r1
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003494:	4659      	mov	r1, fp
 8003496:	018b      	lsls	r3, r1, #6
 8003498:	4651      	mov	r1, sl
 800349a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800349e:	4651      	mov	r1, sl
 80034a0:	018a      	lsls	r2, r1, #6
 80034a2:	46d4      	mov	ip, sl
 80034a4:	ebb2 080c 	subs.w	r8, r2, ip
 80034a8:	4659      	mov	r1, fp
 80034aa:	eb63 0901 	sbc.w	r9, r3, r1
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034c2:	4690      	mov	r8, r2
 80034c4:	4699      	mov	r9, r3
 80034c6:	4623      	mov	r3, r4
 80034c8:	eb18 0303 	adds.w	r3, r8, r3
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	462b      	mov	r3, r5
 80034d0:	eb49 0303 	adc.w	r3, r9, r3
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034e2:	4629      	mov	r1, r5
 80034e4:	024b      	lsls	r3, r1, #9
 80034e6:	4620      	mov	r0, r4
 80034e8:	4629      	mov	r1, r5
 80034ea:	4604      	mov	r4, r0
 80034ec:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80034f0:	4601      	mov	r1, r0
 80034f2:	024a      	lsls	r2, r1, #9
 80034f4:	4610      	mov	r0, r2
 80034f6:	4619      	mov	r1, r3
 80034f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034fa:	2200      	movs	r2, #0
 80034fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003500:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003504:	f7fd fd86 	bl	8001014 <__aeabi_uldivmod>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4613      	mov	r3, r2
 800350e:	647b      	str	r3, [r7, #68]	; 0x44
 8003510:	e055      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003514:	2200      	movs	r2, #0
 8003516:	623b      	str	r3, [r7, #32]
 8003518:	627a      	str	r2, [r7, #36]	; 0x24
 800351a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800351e:	4642      	mov	r2, r8
 8003520:	464b      	mov	r3, r9
 8003522:	f04f 0000 	mov.w	r0, #0
 8003526:	f04f 0100 	mov.w	r1, #0
 800352a:	0159      	lsls	r1, r3, #5
 800352c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003530:	0150      	lsls	r0, r2, #5
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	46c4      	mov	ip, r8
 8003538:	ebb2 0a0c 	subs.w	sl, r2, ip
 800353c:	4640      	mov	r0, r8
 800353e:	4649      	mov	r1, r9
 8003540:	468c      	mov	ip, r1
 8003542:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003552:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003556:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800355a:	ebb2 040a 	subs.w	r4, r2, sl
 800355e:	eb63 050b 	sbc.w	r5, r3, fp
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	00eb      	lsls	r3, r5, #3
 800356c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003570:	00e2      	lsls	r2, r4, #3
 8003572:	4614      	mov	r4, r2
 8003574:	461d      	mov	r5, r3
 8003576:	4603      	mov	r3, r0
 8003578:	18e3      	adds	r3, r4, r3
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	460b      	mov	r3, r1
 800357e:	eb45 0303 	adc.w	r3, r5, r3
 8003582:	607b      	str	r3, [r7, #4]
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003590:	4629      	mov	r1, r5
 8003592:	028b      	lsls	r3, r1, #10
 8003594:	4620      	mov	r0, r4
 8003596:	4629      	mov	r1, r5
 8003598:	4604      	mov	r4, r0
 800359a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800359e:	4601      	mov	r1, r0
 80035a0:	028a      	lsls	r2, r1, #10
 80035a2:	4610      	mov	r0, r2
 80035a4:	4619      	mov	r1, r3
 80035a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a8:	2200      	movs	r2, #0
 80035aa:	61bb      	str	r3, [r7, #24]
 80035ac:	61fa      	str	r2, [r7, #28]
 80035ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035b2:	f7fd fd2f 	bl	8001014 <__aeabi_uldivmod>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	4613      	mov	r3, r2
 80035bc:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80035be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035c0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80035c2:	e00d      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80035c4:	4b09      	ldr	r3, [pc, #36]	; (80035ec <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	0b5b      	lsrs	r3, r3, #13
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80035d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d2:	3301      	adds	r3, #1
 80035d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80035de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3748      	adds	r7, #72	; 0x48
 80035e6:	46bd      	mov	sp, r7
 80035e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ec:	40023800 	.word	0x40023800
 80035f0:	00f42400 	.word	0x00f42400
 80035f4:	007a1200 	.word	0x007a1200
 80035f8:	080068e0 	.word	0x080068e0

080035fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003600:	4b02      	ldr	r3, [pc, #8]	; (800360c <HAL_RCC_GetHCLKFreq+0x10>)
 8003602:	681b      	ldr	r3, [r3, #0]
}
 8003604:	4618      	mov	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr
 800360c:	20000000 	.word	0x20000000

08003610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003614:	f7ff fff2 	bl	80035fc <HAL_RCC_GetHCLKFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4903      	ldr	r1, [pc, #12]	; (8003634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40023800 	.word	0x40023800
 8003634:	080068fc 	.word	0x080068fc

08003638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800363c:	f7ff ffde 	bl	80035fc <HAL_RCC_GetHCLKFreq>
 8003640:	4602      	mov	r2, r0
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	0adb      	lsrs	r3, r3, #11
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	4903      	ldr	r1, [pc, #12]	; (800365c <HAL_RCC_GetPCLK2Freq+0x24>)
 800364e:	5ccb      	ldrb	r3, [r1, r3]
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40023800 	.word	0x40023800
 800365c:	080068fc 	.word	0x080068fc

08003660 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003668:	2300      	movs	r3, #0
 800366a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800366c:	4b29      	ldr	r3, [pc, #164]	; (8003714 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d12c      	bne.n	80036d2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003678:	4b26      	ldr	r3, [pc, #152]	; (8003714 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003684:	4b24      	ldr	r3, [pc, #144]	; (8003718 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	e016      	b.n	80036be <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003690:	4b20      	ldr	r3, [pc, #128]	; (8003714 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	4a1f      	ldr	r2, [pc, #124]	; (8003714 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369a:	6253      	str	r3, [r2, #36]	; 0x24
 800369c:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80036a8:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80036b0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b2:	4b18      	ldr	r3, [pc, #96]	; (8003714 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	4a17      	ldr	r2, [pc, #92]	; (8003714 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036bc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80036c4:	d105      	bne.n	80036d2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036cc:	d101      	bne.n	80036d2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80036ce:	2301      	movs	r3, #1
 80036d0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d105      	bne.n	80036e4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80036d8:	4b10      	ldr	r3, [pc, #64]	; (800371c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a0f      	ldr	r2, [pc, #60]	; (800371c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036de:	f043 0304 	orr.w	r3, r3, #4
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	4b0d      	ldr	r3, [pc, #52]	; (800371c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f023 0201 	bic.w	r2, r3, #1
 80036ec:	490b      	ldr	r1, [pc, #44]	; (800371c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d001      	beq.n	8003706 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	371c      	adds	r7, #28
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40023800 	.word	0x40023800
 8003718:	40007000 	.word	0x40007000
 800371c:	40023c00 	.word	0x40023c00

08003720 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e042      	b.n	80037b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fe f908 	bl	800195c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2224      	movs	r2, #36	; 0x24
 8003750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003762:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f91d 	bl	80039a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003778:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003788:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003798:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	; 0x28
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	4613      	mov	r3, r2
 80037ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b20      	cmp	r3, #32
 80037de:	d16d      	bne.n	80038bc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_UART_Transmit+0x2c>
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e066      	b.n	80038be <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2221      	movs	r2, #33	; 0x21
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037fe:	f7fe fa69 	bl	8001cd4 <HAL_GetTick>
 8003802:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	88fa      	ldrh	r2, [r7, #6]
 8003808:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	88fa      	ldrh	r2, [r7, #6]
 800380e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003818:	d108      	bne.n	800382c <HAL_UART_Transmit+0x6c>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d104      	bne.n	800382c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	61bb      	str	r3, [r7, #24]
 800382a:	e003      	b.n	8003834 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003830:	2300      	movs	r3, #0
 8003832:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003834:	e02a      	b.n	800388c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2200      	movs	r2, #0
 800383e:	2180      	movs	r1, #128	; 0x80
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f840 	bl	80038c6 <UART_WaitOnFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e036      	b.n	80038be <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10b      	bne.n	800386e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003864:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	3302      	adds	r3, #2
 800386a:	61bb      	str	r3, [r7, #24]
 800386c:	e007      	b.n	800387e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	781a      	ldrb	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	3301      	adds	r3, #1
 800387c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003882:	b29b      	uxth	r3, r3
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1cf      	bne.n	8003836 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2200      	movs	r2, #0
 800389e:	2140      	movs	r1, #64	; 0x40
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 f810 	bl	80038c6 <UART_WaitOnFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e006      	b.n	80038be <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e000      	b.n	80038be <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80038bc:	2302      	movs	r3, #2
  }
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3720      	adds	r7, #32
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b090      	sub	sp, #64	; 0x40
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	603b      	str	r3, [r7, #0]
 80038d2:	4613      	mov	r3, r2
 80038d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d6:	e050      	b.n	800397a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038de:	d04c      	beq.n	800397a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d007      	beq.n	80038f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80038e6:	f7fe f9f5 	bl	8001cd4 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d241      	bcs.n	800397a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	330c      	adds	r3, #12
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003900:	e853 3f00 	ldrex	r3, [r3]
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800390c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	330c      	adds	r3, #12
 8003914:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003916:	637a      	str	r2, [r7, #52]	; 0x34
 8003918:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800391c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800391e:	e841 2300 	strex	r3, r2, [r1]
 8003922:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e5      	bne.n	80038f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3314      	adds	r3, #20
 8003930:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	e853 3f00 	ldrex	r3, [r3]
 8003938:	613b      	str	r3, [r7, #16]
   return(result);
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f023 0301 	bic.w	r3, r3, #1
 8003940:	63bb      	str	r3, [r7, #56]	; 0x38
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	3314      	adds	r3, #20
 8003948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800394a:	623a      	str	r2, [r7, #32]
 800394c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394e:	69f9      	ldr	r1, [r7, #28]
 8003950:	6a3a      	ldr	r2, [r7, #32]
 8003952:	e841 2300 	strex	r3, r2, [r1]
 8003956:	61bb      	str	r3, [r7, #24]
   return(result);
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1e5      	bne.n	800392a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e00f      	b.n	800399a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4013      	ands	r3, r2
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	429a      	cmp	r2, r3
 8003988:	bf0c      	ite	eq
 800398a:	2301      	moveq	r3, #1
 800398c:	2300      	movne	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	429a      	cmp	r2, r3
 8003996:	d09f      	beq.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3740      	adds	r7, #64	; 0x40
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039e4:	f023 030c 	bic.w	r3, r3, #12
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	430b      	orrs	r3, r1
 80039f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699a      	ldr	r2, [r3, #24]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a55      	ldr	r2, [pc, #340]	; (8003b64 <UART_SetConfig+0x1c0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d103      	bne.n	8003a1a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a12:	f7ff fe11 	bl	8003638 <HAL_RCC_GetPCLK2Freq>
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	e002      	b.n	8003a20 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a1a:	f7ff fdf9 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 8003a1e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a28:	d14c      	bne.n	8003ac4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	009a      	lsls	r2, r3, #2
 8003a34:	441a      	add	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	4a49      	ldr	r2, [pc, #292]	; (8003b68 <UART_SetConfig+0x1c4>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	0119      	lsls	r1, r3, #4
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	009a      	lsls	r2, r3, #2
 8003a54:	441a      	add	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a60:	4b41      	ldr	r3, [pc, #260]	; (8003b68 <UART_SetConfig+0x1c4>)
 8003a62:	fba3 0302 	umull	r0, r3, r3, r2
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	2064      	movs	r0, #100	; 0x64
 8003a6a:	fb00 f303 	mul.w	r3, r0, r3
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	3332      	adds	r3, #50	; 0x32
 8003a74:	4a3c      	ldr	r2, [pc, #240]	; (8003b68 <UART_SetConfig+0x1c4>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a82:	4419      	add	r1, r3
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009a      	lsls	r2, r3, #2
 8003a8e:	441a      	add	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a9a:	4b33      	ldr	r3, [pc, #204]	; (8003b68 <UART_SetConfig+0x1c4>)
 8003a9c:	fba3 0302 	umull	r0, r3, r3, r2
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	2064      	movs	r0, #100	; 0x64
 8003aa4:	fb00 f303 	mul.w	r3, r0, r3
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	3332      	adds	r3, #50	; 0x32
 8003aae:	4a2e      	ldr	r2, [pc, #184]	; (8003b68 <UART_SetConfig+0x1c4>)
 8003ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab4:	095b      	lsrs	r3, r3, #5
 8003ab6:	f003 0207 	and.w	r2, r3, #7
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	440a      	add	r2, r1
 8003ac0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ac2:	e04a      	b.n	8003b5a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	009a      	lsls	r2, r3, #2
 8003ace:	441a      	add	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ada:	4a23      	ldr	r2, [pc, #140]	; (8003b68 <UART_SetConfig+0x1c4>)
 8003adc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	0119      	lsls	r1, r3, #4
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	009a      	lsls	r2, r3, #2
 8003aee:	441a      	add	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003afa:	4b1b      	ldr	r3, [pc, #108]	; (8003b68 <UART_SetConfig+0x1c4>)
 8003afc:	fba3 0302 	umull	r0, r3, r3, r2
 8003b00:	095b      	lsrs	r3, r3, #5
 8003b02:	2064      	movs	r0, #100	; 0x64
 8003b04:	fb00 f303 	mul.w	r3, r0, r3
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	3332      	adds	r3, #50	; 0x32
 8003b0e:	4a16      	ldr	r2, [pc, #88]	; (8003b68 <UART_SetConfig+0x1c4>)
 8003b10:	fba2 2303 	umull	r2, r3, r2, r3
 8003b14:	095b      	lsrs	r3, r3, #5
 8003b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b1a:	4419      	add	r1, r3
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	009a      	lsls	r2, r3, #2
 8003b26:	441a      	add	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b32:	4b0d      	ldr	r3, [pc, #52]	; (8003b68 <UART_SetConfig+0x1c4>)
 8003b34:	fba3 0302 	umull	r0, r3, r3, r2
 8003b38:	095b      	lsrs	r3, r3, #5
 8003b3a:	2064      	movs	r0, #100	; 0x64
 8003b3c:	fb00 f303 	mul.w	r3, r0, r3
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	3332      	adds	r3, #50	; 0x32
 8003b46:	4a08      	ldr	r2, [pc, #32]	; (8003b68 <UART_SetConfig+0x1c4>)
 8003b48:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4c:	095b      	lsrs	r3, r3, #5
 8003b4e:	f003 020f 	and.w	r2, r3, #15
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	440a      	add	r2, r1
 8003b58:	609a      	str	r2, [r3, #8]
}
 8003b5a:	bf00      	nop
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40013800 	.word	0x40013800
 8003b68:	51eb851f 	.word	0x51eb851f

08003b6c <__cvt>:
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b72:	461f      	mov	r7, r3
 8003b74:	bfbb      	ittet	lt
 8003b76:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003b7a:	461f      	movlt	r7, r3
 8003b7c:	2300      	movge	r3, #0
 8003b7e:	232d      	movlt	r3, #45	; 0x2d
 8003b80:	b088      	sub	sp, #32
 8003b82:	4614      	mov	r4, r2
 8003b84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003b86:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003b88:	7013      	strb	r3, [r2, #0]
 8003b8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003b8c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003b90:	f023 0820 	bic.w	r8, r3, #32
 8003b94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b98:	d005      	beq.n	8003ba6 <__cvt+0x3a>
 8003b9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003b9e:	d100      	bne.n	8003ba2 <__cvt+0x36>
 8003ba0:	3501      	adds	r5, #1
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e000      	b.n	8003ba8 <__cvt+0x3c>
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	aa07      	add	r2, sp, #28
 8003baa:	9204      	str	r2, [sp, #16]
 8003bac:	aa06      	add	r2, sp, #24
 8003bae:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003bb2:	e9cd 3500 	strd	r3, r5, [sp]
 8003bb6:	4622      	mov	r2, r4
 8003bb8:	463b      	mov	r3, r7
 8003bba:	f000 fe85 	bl	80048c8 <_dtoa_r>
 8003bbe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003bc2:	4606      	mov	r6, r0
 8003bc4:	d102      	bne.n	8003bcc <__cvt+0x60>
 8003bc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003bc8:	07db      	lsls	r3, r3, #31
 8003bca:	d522      	bpl.n	8003c12 <__cvt+0xa6>
 8003bcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003bd0:	eb06 0905 	add.w	r9, r6, r5
 8003bd4:	d110      	bne.n	8003bf8 <__cvt+0x8c>
 8003bd6:	7833      	ldrb	r3, [r6, #0]
 8003bd8:	2b30      	cmp	r3, #48	; 0x30
 8003bda:	d10a      	bne.n	8003bf2 <__cvt+0x86>
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2300      	movs	r3, #0
 8003be0:	4620      	mov	r0, r4
 8003be2:	4639      	mov	r1, r7
 8003be4:	f7fc fef8 	bl	80009d8 <__aeabi_dcmpeq>
 8003be8:	b918      	cbnz	r0, 8003bf2 <__cvt+0x86>
 8003bea:	f1c5 0501 	rsb	r5, r5, #1
 8003bee:	f8ca 5000 	str.w	r5, [sl]
 8003bf2:	f8da 3000 	ldr.w	r3, [sl]
 8003bf6:	4499      	add	r9, r3
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	4639      	mov	r1, r7
 8003c00:	f7fc feea 	bl	80009d8 <__aeabi_dcmpeq>
 8003c04:	b108      	cbz	r0, 8003c0a <__cvt+0x9e>
 8003c06:	f8cd 901c 	str.w	r9, [sp, #28]
 8003c0a:	2230      	movs	r2, #48	; 0x30
 8003c0c:	9b07      	ldr	r3, [sp, #28]
 8003c0e:	454b      	cmp	r3, r9
 8003c10:	d307      	bcc.n	8003c22 <__cvt+0xb6>
 8003c12:	4630      	mov	r0, r6
 8003c14:	9b07      	ldr	r3, [sp, #28]
 8003c16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003c18:	1b9b      	subs	r3, r3, r6
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	b008      	add	sp, #32
 8003c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c22:	1c59      	adds	r1, r3, #1
 8003c24:	9107      	str	r1, [sp, #28]
 8003c26:	701a      	strb	r2, [r3, #0]
 8003c28:	e7f0      	b.n	8003c0c <__cvt+0xa0>

08003c2a <__exponent>:
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c2e:	2900      	cmp	r1, #0
 8003c30:	f803 2b02 	strb.w	r2, [r3], #2
 8003c34:	bfb6      	itet	lt
 8003c36:	222d      	movlt	r2, #45	; 0x2d
 8003c38:	222b      	movge	r2, #43	; 0x2b
 8003c3a:	4249      	neglt	r1, r1
 8003c3c:	2909      	cmp	r1, #9
 8003c3e:	7042      	strb	r2, [r0, #1]
 8003c40:	dd2a      	ble.n	8003c98 <__exponent+0x6e>
 8003c42:	f10d 0207 	add.w	r2, sp, #7
 8003c46:	4617      	mov	r7, r2
 8003c48:	260a      	movs	r6, #10
 8003c4a:	fb91 f5f6 	sdiv	r5, r1, r6
 8003c4e:	4694      	mov	ip, r2
 8003c50:	fb06 1415 	mls	r4, r6, r5, r1
 8003c54:	3430      	adds	r4, #48	; 0x30
 8003c56:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003c5a:	460c      	mov	r4, r1
 8003c5c:	2c63      	cmp	r4, #99	; 0x63
 8003c5e:	4629      	mov	r1, r5
 8003c60:	f102 32ff 	add.w	r2, r2, #4294967295
 8003c64:	dcf1      	bgt.n	8003c4a <__exponent+0x20>
 8003c66:	3130      	adds	r1, #48	; 0x30
 8003c68:	f1ac 0402 	sub.w	r4, ip, #2
 8003c6c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003c70:	4622      	mov	r2, r4
 8003c72:	1c41      	adds	r1, r0, #1
 8003c74:	42ba      	cmp	r2, r7
 8003c76:	d30a      	bcc.n	8003c8e <__exponent+0x64>
 8003c78:	f10d 0209 	add.w	r2, sp, #9
 8003c7c:	eba2 020c 	sub.w	r2, r2, ip
 8003c80:	42bc      	cmp	r4, r7
 8003c82:	bf88      	it	hi
 8003c84:	2200      	movhi	r2, #0
 8003c86:	4413      	add	r3, r2
 8003c88:	1a18      	subs	r0, r3, r0
 8003c8a:	b003      	add	sp, #12
 8003c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c8e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003c92:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003c96:	e7ed      	b.n	8003c74 <__exponent+0x4a>
 8003c98:	2330      	movs	r3, #48	; 0x30
 8003c9a:	3130      	adds	r1, #48	; 0x30
 8003c9c:	7083      	strb	r3, [r0, #2]
 8003c9e:	70c1      	strb	r1, [r0, #3]
 8003ca0:	1d03      	adds	r3, r0, #4
 8003ca2:	e7f1      	b.n	8003c88 <__exponent+0x5e>

08003ca4 <_printf_float>:
 8003ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca8:	b091      	sub	sp, #68	; 0x44
 8003caa:	460c      	mov	r4, r1
 8003cac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003cb0:	4616      	mov	r6, r2
 8003cb2:	461f      	mov	r7, r3
 8003cb4:	4605      	mov	r5, r0
 8003cb6:	f000 fcf9 	bl	80046ac <_localeconv_r>
 8003cba:	6803      	ldr	r3, [r0, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8003cc0:	f7fc fa5e 	bl	8000180 <strlen>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	930e      	str	r3, [sp, #56]	; 0x38
 8003cc8:	f8d8 3000 	ldr.w	r3, [r8]
 8003ccc:	900a      	str	r0, [sp, #40]	; 0x28
 8003cce:	3307      	adds	r3, #7
 8003cd0:	f023 0307 	bic.w	r3, r3, #7
 8003cd4:	f103 0208 	add.w	r2, r3, #8
 8003cd8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003cdc:	f8d4 b000 	ldr.w	fp, [r4]
 8003ce0:	f8c8 2000 	str.w	r2, [r8]
 8003ce4:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003ce8:	4652      	mov	r2, sl
 8003cea:	4643      	mov	r3, r8
 8003cec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003cf0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003cf4:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cfa:	4650      	mov	r0, sl
 8003cfc:	4b9c      	ldr	r3, [pc, #624]	; (8003f70 <_printf_float+0x2cc>)
 8003cfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d00:	f7fc fe9c 	bl	8000a3c <__aeabi_dcmpun>
 8003d04:	bb70      	cbnz	r0, 8003d64 <_printf_float+0xc0>
 8003d06:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0a:	4650      	mov	r0, sl
 8003d0c:	4b98      	ldr	r3, [pc, #608]	; (8003f70 <_printf_float+0x2cc>)
 8003d0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d10:	f7fc fe76 	bl	8000a00 <__aeabi_dcmple>
 8003d14:	bb30      	cbnz	r0, 8003d64 <_printf_float+0xc0>
 8003d16:	2200      	movs	r2, #0
 8003d18:	2300      	movs	r3, #0
 8003d1a:	4650      	mov	r0, sl
 8003d1c:	4641      	mov	r1, r8
 8003d1e:	f7fc fe65 	bl	80009ec <__aeabi_dcmplt>
 8003d22:	b110      	cbz	r0, 8003d2a <_printf_float+0x86>
 8003d24:	232d      	movs	r3, #45	; 0x2d
 8003d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d2a:	4a92      	ldr	r2, [pc, #584]	; (8003f74 <_printf_float+0x2d0>)
 8003d2c:	4b92      	ldr	r3, [pc, #584]	; (8003f78 <_printf_float+0x2d4>)
 8003d2e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003d32:	bf94      	ite	ls
 8003d34:	4690      	movls	r8, r2
 8003d36:	4698      	movhi	r8, r3
 8003d38:	2303      	movs	r3, #3
 8003d3a:	f04f 0a00 	mov.w	sl, #0
 8003d3e:	6123      	str	r3, [r4, #16]
 8003d40:	f02b 0304 	bic.w	r3, fp, #4
 8003d44:	6023      	str	r3, [r4, #0]
 8003d46:	4633      	mov	r3, r6
 8003d48:	4621      	mov	r1, r4
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	9700      	str	r7, [sp, #0]
 8003d4e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003d50:	f000 f9d6 	bl	8004100 <_printf_common>
 8003d54:	3001      	adds	r0, #1
 8003d56:	f040 8090 	bne.w	8003e7a <_printf_float+0x1d6>
 8003d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5e:	b011      	add	sp, #68	; 0x44
 8003d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d64:	4652      	mov	r2, sl
 8003d66:	4643      	mov	r3, r8
 8003d68:	4650      	mov	r0, sl
 8003d6a:	4641      	mov	r1, r8
 8003d6c:	f7fc fe66 	bl	8000a3c <__aeabi_dcmpun>
 8003d70:	b148      	cbz	r0, 8003d86 <_printf_float+0xe2>
 8003d72:	f1b8 0f00 	cmp.w	r8, #0
 8003d76:	bfb8      	it	lt
 8003d78:	232d      	movlt	r3, #45	; 0x2d
 8003d7a:	4a80      	ldr	r2, [pc, #512]	; (8003f7c <_printf_float+0x2d8>)
 8003d7c:	bfb8      	it	lt
 8003d7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003d82:	4b7f      	ldr	r3, [pc, #508]	; (8003f80 <_printf_float+0x2dc>)
 8003d84:	e7d3      	b.n	8003d2e <_printf_float+0x8a>
 8003d86:	6863      	ldr	r3, [r4, #4]
 8003d88:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	d142      	bne.n	8003e16 <_printf_float+0x172>
 8003d90:	2306      	movs	r3, #6
 8003d92:	6063      	str	r3, [r4, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	9206      	str	r2, [sp, #24]
 8003d98:	aa0e      	add	r2, sp, #56	; 0x38
 8003d9a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003d9e:	aa0d      	add	r2, sp, #52	; 0x34
 8003da0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003da4:	9203      	str	r2, [sp, #12]
 8003da6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003daa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003dae:	6023      	str	r3, [r4, #0]
 8003db0:	6863      	ldr	r3, [r4, #4]
 8003db2:	4652      	mov	r2, sl
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	4628      	mov	r0, r5
 8003db8:	4643      	mov	r3, r8
 8003dba:	910b      	str	r1, [sp, #44]	; 0x2c
 8003dbc:	f7ff fed6 	bl	8003b6c <__cvt>
 8003dc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003dc2:	4680      	mov	r8, r0
 8003dc4:	2947      	cmp	r1, #71	; 0x47
 8003dc6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003dc8:	d108      	bne.n	8003ddc <_printf_float+0x138>
 8003dca:	1cc8      	adds	r0, r1, #3
 8003dcc:	db02      	blt.n	8003dd4 <_printf_float+0x130>
 8003dce:	6863      	ldr	r3, [r4, #4]
 8003dd0:	4299      	cmp	r1, r3
 8003dd2:	dd40      	ble.n	8003e56 <_printf_float+0x1b2>
 8003dd4:	f1a9 0902 	sub.w	r9, r9, #2
 8003dd8:	fa5f f989 	uxtb.w	r9, r9
 8003ddc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003de0:	d81f      	bhi.n	8003e22 <_printf_float+0x17e>
 8003de2:	464a      	mov	r2, r9
 8003de4:	3901      	subs	r1, #1
 8003de6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003dea:	910d      	str	r1, [sp, #52]	; 0x34
 8003dec:	f7ff ff1d 	bl	8003c2a <__exponent>
 8003df0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003df2:	4682      	mov	sl, r0
 8003df4:	1813      	adds	r3, r2, r0
 8003df6:	2a01      	cmp	r2, #1
 8003df8:	6123      	str	r3, [r4, #16]
 8003dfa:	dc02      	bgt.n	8003e02 <_printf_float+0x15e>
 8003dfc:	6822      	ldr	r2, [r4, #0]
 8003dfe:	07d2      	lsls	r2, r2, #31
 8003e00:	d501      	bpl.n	8003e06 <_printf_float+0x162>
 8003e02:	3301      	adds	r3, #1
 8003e04:	6123      	str	r3, [r4, #16]
 8003e06:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d09b      	beq.n	8003d46 <_printf_float+0xa2>
 8003e0e:	232d      	movs	r3, #45	; 0x2d
 8003e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e14:	e797      	b.n	8003d46 <_printf_float+0xa2>
 8003e16:	2947      	cmp	r1, #71	; 0x47
 8003e18:	d1bc      	bne.n	8003d94 <_printf_float+0xf0>
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1ba      	bne.n	8003d94 <_printf_float+0xf0>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e7b7      	b.n	8003d92 <_printf_float+0xee>
 8003e22:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003e26:	d118      	bne.n	8003e5a <_printf_float+0x1b6>
 8003e28:	2900      	cmp	r1, #0
 8003e2a:	6863      	ldr	r3, [r4, #4]
 8003e2c:	dd0b      	ble.n	8003e46 <_printf_float+0x1a2>
 8003e2e:	6121      	str	r1, [r4, #16]
 8003e30:	b913      	cbnz	r3, 8003e38 <_printf_float+0x194>
 8003e32:	6822      	ldr	r2, [r4, #0]
 8003e34:	07d0      	lsls	r0, r2, #31
 8003e36:	d502      	bpl.n	8003e3e <_printf_float+0x19a>
 8003e38:	3301      	adds	r3, #1
 8003e3a:	440b      	add	r3, r1
 8003e3c:	6123      	str	r3, [r4, #16]
 8003e3e:	f04f 0a00 	mov.w	sl, #0
 8003e42:	65a1      	str	r1, [r4, #88]	; 0x58
 8003e44:	e7df      	b.n	8003e06 <_printf_float+0x162>
 8003e46:	b913      	cbnz	r3, 8003e4e <_printf_float+0x1aa>
 8003e48:	6822      	ldr	r2, [r4, #0]
 8003e4a:	07d2      	lsls	r2, r2, #31
 8003e4c:	d501      	bpl.n	8003e52 <_printf_float+0x1ae>
 8003e4e:	3302      	adds	r3, #2
 8003e50:	e7f4      	b.n	8003e3c <_printf_float+0x198>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e7f2      	b.n	8003e3c <_printf_float+0x198>
 8003e56:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003e5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e5c:	4299      	cmp	r1, r3
 8003e5e:	db05      	blt.n	8003e6c <_printf_float+0x1c8>
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	6121      	str	r1, [r4, #16]
 8003e64:	07d8      	lsls	r0, r3, #31
 8003e66:	d5ea      	bpl.n	8003e3e <_printf_float+0x19a>
 8003e68:	1c4b      	adds	r3, r1, #1
 8003e6a:	e7e7      	b.n	8003e3c <_printf_float+0x198>
 8003e6c:	2900      	cmp	r1, #0
 8003e6e:	bfcc      	ite	gt
 8003e70:	2201      	movgt	r2, #1
 8003e72:	f1c1 0202 	rsble	r2, r1, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	e7e0      	b.n	8003e3c <_printf_float+0x198>
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	055a      	lsls	r2, r3, #21
 8003e7e:	d407      	bmi.n	8003e90 <_printf_float+0x1ec>
 8003e80:	6923      	ldr	r3, [r4, #16]
 8003e82:	4642      	mov	r2, r8
 8003e84:	4631      	mov	r1, r6
 8003e86:	4628      	mov	r0, r5
 8003e88:	47b8      	blx	r7
 8003e8a:	3001      	adds	r0, #1
 8003e8c:	d12b      	bne.n	8003ee6 <_printf_float+0x242>
 8003e8e:	e764      	b.n	8003d5a <_printf_float+0xb6>
 8003e90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003e94:	f240 80dd 	bls.w	8004052 <_printf_float+0x3ae>
 8003e98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f7fc fd9a 	bl	80009d8 <__aeabi_dcmpeq>
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	d033      	beq.n	8003f10 <_printf_float+0x26c>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	4631      	mov	r1, r6
 8003eac:	4628      	mov	r0, r5
 8003eae:	4a35      	ldr	r2, [pc, #212]	; (8003f84 <_printf_float+0x2e0>)
 8003eb0:	47b8      	blx	r7
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	f43f af51 	beq.w	8003d5a <_printf_float+0xb6>
 8003eb8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	db02      	blt.n	8003ec6 <_printf_float+0x222>
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	07d8      	lsls	r0, r3, #31
 8003ec4:	d50f      	bpl.n	8003ee6 <_printf_float+0x242>
 8003ec6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003eca:	4631      	mov	r1, r6
 8003ecc:	4628      	mov	r0, r5
 8003ece:	47b8      	blx	r7
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	f43f af42 	beq.w	8003d5a <_printf_float+0xb6>
 8003ed6:	f04f 0800 	mov.w	r8, #0
 8003eda:	f104 091a 	add.w	r9, r4, #26
 8003ede:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	4543      	cmp	r3, r8
 8003ee4:	dc09      	bgt.n	8003efa <_printf_float+0x256>
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	079b      	lsls	r3, r3, #30
 8003eea:	f100 8104 	bmi.w	80040f6 <_printf_float+0x452>
 8003eee:	68e0      	ldr	r0, [r4, #12]
 8003ef0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003ef2:	4298      	cmp	r0, r3
 8003ef4:	bfb8      	it	lt
 8003ef6:	4618      	movlt	r0, r3
 8003ef8:	e731      	b.n	8003d5e <_printf_float+0xba>
 8003efa:	2301      	movs	r3, #1
 8003efc:	464a      	mov	r2, r9
 8003efe:	4631      	mov	r1, r6
 8003f00:	4628      	mov	r0, r5
 8003f02:	47b8      	blx	r7
 8003f04:	3001      	adds	r0, #1
 8003f06:	f43f af28 	beq.w	8003d5a <_printf_float+0xb6>
 8003f0a:	f108 0801 	add.w	r8, r8, #1
 8003f0e:	e7e6      	b.n	8003ede <_printf_float+0x23a>
 8003f10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	dc38      	bgt.n	8003f88 <_printf_float+0x2e4>
 8003f16:	2301      	movs	r3, #1
 8003f18:	4631      	mov	r1, r6
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	4a19      	ldr	r2, [pc, #100]	; (8003f84 <_printf_float+0x2e0>)
 8003f1e:	47b8      	blx	r7
 8003f20:	3001      	adds	r0, #1
 8003f22:	f43f af1a 	beq.w	8003d5a <_printf_float+0xb6>
 8003f26:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	d102      	bne.n	8003f34 <_printf_float+0x290>
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	07d9      	lsls	r1, r3, #31
 8003f32:	d5d8      	bpl.n	8003ee6 <_printf_float+0x242>
 8003f34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f38:	4631      	mov	r1, r6
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	47b8      	blx	r7
 8003f3e:	3001      	adds	r0, #1
 8003f40:	f43f af0b 	beq.w	8003d5a <_printf_float+0xb6>
 8003f44:	f04f 0900 	mov.w	r9, #0
 8003f48:	f104 0a1a 	add.w	sl, r4, #26
 8003f4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f4e:	425b      	negs	r3, r3
 8003f50:	454b      	cmp	r3, r9
 8003f52:	dc01      	bgt.n	8003f58 <_printf_float+0x2b4>
 8003f54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f56:	e794      	b.n	8003e82 <_printf_float+0x1de>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	4652      	mov	r2, sl
 8003f5c:	4631      	mov	r1, r6
 8003f5e:	4628      	mov	r0, r5
 8003f60:	47b8      	blx	r7
 8003f62:	3001      	adds	r0, #1
 8003f64:	f43f aef9 	beq.w	8003d5a <_printf_float+0xb6>
 8003f68:	f109 0901 	add.w	r9, r9, #1
 8003f6c:	e7ee      	b.n	8003f4c <_printf_float+0x2a8>
 8003f6e:	bf00      	nop
 8003f70:	7fefffff 	.word	0x7fefffff
 8003f74:	08006904 	.word	0x08006904
 8003f78:	08006908 	.word	0x08006908
 8003f7c:	0800690c 	.word	0x0800690c
 8003f80:	08006910 	.word	0x08006910
 8003f84:	08006914 	.word	0x08006914
 8003f88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	bfa8      	it	ge
 8003f90:	461a      	movge	r2, r3
 8003f92:	2a00      	cmp	r2, #0
 8003f94:	4691      	mov	r9, r2
 8003f96:	dc37      	bgt.n	8004008 <_printf_float+0x364>
 8003f98:	f04f 0b00 	mov.w	fp, #0
 8003f9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fa0:	f104 021a 	add.w	r2, r4, #26
 8003fa4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003fa8:	ebaa 0309 	sub.w	r3, sl, r9
 8003fac:	455b      	cmp	r3, fp
 8003fae:	dc33      	bgt.n	8004018 <_printf_float+0x374>
 8003fb0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	db3b      	blt.n	8004030 <_printf_float+0x38c>
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	07da      	lsls	r2, r3, #31
 8003fbc:	d438      	bmi.n	8004030 <_printf_float+0x38c>
 8003fbe:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003fc2:	eba2 0903 	sub.w	r9, r2, r3
 8003fc6:	eba2 020a 	sub.w	r2, r2, sl
 8003fca:	4591      	cmp	r9, r2
 8003fcc:	bfa8      	it	ge
 8003fce:	4691      	movge	r9, r2
 8003fd0:	f1b9 0f00 	cmp.w	r9, #0
 8003fd4:	dc34      	bgt.n	8004040 <_printf_float+0x39c>
 8003fd6:	f04f 0800 	mov.w	r8, #0
 8003fda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fde:	f104 0a1a 	add.w	sl, r4, #26
 8003fe2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003fe6:	1a9b      	subs	r3, r3, r2
 8003fe8:	eba3 0309 	sub.w	r3, r3, r9
 8003fec:	4543      	cmp	r3, r8
 8003fee:	f77f af7a 	ble.w	8003ee6 <_printf_float+0x242>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	4652      	mov	r2, sl
 8003ff6:	4631      	mov	r1, r6
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	47b8      	blx	r7
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	f43f aeac 	beq.w	8003d5a <_printf_float+0xb6>
 8004002:	f108 0801 	add.w	r8, r8, #1
 8004006:	e7ec      	b.n	8003fe2 <_printf_float+0x33e>
 8004008:	4613      	mov	r3, r2
 800400a:	4631      	mov	r1, r6
 800400c:	4642      	mov	r2, r8
 800400e:	4628      	mov	r0, r5
 8004010:	47b8      	blx	r7
 8004012:	3001      	adds	r0, #1
 8004014:	d1c0      	bne.n	8003f98 <_printf_float+0x2f4>
 8004016:	e6a0      	b.n	8003d5a <_printf_float+0xb6>
 8004018:	2301      	movs	r3, #1
 800401a:	4631      	mov	r1, r6
 800401c:	4628      	mov	r0, r5
 800401e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004020:	47b8      	blx	r7
 8004022:	3001      	adds	r0, #1
 8004024:	f43f ae99 	beq.w	8003d5a <_printf_float+0xb6>
 8004028:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800402a:	f10b 0b01 	add.w	fp, fp, #1
 800402e:	e7b9      	b.n	8003fa4 <_printf_float+0x300>
 8004030:	4631      	mov	r1, r6
 8004032:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004036:	4628      	mov	r0, r5
 8004038:	47b8      	blx	r7
 800403a:	3001      	adds	r0, #1
 800403c:	d1bf      	bne.n	8003fbe <_printf_float+0x31a>
 800403e:	e68c      	b.n	8003d5a <_printf_float+0xb6>
 8004040:	464b      	mov	r3, r9
 8004042:	4631      	mov	r1, r6
 8004044:	4628      	mov	r0, r5
 8004046:	eb08 020a 	add.w	r2, r8, sl
 800404a:	47b8      	blx	r7
 800404c:	3001      	adds	r0, #1
 800404e:	d1c2      	bne.n	8003fd6 <_printf_float+0x332>
 8004050:	e683      	b.n	8003d5a <_printf_float+0xb6>
 8004052:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004054:	2a01      	cmp	r2, #1
 8004056:	dc01      	bgt.n	800405c <_printf_float+0x3b8>
 8004058:	07db      	lsls	r3, r3, #31
 800405a:	d539      	bpl.n	80040d0 <_printf_float+0x42c>
 800405c:	2301      	movs	r3, #1
 800405e:	4642      	mov	r2, r8
 8004060:	4631      	mov	r1, r6
 8004062:	4628      	mov	r0, r5
 8004064:	47b8      	blx	r7
 8004066:	3001      	adds	r0, #1
 8004068:	f43f ae77 	beq.w	8003d5a <_printf_float+0xb6>
 800406c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004070:	4631      	mov	r1, r6
 8004072:	4628      	mov	r0, r5
 8004074:	47b8      	blx	r7
 8004076:	3001      	adds	r0, #1
 8004078:	f43f ae6f 	beq.w	8003d5a <_printf_float+0xb6>
 800407c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004080:	2200      	movs	r2, #0
 8004082:	2300      	movs	r3, #0
 8004084:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004088:	f7fc fca6 	bl	80009d8 <__aeabi_dcmpeq>
 800408c:	b9d8      	cbnz	r0, 80040c6 <_printf_float+0x422>
 800408e:	f109 33ff 	add.w	r3, r9, #4294967295
 8004092:	f108 0201 	add.w	r2, r8, #1
 8004096:	4631      	mov	r1, r6
 8004098:	4628      	mov	r0, r5
 800409a:	47b8      	blx	r7
 800409c:	3001      	adds	r0, #1
 800409e:	d10e      	bne.n	80040be <_printf_float+0x41a>
 80040a0:	e65b      	b.n	8003d5a <_printf_float+0xb6>
 80040a2:	2301      	movs	r3, #1
 80040a4:	464a      	mov	r2, r9
 80040a6:	4631      	mov	r1, r6
 80040a8:	4628      	mov	r0, r5
 80040aa:	47b8      	blx	r7
 80040ac:	3001      	adds	r0, #1
 80040ae:	f43f ae54 	beq.w	8003d5a <_printf_float+0xb6>
 80040b2:	f108 0801 	add.w	r8, r8, #1
 80040b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040b8:	3b01      	subs	r3, #1
 80040ba:	4543      	cmp	r3, r8
 80040bc:	dcf1      	bgt.n	80040a2 <_printf_float+0x3fe>
 80040be:	4653      	mov	r3, sl
 80040c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80040c4:	e6de      	b.n	8003e84 <_printf_float+0x1e0>
 80040c6:	f04f 0800 	mov.w	r8, #0
 80040ca:	f104 091a 	add.w	r9, r4, #26
 80040ce:	e7f2      	b.n	80040b6 <_printf_float+0x412>
 80040d0:	2301      	movs	r3, #1
 80040d2:	4642      	mov	r2, r8
 80040d4:	e7df      	b.n	8004096 <_printf_float+0x3f2>
 80040d6:	2301      	movs	r3, #1
 80040d8:	464a      	mov	r2, r9
 80040da:	4631      	mov	r1, r6
 80040dc:	4628      	mov	r0, r5
 80040de:	47b8      	blx	r7
 80040e0:	3001      	adds	r0, #1
 80040e2:	f43f ae3a 	beq.w	8003d5a <_printf_float+0xb6>
 80040e6:	f108 0801 	add.w	r8, r8, #1
 80040ea:	68e3      	ldr	r3, [r4, #12]
 80040ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80040ee:	1a5b      	subs	r3, r3, r1
 80040f0:	4543      	cmp	r3, r8
 80040f2:	dcf0      	bgt.n	80040d6 <_printf_float+0x432>
 80040f4:	e6fb      	b.n	8003eee <_printf_float+0x24a>
 80040f6:	f04f 0800 	mov.w	r8, #0
 80040fa:	f104 0919 	add.w	r9, r4, #25
 80040fe:	e7f4      	b.n	80040ea <_printf_float+0x446>

08004100 <_printf_common>:
 8004100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004104:	4616      	mov	r6, r2
 8004106:	4699      	mov	r9, r3
 8004108:	688a      	ldr	r2, [r1, #8]
 800410a:	690b      	ldr	r3, [r1, #16]
 800410c:	4607      	mov	r7, r0
 800410e:	4293      	cmp	r3, r2
 8004110:	bfb8      	it	lt
 8004112:	4613      	movlt	r3, r2
 8004114:	6033      	str	r3, [r6, #0]
 8004116:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800411a:	460c      	mov	r4, r1
 800411c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004120:	b10a      	cbz	r2, 8004126 <_printf_common+0x26>
 8004122:	3301      	adds	r3, #1
 8004124:	6033      	str	r3, [r6, #0]
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	0699      	lsls	r1, r3, #26
 800412a:	bf42      	ittt	mi
 800412c:	6833      	ldrmi	r3, [r6, #0]
 800412e:	3302      	addmi	r3, #2
 8004130:	6033      	strmi	r3, [r6, #0]
 8004132:	6825      	ldr	r5, [r4, #0]
 8004134:	f015 0506 	ands.w	r5, r5, #6
 8004138:	d106      	bne.n	8004148 <_printf_common+0x48>
 800413a:	f104 0a19 	add.w	sl, r4, #25
 800413e:	68e3      	ldr	r3, [r4, #12]
 8004140:	6832      	ldr	r2, [r6, #0]
 8004142:	1a9b      	subs	r3, r3, r2
 8004144:	42ab      	cmp	r3, r5
 8004146:	dc2b      	bgt.n	80041a0 <_printf_common+0xa0>
 8004148:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800414c:	1e13      	subs	r3, r2, #0
 800414e:	6822      	ldr	r2, [r4, #0]
 8004150:	bf18      	it	ne
 8004152:	2301      	movne	r3, #1
 8004154:	0692      	lsls	r2, r2, #26
 8004156:	d430      	bmi.n	80041ba <_printf_common+0xba>
 8004158:	4649      	mov	r1, r9
 800415a:	4638      	mov	r0, r7
 800415c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004160:	47c0      	blx	r8
 8004162:	3001      	adds	r0, #1
 8004164:	d023      	beq.n	80041ae <_printf_common+0xae>
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	6922      	ldr	r2, [r4, #16]
 800416a:	f003 0306 	and.w	r3, r3, #6
 800416e:	2b04      	cmp	r3, #4
 8004170:	bf14      	ite	ne
 8004172:	2500      	movne	r5, #0
 8004174:	6833      	ldreq	r3, [r6, #0]
 8004176:	f04f 0600 	mov.w	r6, #0
 800417a:	bf08      	it	eq
 800417c:	68e5      	ldreq	r5, [r4, #12]
 800417e:	f104 041a 	add.w	r4, r4, #26
 8004182:	bf08      	it	eq
 8004184:	1aed      	subeq	r5, r5, r3
 8004186:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800418a:	bf08      	it	eq
 800418c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004190:	4293      	cmp	r3, r2
 8004192:	bfc4      	itt	gt
 8004194:	1a9b      	subgt	r3, r3, r2
 8004196:	18ed      	addgt	r5, r5, r3
 8004198:	42b5      	cmp	r5, r6
 800419a:	d11a      	bne.n	80041d2 <_printf_common+0xd2>
 800419c:	2000      	movs	r0, #0
 800419e:	e008      	b.n	80041b2 <_printf_common+0xb2>
 80041a0:	2301      	movs	r3, #1
 80041a2:	4652      	mov	r2, sl
 80041a4:	4649      	mov	r1, r9
 80041a6:	4638      	mov	r0, r7
 80041a8:	47c0      	blx	r8
 80041aa:	3001      	adds	r0, #1
 80041ac:	d103      	bne.n	80041b6 <_printf_common+0xb6>
 80041ae:	f04f 30ff 	mov.w	r0, #4294967295
 80041b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b6:	3501      	adds	r5, #1
 80041b8:	e7c1      	b.n	800413e <_printf_common+0x3e>
 80041ba:	2030      	movs	r0, #48	; 0x30
 80041bc:	18e1      	adds	r1, r4, r3
 80041be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041c8:	4422      	add	r2, r4
 80041ca:	3302      	adds	r3, #2
 80041cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041d0:	e7c2      	b.n	8004158 <_printf_common+0x58>
 80041d2:	2301      	movs	r3, #1
 80041d4:	4622      	mov	r2, r4
 80041d6:	4649      	mov	r1, r9
 80041d8:	4638      	mov	r0, r7
 80041da:	47c0      	blx	r8
 80041dc:	3001      	adds	r0, #1
 80041de:	d0e6      	beq.n	80041ae <_printf_common+0xae>
 80041e0:	3601      	adds	r6, #1
 80041e2:	e7d9      	b.n	8004198 <_printf_common+0x98>

080041e4 <_printf_i>:
 80041e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041e8:	7e0f      	ldrb	r7, [r1, #24]
 80041ea:	4691      	mov	r9, r2
 80041ec:	2f78      	cmp	r7, #120	; 0x78
 80041ee:	4680      	mov	r8, r0
 80041f0:	460c      	mov	r4, r1
 80041f2:	469a      	mov	sl, r3
 80041f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041fa:	d807      	bhi.n	800420c <_printf_i+0x28>
 80041fc:	2f62      	cmp	r7, #98	; 0x62
 80041fe:	d80a      	bhi.n	8004216 <_printf_i+0x32>
 8004200:	2f00      	cmp	r7, #0
 8004202:	f000 80d5 	beq.w	80043b0 <_printf_i+0x1cc>
 8004206:	2f58      	cmp	r7, #88	; 0x58
 8004208:	f000 80c1 	beq.w	800438e <_printf_i+0x1aa>
 800420c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004210:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004214:	e03a      	b.n	800428c <_printf_i+0xa8>
 8004216:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800421a:	2b15      	cmp	r3, #21
 800421c:	d8f6      	bhi.n	800420c <_printf_i+0x28>
 800421e:	a101      	add	r1, pc, #4	; (adr r1, 8004224 <_printf_i+0x40>)
 8004220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004224:	0800427d 	.word	0x0800427d
 8004228:	08004291 	.word	0x08004291
 800422c:	0800420d 	.word	0x0800420d
 8004230:	0800420d 	.word	0x0800420d
 8004234:	0800420d 	.word	0x0800420d
 8004238:	0800420d 	.word	0x0800420d
 800423c:	08004291 	.word	0x08004291
 8004240:	0800420d 	.word	0x0800420d
 8004244:	0800420d 	.word	0x0800420d
 8004248:	0800420d 	.word	0x0800420d
 800424c:	0800420d 	.word	0x0800420d
 8004250:	08004397 	.word	0x08004397
 8004254:	080042bd 	.word	0x080042bd
 8004258:	08004351 	.word	0x08004351
 800425c:	0800420d 	.word	0x0800420d
 8004260:	0800420d 	.word	0x0800420d
 8004264:	080043b9 	.word	0x080043b9
 8004268:	0800420d 	.word	0x0800420d
 800426c:	080042bd 	.word	0x080042bd
 8004270:	0800420d 	.word	0x0800420d
 8004274:	0800420d 	.word	0x0800420d
 8004278:	08004359 	.word	0x08004359
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	1d1a      	adds	r2, r3, #4
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	602a      	str	r2, [r5, #0]
 8004284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800428c:	2301      	movs	r3, #1
 800428e:	e0a0      	b.n	80043d2 <_printf_i+0x1ee>
 8004290:	6820      	ldr	r0, [r4, #0]
 8004292:	682b      	ldr	r3, [r5, #0]
 8004294:	0607      	lsls	r7, r0, #24
 8004296:	f103 0104 	add.w	r1, r3, #4
 800429a:	6029      	str	r1, [r5, #0]
 800429c:	d501      	bpl.n	80042a2 <_printf_i+0xbe>
 800429e:	681e      	ldr	r6, [r3, #0]
 80042a0:	e003      	b.n	80042aa <_printf_i+0xc6>
 80042a2:	0646      	lsls	r6, r0, #25
 80042a4:	d5fb      	bpl.n	800429e <_printf_i+0xba>
 80042a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80042aa:	2e00      	cmp	r6, #0
 80042ac:	da03      	bge.n	80042b6 <_printf_i+0xd2>
 80042ae:	232d      	movs	r3, #45	; 0x2d
 80042b0:	4276      	negs	r6, r6
 80042b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042b6:	230a      	movs	r3, #10
 80042b8:	4859      	ldr	r0, [pc, #356]	; (8004420 <_printf_i+0x23c>)
 80042ba:	e012      	b.n	80042e2 <_printf_i+0xfe>
 80042bc:	682b      	ldr	r3, [r5, #0]
 80042be:	6820      	ldr	r0, [r4, #0]
 80042c0:	1d19      	adds	r1, r3, #4
 80042c2:	6029      	str	r1, [r5, #0]
 80042c4:	0605      	lsls	r5, r0, #24
 80042c6:	d501      	bpl.n	80042cc <_printf_i+0xe8>
 80042c8:	681e      	ldr	r6, [r3, #0]
 80042ca:	e002      	b.n	80042d2 <_printf_i+0xee>
 80042cc:	0641      	lsls	r1, r0, #25
 80042ce:	d5fb      	bpl.n	80042c8 <_printf_i+0xe4>
 80042d0:	881e      	ldrh	r6, [r3, #0]
 80042d2:	2f6f      	cmp	r7, #111	; 0x6f
 80042d4:	bf0c      	ite	eq
 80042d6:	2308      	moveq	r3, #8
 80042d8:	230a      	movne	r3, #10
 80042da:	4851      	ldr	r0, [pc, #324]	; (8004420 <_printf_i+0x23c>)
 80042dc:	2100      	movs	r1, #0
 80042de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042e2:	6865      	ldr	r5, [r4, #4]
 80042e4:	2d00      	cmp	r5, #0
 80042e6:	bfa8      	it	ge
 80042e8:	6821      	ldrge	r1, [r4, #0]
 80042ea:	60a5      	str	r5, [r4, #8]
 80042ec:	bfa4      	itt	ge
 80042ee:	f021 0104 	bicge.w	r1, r1, #4
 80042f2:	6021      	strge	r1, [r4, #0]
 80042f4:	b90e      	cbnz	r6, 80042fa <_printf_i+0x116>
 80042f6:	2d00      	cmp	r5, #0
 80042f8:	d04b      	beq.n	8004392 <_printf_i+0x1ae>
 80042fa:	4615      	mov	r5, r2
 80042fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8004300:	fb03 6711 	mls	r7, r3, r1, r6
 8004304:	5dc7      	ldrb	r7, [r0, r7]
 8004306:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800430a:	4637      	mov	r7, r6
 800430c:	42bb      	cmp	r3, r7
 800430e:	460e      	mov	r6, r1
 8004310:	d9f4      	bls.n	80042fc <_printf_i+0x118>
 8004312:	2b08      	cmp	r3, #8
 8004314:	d10b      	bne.n	800432e <_printf_i+0x14a>
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	07de      	lsls	r6, r3, #31
 800431a:	d508      	bpl.n	800432e <_printf_i+0x14a>
 800431c:	6923      	ldr	r3, [r4, #16]
 800431e:	6861      	ldr	r1, [r4, #4]
 8004320:	4299      	cmp	r1, r3
 8004322:	bfde      	ittt	le
 8004324:	2330      	movle	r3, #48	; 0x30
 8004326:	f805 3c01 	strble.w	r3, [r5, #-1]
 800432a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800432e:	1b52      	subs	r2, r2, r5
 8004330:	6122      	str	r2, [r4, #16]
 8004332:	464b      	mov	r3, r9
 8004334:	4621      	mov	r1, r4
 8004336:	4640      	mov	r0, r8
 8004338:	f8cd a000 	str.w	sl, [sp]
 800433c:	aa03      	add	r2, sp, #12
 800433e:	f7ff fedf 	bl	8004100 <_printf_common>
 8004342:	3001      	adds	r0, #1
 8004344:	d14a      	bne.n	80043dc <_printf_i+0x1f8>
 8004346:	f04f 30ff 	mov.w	r0, #4294967295
 800434a:	b004      	add	sp, #16
 800434c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	f043 0320 	orr.w	r3, r3, #32
 8004356:	6023      	str	r3, [r4, #0]
 8004358:	2778      	movs	r7, #120	; 0x78
 800435a:	4832      	ldr	r0, [pc, #200]	; (8004424 <_printf_i+0x240>)
 800435c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	6829      	ldr	r1, [r5, #0]
 8004364:	061f      	lsls	r7, r3, #24
 8004366:	f851 6b04 	ldr.w	r6, [r1], #4
 800436a:	d402      	bmi.n	8004372 <_printf_i+0x18e>
 800436c:	065f      	lsls	r7, r3, #25
 800436e:	bf48      	it	mi
 8004370:	b2b6      	uxthmi	r6, r6
 8004372:	07df      	lsls	r7, r3, #31
 8004374:	bf48      	it	mi
 8004376:	f043 0320 	orrmi.w	r3, r3, #32
 800437a:	6029      	str	r1, [r5, #0]
 800437c:	bf48      	it	mi
 800437e:	6023      	strmi	r3, [r4, #0]
 8004380:	b91e      	cbnz	r6, 800438a <_printf_i+0x1a6>
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	f023 0320 	bic.w	r3, r3, #32
 8004388:	6023      	str	r3, [r4, #0]
 800438a:	2310      	movs	r3, #16
 800438c:	e7a6      	b.n	80042dc <_printf_i+0xf8>
 800438e:	4824      	ldr	r0, [pc, #144]	; (8004420 <_printf_i+0x23c>)
 8004390:	e7e4      	b.n	800435c <_printf_i+0x178>
 8004392:	4615      	mov	r5, r2
 8004394:	e7bd      	b.n	8004312 <_printf_i+0x12e>
 8004396:	682b      	ldr	r3, [r5, #0]
 8004398:	6826      	ldr	r6, [r4, #0]
 800439a:	1d18      	adds	r0, r3, #4
 800439c:	6961      	ldr	r1, [r4, #20]
 800439e:	6028      	str	r0, [r5, #0]
 80043a0:	0635      	lsls	r5, r6, #24
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	d501      	bpl.n	80043aa <_printf_i+0x1c6>
 80043a6:	6019      	str	r1, [r3, #0]
 80043a8:	e002      	b.n	80043b0 <_printf_i+0x1cc>
 80043aa:	0670      	lsls	r0, r6, #25
 80043ac:	d5fb      	bpl.n	80043a6 <_printf_i+0x1c2>
 80043ae:	8019      	strh	r1, [r3, #0]
 80043b0:	2300      	movs	r3, #0
 80043b2:	4615      	mov	r5, r2
 80043b4:	6123      	str	r3, [r4, #16]
 80043b6:	e7bc      	b.n	8004332 <_printf_i+0x14e>
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	2100      	movs	r1, #0
 80043bc:	1d1a      	adds	r2, r3, #4
 80043be:	602a      	str	r2, [r5, #0]
 80043c0:	681d      	ldr	r5, [r3, #0]
 80043c2:	6862      	ldr	r2, [r4, #4]
 80043c4:	4628      	mov	r0, r5
 80043c6:	f000 f9e8 	bl	800479a <memchr>
 80043ca:	b108      	cbz	r0, 80043d0 <_printf_i+0x1ec>
 80043cc:	1b40      	subs	r0, r0, r5
 80043ce:	6060      	str	r0, [r4, #4]
 80043d0:	6863      	ldr	r3, [r4, #4]
 80043d2:	6123      	str	r3, [r4, #16]
 80043d4:	2300      	movs	r3, #0
 80043d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043da:	e7aa      	b.n	8004332 <_printf_i+0x14e>
 80043dc:	462a      	mov	r2, r5
 80043de:	4649      	mov	r1, r9
 80043e0:	4640      	mov	r0, r8
 80043e2:	6923      	ldr	r3, [r4, #16]
 80043e4:	47d0      	blx	sl
 80043e6:	3001      	adds	r0, #1
 80043e8:	d0ad      	beq.n	8004346 <_printf_i+0x162>
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	079b      	lsls	r3, r3, #30
 80043ee:	d413      	bmi.n	8004418 <_printf_i+0x234>
 80043f0:	68e0      	ldr	r0, [r4, #12]
 80043f2:	9b03      	ldr	r3, [sp, #12]
 80043f4:	4298      	cmp	r0, r3
 80043f6:	bfb8      	it	lt
 80043f8:	4618      	movlt	r0, r3
 80043fa:	e7a6      	b.n	800434a <_printf_i+0x166>
 80043fc:	2301      	movs	r3, #1
 80043fe:	4632      	mov	r2, r6
 8004400:	4649      	mov	r1, r9
 8004402:	4640      	mov	r0, r8
 8004404:	47d0      	blx	sl
 8004406:	3001      	adds	r0, #1
 8004408:	d09d      	beq.n	8004346 <_printf_i+0x162>
 800440a:	3501      	adds	r5, #1
 800440c:	68e3      	ldr	r3, [r4, #12]
 800440e:	9903      	ldr	r1, [sp, #12]
 8004410:	1a5b      	subs	r3, r3, r1
 8004412:	42ab      	cmp	r3, r5
 8004414:	dcf2      	bgt.n	80043fc <_printf_i+0x218>
 8004416:	e7eb      	b.n	80043f0 <_printf_i+0x20c>
 8004418:	2500      	movs	r5, #0
 800441a:	f104 0619 	add.w	r6, r4, #25
 800441e:	e7f5      	b.n	800440c <_printf_i+0x228>
 8004420:	08006916 	.word	0x08006916
 8004424:	08006927 	.word	0x08006927

08004428 <std>:
 8004428:	2300      	movs	r3, #0
 800442a:	b510      	push	{r4, lr}
 800442c:	4604      	mov	r4, r0
 800442e:	e9c0 3300 	strd	r3, r3, [r0]
 8004432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004436:	6083      	str	r3, [r0, #8]
 8004438:	8181      	strh	r1, [r0, #12]
 800443a:	6643      	str	r3, [r0, #100]	; 0x64
 800443c:	81c2      	strh	r2, [r0, #14]
 800443e:	6183      	str	r3, [r0, #24]
 8004440:	4619      	mov	r1, r3
 8004442:	2208      	movs	r2, #8
 8004444:	305c      	adds	r0, #92	; 0x5c
 8004446:	f000 f928 	bl	800469a <memset>
 800444a:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <std+0x58>)
 800444c:	6224      	str	r4, [r4, #32]
 800444e:	6263      	str	r3, [r4, #36]	; 0x24
 8004450:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <std+0x5c>)
 8004452:	62a3      	str	r3, [r4, #40]	; 0x28
 8004454:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <std+0x60>)
 8004456:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004458:	4b0c      	ldr	r3, [pc, #48]	; (800448c <std+0x64>)
 800445a:	6323      	str	r3, [r4, #48]	; 0x30
 800445c:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <std+0x68>)
 800445e:	429c      	cmp	r4, r3
 8004460:	d006      	beq.n	8004470 <std+0x48>
 8004462:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004466:	4294      	cmp	r4, r2
 8004468:	d002      	beq.n	8004470 <std+0x48>
 800446a:	33d0      	adds	r3, #208	; 0xd0
 800446c:	429c      	cmp	r4, r3
 800446e:	d105      	bne.n	800447c <std+0x54>
 8004470:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004478:	f000 b98c 	b.w	8004794 <__retarget_lock_init_recursive>
 800447c:	bd10      	pop	{r4, pc}
 800447e:	bf00      	nop
 8004480:	08004615 	.word	0x08004615
 8004484:	08004637 	.word	0x08004637
 8004488:	0800466f 	.word	0x0800466f
 800448c:	08004693 	.word	0x08004693
 8004490:	200002a0 	.word	0x200002a0

08004494 <stdio_exit_handler>:
 8004494:	4a02      	ldr	r2, [pc, #8]	; (80044a0 <stdio_exit_handler+0xc>)
 8004496:	4903      	ldr	r1, [pc, #12]	; (80044a4 <stdio_exit_handler+0x10>)
 8004498:	4803      	ldr	r0, [pc, #12]	; (80044a8 <stdio_exit_handler+0x14>)
 800449a:	f000 b869 	b.w	8004570 <_fwalk_sglue>
 800449e:	bf00      	nop
 80044a0:	2000000c 	.word	0x2000000c
 80044a4:	0800612d 	.word	0x0800612d
 80044a8:	20000018 	.word	0x20000018

080044ac <cleanup_stdio>:
 80044ac:	6841      	ldr	r1, [r0, #4]
 80044ae:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <cleanup_stdio+0x34>)
 80044b0:	b510      	push	{r4, lr}
 80044b2:	4299      	cmp	r1, r3
 80044b4:	4604      	mov	r4, r0
 80044b6:	d001      	beq.n	80044bc <cleanup_stdio+0x10>
 80044b8:	f001 fe38 	bl	800612c <_fflush_r>
 80044bc:	68a1      	ldr	r1, [r4, #8]
 80044be:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <cleanup_stdio+0x38>)
 80044c0:	4299      	cmp	r1, r3
 80044c2:	d002      	beq.n	80044ca <cleanup_stdio+0x1e>
 80044c4:	4620      	mov	r0, r4
 80044c6:	f001 fe31 	bl	800612c <_fflush_r>
 80044ca:	68e1      	ldr	r1, [r4, #12]
 80044cc:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <cleanup_stdio+0x3c>)
 80044ce:	4299      	cmp	r1, r3
 80044d0:	d004      	beq.n	80044dc <cleanup_stdio+0x30>
 80044d2:	4620      	mov	r0, r4
 80044d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044d8:	f001 be28 	b.w	800612c <_fflush_r>
 80044dc:	bd10      	pop	{r4, pc}
 80044de:	bf00      	nop
 80044e0:	200002a0 	.word	0x200002a0
 80044e4:	20000308 	.word	0x20000308
 80044e8:	20000370 	.word	0x20000370

080044ec <global_stdio_init.part.0>:
 80044ec:	b510      	push	{r4, lr}
 80044ee:	4b0b      	ldr	r3, [pc, #44]	; (800451c <global_stdio_init.part.0+0x30>)
 80044f0:	4c0b      	ldr	r4, [pc, #44]	; (8004520 <global_stdio_init.part.0+0x34>)
 80044f2:	4a0c      	ldr	r2, [pc, #48]	; (8004524 <global_stdio_init.part.0+0x38>)
 80044f4:	4620      	mov	r0, r4
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	2104      	movs	r1, #4
 80044fa:	2200      	movs	r2, #0
 80044fc:	f7ff ff94 	bl	8004428 <std>
 8004500:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004504:	2201      	movs	r2, #1
 8004506:	2109      	movs	r1, #9
 8004508:	f7ff ff8e 	bl	8004428 <std>
 800450c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004510:	2202      	movs	r2, #2
 8004512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004516:	2112      	movs	r1, #18
 8004518:	f7ff bf86 	b.w	8004428 <std>
 800451c:	200003d8 	.word	0x200003d8
 8004520:	200002a0 	.word	0x200002a0
 8004524:	08004495 	.word	0x08004495

08004528 <__sfp_lock_acquire>:
 8004528:	4801      	ldr	r0, [pc, #4]	; (8004530 <__sfp_lock_acquire+0x8>)
 800452a:	f000 b934 	b.w	8004796 <__retarget_lock_acquire_recursive>
 800452e:	bf00      	nop
 8004530:	200003e1 	.word	0x200003e1

08004534 <__sfp_lock_release>:
 8004534:	4801      	ldr	r0, [pc, #4]	; (800453c <__sfp_lock_release+0x8>)
 8004536:	f000 b92f 	b.w	8004798 <__retarget_lock_release_recursive>
 800453a:	bf00      	nop
 800453c:	200003e1 	.word	0x200003e1

08004540 <__sinit>:
 8004540:	b510      	push	{r4, lr}
 8004542:	4604      	mov	r4, r0
 8004544:	f7ff fff0 	bl	8004528 <__sfp_lock_acquire>
 8004548:	6a23      	ldr	r3, [r4, #32]
 800454a:	b11b      	cbz	r3, 8004554 <__sinit+0x14>
 800454c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004550:	f7ff bff0 	b.w	8004534 <__sfp_lock_release>
 8004554:	4b04      	ldr	r3, [pc, #16]	; (8004568 <__sinit+0x28>)
 8004556:	6223      	str	r3, [r4, #32]
 8004558:	4b04      	ldr	r3, [pc, #16]	; (800456c <__sinit+0x2c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1f5      	bne.n	800454c <__sinit+0xc>
 8004560:	f7ff ffc4 	bl	80044ec <global_stdio_init.part.0>
 8004564:	e7f2      	b.n	800454c <__sinit+0xc>
 8004566:	bf00      	nop
 8004568:	080044ad 	.word	0x080044ad
 800456c:	200003d8 	.word	0x200003d8

08004570 <_fwalk_sglue>:
 8004570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004574:	4607      	mov	r7, r0
 8004576:	4688      	mov	r8, r1
 8004578:	4614      	mov	r4, r2
 800457a:	2600      	movs	r6, #0
 800457c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004580:	f1b9 0901 	subs.w	r9, r9, #1
 8004584:	d505      	bpl.n	8004592 <_fwalk_sglue+0x22>
 8004586:	6824      	ldr	r4, [r4, #0]
 8004588:	2c00      	cmp	r4, #0
 800458a:	d1f7      	bne.n	800457c <_fwalk_sglue+0xc>
 800458c:	4630      	mov	r0, r6
 800458e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004592:	89ab      	ldrh	r3, [r5, #12]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d907      	bls.n	80045a8 <_fwalk_sglue+0x38>
 8004598:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800459c:	3301      	adds	r3, #1
 800459e:	d003      	beq.n	80045a8 <_fwalk_sglue+0x38>
 80045a0:	4629      	mov	r1, r5
 80045a2:	4638      	mov	r0, r7
 80045a4:	47c0      	blx	r8
 80045a6:	4306      	orrs	r6, r0
 80045a8:	3568      	adds	r5, #104	; 0x68
 80045aa:	e7e9      	b.n	8004580 <_fwalk_sglue+0x10>

080045ac <sniprintf>:
 80045ac:	b40c      	push	{r2, r3}
 80045ae:	b530      	push	{r4, r5, lr}
 80045b0:	4b17      	ldr	r3, [pc, #92]	; (8004610 <sniprintf+0x64>)
 80045b2:	1e0c      	subs	r4, r1, #0
 80045b4:	681d      	ldr	r5, [r3, #0]
 80045b6:	b09d      	sub	sp, #116	; 0x74
 80045b8:	da08      	bge.n	80045cc <sniprintf+0x20>
 80045ba:	238b      	movs	r3, #139	; 0x8b
 80045bc:	f04f 30ff 	mov.w	r0, #4294967295
 80045c0:	602b      	str	r3, [r5, #0]
 80045c2:	b01d      	add	sp, #116	; 0x74
 80045c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045c8:	b002      	add	sp, #8
 80045ca:	4770      	bx	lr
 80045cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80045d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80045d4:	bf0c      	ite	eq
 80045d6:	4623      	moveq	r3, r4
 80045d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80045dc:	9304      	str	r3, [sp, #16]
 80045de:	9307      	str	r3, [sp, #28]
 80045e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045e4:	9002      	str	r0, [sp, #8]
 80045e6:	9006      	str	r0, [sp, #24]
 80045e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80045ec:	4628      	mov	r0, r5
 80045ee:	ab21      	add	r3, sp, #132	; 0x84
 80045f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80045f2:	a902      	add	r1, sp, #8
 80045f4:	9301      	str	r3, [sp, #4]
 80045f6:	f001 fc19 	bl	8005e2c <_svfiprintf_r>
 80045fa:	1c43      	adds	r3, r0, #1
 80045fc:	bfbc      	itt	lt
 80045fe:	238b      	movlt	r3, #139	; 0x8b
 8004600:	602b      	strlt	r3, [r5, #0]
 8004602:	2c00      	cmp	r4, #0
 8004604:	d0dd      	beq.n	80045c2 <sniprintf+0x16>
 8004606:	2200      	movs	r2, #0
 8004608:	9b02      	ldr	r3, [sp, #8]
 800460a:	701a      	strb	r2, [r3, #0]
 800460c:	e7d9      	b.n	80045c2 <sniprintf+0x16>
 800460e:	bf00      	nop
 8004610:	20000064 	.word	0x20000064

08004614 <__sread>:
 8004614:	b510      	push	{r4, lr}
 8004616:	460c      	mov	r4, r1
 8004618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800461c:	f000 f86c 	bl	80046f8 <_read_r>
 8004620:	2800      	cmp	r0, #0
 8004622:	bfab      	itete	ge
 8004624:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004626:	89a3      	ldrhlt	r3, [r4, #12]
 8004628:	181b      	addge	r3, r3, r0
 800462a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800462e:	bfac      	ite	ge
 8004630:	6563      	strge	r3, [r4, #84]	; 0x54
 8004632:	81a3      	strhlt	r3, [r4, #12]
 8004634:	bd10      	pop	{r4, pc}

08004636 <__swrite>:
 8004636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800463a:	461f      	mov	r7, r3
 800463c:	898b      	ldrh	r3, [r1, #12]
 800463e:	4605      	mov	r5, r0
 8004640:	05db      	lsls	r3, r3, #23
 8004642:	460c      	mov	r4, r1
 8004644:	4616      	mov	r6, r2
 8004646:	d505      	bpl.n	8004654 <__swrite+0x1e>
 8004648:	2302      	movs	r3, #2
 800464a:	2200      	movs	r2, #0
 800464c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004650:	f000 f840 	bl	80046d4 <_lseek_r>
 8004654:	89a3      	ldrh	r3, [r4, #12]
 8004656:	4632      	mov	r2, r6
 8004658:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800465c:	81a3      	strh	r3, [r4, #12]
 800465e:	4628      	mov	r0, r5
 8004660:	463b      	mov	r3, r7
 8004662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800466a:	f000 b857 	b.w	800471c <_write_r>

0800466e <__sseek>:
 800466e:	b510      	push	{r4, lr}
 8004670:	460c      	mov	r4, r1
 8004672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004676:	f000 f82d 	bl	80046d4 <_lseek_r>
 800467a:	1c43      	adds	r3, r0, #1
 800467c:	89a3      	ldrh	r3, [r4, #12]
 800467e:	bf15      	itete	ne
 8004680:	6560      	strne	r0, [r4, #84]	; 0x54
 8004682:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004686:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800468a:	81a3      	strheq	r3, [r4, #12]
 800468c:	bf18      	it	ne
 800468e:	81a3      	strhne	r3, [r4, #12]
 8004690:	bd10      	pop	{r4, pc}

08004692 <__sclose>:
 8004692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004696:	f000 b80d 	b.w	80046b4 <_close_r>

0800469a <memset>:
 800469a:	4603      	mov	r3, r0
 800469c:	4402      	add	r2, r0
 800469e:	4293      	cmp	r3, r2
 80046a0:	d100      	bne.n	80046a4 <memset+0xa>
 80046a2:	4770      	bx	lr
 80046a4:	f803 1b01 	strb.w	r1, [r3], #1
 80046a8:	e7f9      	b.n	800469e <memset+0x4>
	...

080046ac <_localeconv_r>:
 80046ac:	4800      	ldr	r0, [pc, #0]	; (80046b0 <_localeconv_r+0x4>)
 80046ae:	4770      	bx	lr
 80046b0:	20000158 	.word	0x20000158

080046b4 <_close_r>:
 80046b4:	b538      	push	{r3, r4, r5, lr}
 80046b6:	2300      	movs	r3, #0
 80046b8:	4d05      	ldr	r5, [pc, #20]	; (80046d0 <_close_r+0x1c>)
 80046ba:	4604      	mov	r4, r0
 80046bc:	4608      	mov	r0, r1
 80046be:	602b      	str	r3, [r5, #0]
 80046c0:	f7fd fa11 	bl	8001ae6 <_close>
 80046c4:	1c43      	adds	r3, r0, #1
 80046c6:	d102      	bne.n	80046ce <_close_r+0x1a>
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	b103      	cbz	r3, 80046ce <_close_r+0x1a>
 80046cc:	6023      	str	r3, [r4, #0]
 80046ce:	bd38      	pop	{r3, r4, r5, pc}
 80046d0:	200003dc 	.word	0x200003dc

080046d4 <_lseek_r>:
 80046d4:	b538      	push	{r3, r4, r5, lr}
 80046d6:	4604      	mov	r4, r0
 80046d8:	4608      	mov	r0, r1
 80046da:	4611      	mov	r1, r2
 80046dc:	2200      	movs	r2, #0
 80046de:	4d05      	ldr	r5, [pc, #20]	; (80046f4 <_lseek_r+0x20>)
 80046e0:	602a      	str	r2, [r5, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	f7fd fa23 	bl	8001b2e <_lseek>
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d102      	bne.n	80046f2 <_lseek_r+0x1e>
 80046ec:	682b      	ldr	r3, [r5, #0]
 80046ee:	b103      	cbz	r3, 80046f2 <_lseek_r+0x1e>
 80046f0:	6023      	str	r3, [r4, #0]
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	200003dc 	.word	0x200003dc

080046f8 <_read_r>:
 80046f8:	b538      	push	{r3, r4, r5, lr}
 80046fa:	4604      	mov	r4, r0
 80046fc:	4608      	mov	r0, r1
 80046fe:	4611      	mov	r1, r2
 8004700:	2200      	movs	r2, #0
 8004702:	4d05      	ldr	r5, [pc, #20]	; (8004718 <_read_r+0x20>)
 8004704:	602a      	str	r2, [r5, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	f7fd f9b4 	bl	8001a74 <_read>
 800470c:	1c43      	adds	r3, r0, #1
 800470e:	d102      	bne.n	8004716 <_read_r+0x1e>
 8004710:	682b      	ldr	r3, [r5, #0]
 8004712:	b103      	cbz	r3, 8004716 <_read_r+0x1e>
 8004714:	6023      	str	r3, [r4, #0]
 8004716:	bd38      	pop	{r3, r4, r5, pc}
 8004718:	200003dc 	.word	0x200003dc

0800471c <_write_r>:
 800471c:	b538      	push	{r3, r4, r5, lr}
 800471e:	4604      	mov	r4, r0
 8004720:	4608      	mov	r0, r1
 8004722:	4611      	mov	r1, r2
 8004724:	2200      	movs	r2, #0
 8004726:	4d05      	ldr	r5, [pc, #20]	; (800473c <_write_r+0x20>)
 8004728:	602a      	str	r2, [r5, #0]
 800472a:	461a      	mov	r2, r3
 800472c:	f7fd f9bf 	bl	8001aae <_write>
 8004730:	1c43      	adds	r3, r0, #1
 8004732:	d102      	bne.n	800473a <_write_r+0x1e>
 8004734:	682b      	ldr	r3, [r5, #0]
 8004736:	b103      	cbz	r3, 800473a <_write_r+0x1e>
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	bd38      	pop	{r3, r4, r5, pc}
 800473c:	200003dc 	.word	0x200003dc

08004740 <__errno>:
 8004740:	4b01      	ldr	r3, [pc, #4]	; (8004748 <__errno+0x8>)
 8004742:	6818      	ldr	r0, [r3, #0]
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	20000064 	.word	0x20000064

0800474c <__libc_init_array>:
 800474c:	b570      	push	{r4, r5, r6, lr}
 800474e:	2600      	movs	r6, #0
 8004750:	4d0c      	ldr	r5, [pc, #48]	; (8004784 <__libc_init_array+0x38>)
 8004752:	4c0d      	ldr	r4, [pc, #52]	; (8004788 <__libc_init_array+0x3c>)
 8004754:	1b64      	subs	r4, r4, r5
 8004756:	10a4      	asrs	r4, r4, #2
 8004758:	42a6      	cmp	r6, r4
 800475a:	d109      	bne.n	8004770 <__libc_init_array+0x24>
 800475c:	f002 f886 	bl	800686c <_init>
 8004760:	2600      	movs	r6, #0
 8004762:	4d0a      	ldr	r5, [pc, #40]	; (800478c <__libc_init_array+0x40>)
 8004764:	4c0a      	ldr	r4, [pc, #40]	; (8004790 <__libc_init_array+0x44>)
 8004766:	1b64      	subs	r4, r4, r5
 8004768:	10a4      	asrs	r4, r4, #2
 800476a:	42a6      	cmp	r6, r4
 800476c:	d105      	bne.n	800477a <__libc_init_array+0x2e>
 800476e:	bd70      	pop	{r4, r5, r6, pc}
 8004770:	f855 3b04 	ldr.w	r3, [r5], #4
 8004774:	4798      	blx	r3
 8004776:	3601      	adds	r6, #1
 8004778:	e7ee      	b.n	8004758 <__libc_init_array+0xc>
 800477a:	f855 3b04 	ldr.w	r3, [r5], #4
 800477e:	4798      	blx	r3
 8004780:	3601      	adds	r6, #1
 8004782:	e7f2      	b.n	800476a <__libc_init_array+0x1e>
 8004784:	08006c7c 	.word	0x08006c7c
 8004788:	08006c7c 	.word	0x08006c7c
 800478c:	08006c7c 	.word	0x08006c7c
 8004790:	08006c80 	.word	0x08006c80

08004794 <__retarget_lock_init_recursive>:
 8004794:	4770      	bx	lr

08004796 <__retarget_lock_acquire_recursive>:
 8004796:	4770      	bx	lr

08004798 <__retarget_lock_release_recursive>:
 8004798:	4770      	bx	lr

0800479a <memchr>:
 800479a:	4603      	mov	r3, r0
 800479c:	b510      	push	{r4, lr}
 800479e:	b2c9      	uxtb	r1, r1
 80047a0:	4402      	add	r2, r0
 80047a2:	4293      	cmp	r3, r2
 80047a4:	4618      	mov	r0, r3
 80047a6:	d101      	bne.n	80047ac <memchr+0x12>
 80047a8:	2000      	movs	r0, #0
 80047aa:	e003      	b.n	80047b4 <memchr+0x1a>
 80047ac:	7804      	ldrb	r4, [r0, #0]
 80047ae:	3301      	adds	r3, #1
 80047b0:	428c      	cmp	r4, r1
 80047b2:	d1f6      	bne.n	80047a2 <memchr+0x8>
 80047b4:	bd10      	pop	{r4, pc}

080047b6 <quorem>:
 80047b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ba:	6903      	ldr	r3, [r0, #16]
 80047bc:	690c      	ldr	r4, [r1, #16]
 80047be:	4607      	mov	r7, r0
 80047c0:	42a3      	cmp	r3, r4
 80047c2:	db7f      	blt.n	80048c4 <quorem+0x10e>
 80047c4:	3c01      	subs	r4, #1
 80047c6:	f100 0514 	add.w	r5, r0, #20
 80047ca:	f101 0814 	add.w	r8, r1, #20
 80047ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80047d2:	9301      	str	r3, [sp, #4]
 80047d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80047d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80047dc:	3301      	adds	r3, #1
 80047de:	429a      	cmp	r2, r3
 80047e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80047e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80047e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80047ec:	d331      	bcc.n	8004852 <quorem+0x9c>
 80047ee:	f04f 0e00 	mov.w	lr, #0
 80047f2:	4640      	mov	r0, r8
 80047f4:	46ac      	mov	ip, r5
 80047f6:	46f2      	mov	sl, lr
 80047f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80047fc:	b293      	uxth	r3, r2
 80047fe:	fb06 e303 	mla	r3, r6, r3, lr
 8004802:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004806:	0c1a      	lsrs	r2, r3, #16
 8004808:	b29b      	uxth	r3, r3
 800480a:	fb06 220e 	mla	r2, r6, lr, r2
 800480e:	ebaa 0303 	sub.w	r3, sl, r3
 8004812:	f8dc a000 	ldr.w	sl, [ip]
 8004816:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800481a:	fa1f fa8a 	uxth.w	sl, sl
 800481e:	4453      	add	r3, sl
 8004820:	f8dc a000 	ldr.w	sl, [ip]
 8004824:	b292      	uxth	r2, r2
 8004826:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800482a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800482e:	b29b      	uxth	r3, r3
 8004830:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004834:	4581      	cmp	r9, r0
 8004836:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800483a:	f84c 3b04 	str.w	r3, [ip], #4
 800483e:	d2db      	bcs.n	80047f8 <quorem+0x42>
 8004840:	f855 300b 	ldr.w	r3, [r5, fp]
 8004844:	b92b      	cbnz	r3, 8004852 <quorem+0x9c>
 8004846:	9b01      	ldr	r3, [sp, #4]
 8004848:	3b04      	subs	r3, #4
 800484a:	429d      	cmp	r5, r3
 800484c:	461a      	mov	r2, r3
 800484e:	d32d      	bcc.n	80048ac <quorem+0xf6>
 8004850:	613c      	str	r4, [r7, #16]
 8004852:	4638      	mov	r0, r7
 8004854:	f001 f992 	bl	8005b7c <__mcmp>
 8004858:	2800      	cmp	r0, #0
 800485a:	db23      	blt.n	80048a4 <quorem+0xee>
 800485c:	4629      	mov	r1, r5
 800485e:	2000      	movs	r0, #0
 8004860:	3601      	adds	r6, #1
 8004862:	f858 2b04 	ldr.w	r2, [r8], #4
 8004866:	f8d1 c000 	ldr.w	ip, [r1]
 800486a:	b293      	uxth	r3, r2
 800486c:	1ac3      	subs	r3, r0, r3
 800486e:	0c12      	lsrs	r2, r2, #16
 8004870:	fa1f f08c 	uxth.w	r0, ip
 8004874:	4403      	add	r3, r0
 8004876:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800487a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800487e:	b29b      	uxth	r3, r3
 8004880:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004884:	45c1      	cmp	r9, r8
 8004886:	ea4f 4022 	mov.w	r0, r2, asr #16
 800488a:	f841 3b04 	str.w	r3, [r1], #4
 800488e:	d2e8      	bcs.n	8004862 <quorem+0xac>
 8004890:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004894:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004898:	b922      	cbnz	r2, 80048a4 <quorem+0xee>
 800489a:	3b04      	subs	r3, #4
 800489c:	429d      	cmp	r5, r3
 800489e:	461a      	mov	r2, r3
 80048a0:	d30a      	bcc.n	80048b8 <quorem+0x102>
 80048a2:	613c      	str	r4, [r7, #16]
 80048a4:	4630      	mov	r0, r6
 80048a6:	b003      	add	sp, #12
 80048a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ac:	6812      	ldr	r2, [r2, #0]
 80048ae:	3b04      	subs	r3, #4
 80048b0:	2a00      	cmp	r2, #0
 80048b2:	d1cd      	bne.n	8004850 <quorem+0x9a>
 80048b4:	3c01      	subs	r4, #1
 80048b6:	e7c8      	b.n	800484a <quorem+0x94>
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	3b04      	subs	r3, #4
 80048bc:	2a00      	cmp	r2, #0
 80048be:	d1f0      	bne.n	80048a2 <quorem+0xec>
 80048c0:	3c01      	subs	r4, #1
 80048c2:	e7eb      	b.n	800489c <quorem+0xe6>
 80048c4:	2000      	movs	r0, #0
 80048c6:	e7ee      	b.n	80048a6 <quorem+0xf0>

080048c8 <_dtoa_r>:
 80048c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048cc:	4616      	mov	r6, r2
 80048ce:	461f      	mov	r7, r3
 80048d0:	69c4      	ldr	r4, [r0, #28]
 80048d2:	b099      	sub	sp, #100	; 0x64
 80048d4:	4605      	mov	r5, r0
 80048d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80048da:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80048de:	b974      	cbnz	r4, 80048fe <_dtoa_r+0x36>
 80048e0:	2010      	movs	r0, #16
 80048e2:	f000 fe1d 	bl	8005520 <malloc>
 80048e6:	4602      	mov	r2, r0
 80048e8:	61e8      	str	r0, [r5, #28]
 80048ea:	b920      	cbnz	r0, 80048f6 <_dtoa_r+0x2e>
 80048ec:	21ef      	movs	r1, #239	; 0xef
 80048ee:	4bac      	ldr	r3, [pc, #688]	; (8004ba0 <_dtoa_r+0x2d8>)
 80048f0:	48ac      	ldr	r0, [pc, #688]	; (8004ba4 <_dtoa_r+0x2dc>)
 80048f2:	f001 fc7b 	bl	80061ec <__assert_func>
 80048f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80048fa:	6004      	str	r4, [r0, #0]
 80048fc:	60c4      	str	r4, [r0, #12]
 80048fe:	69eb      	ldr	r3, [r5, #28]
 8004900:	6819      	ldr	r1, [r3, #0]
 8004902:	b151      	cbz	r1, 800491a <_dtoa_r+0x52>
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	2301      	movs	r3, #1
 8004908:	4093      	lsls	r3, r2
 800490a:	604a      	str	r2, [r1, #4]
 800490c:	608b      	str	r3, [r1, #8]
 800490e:	4628      	mov	r0, r5
 8004910:	f000 fefa 	bl	8005708 <_Bfree>
 8004914:	2200      	movs	r2, #0
 8004916:	69eb      	ldr	r3, [r5, #28]
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	1e3b      	subs	r3, r7, #0
 800491c:	bfaf      	iteee	ge
 800491e:	2300      	movge	r3, #0
 8004920:	2201      	movlt	r2, #1
 8004922:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004926:	9305      	strlt	r3, [sp, #20]
 8004928:	bfa8      	it	ge
 800492a:	f8c8 3000 	strge.w	r3, [r8]
 800492e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004932:	4b9d      	ldr	r3, [pc, #628]	; (8004ba8 <_dtoa_r+0x2e0>)
 8004934:	bfb8      	it	lt
 8004936:	f8c8 2000 	strlt.w	r2, [r8]
 800493a:	ea33 0309 	bics.w	r3, r3, r9
 800493e:	d119      	bne.n	8004974 <_dtoa_r+0xac>
 8004940:	f242 730f 	movw	r3, #9999	; 0x270f
 8004944:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800494c:	4333      	orrs	r3, r6
 800494e:	f000 8589 	beq.w	8005464 <_dtoa_r+0xb9c>
 8004952:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004954:	b953      	cbnz	r3, 800496c <_dtoa_r+0xa4>
 8004956:	4b95      	ldr	r3, [pc, #596]	; (8004bac <_dtoa_r+0x2e4>)
 8004958:	e023      	b.n	80049a2 <_dtoa_r+0xda>
 800495a:	4b95      	ldr	r3, [pc, #596]	; (8004bb0 <_dtoa_r+0x2e8>)
 800495c:	9303      	str	r3, [sp, #12]
 800495e:	3308      	adds	r3, #8
 8004960:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	9803      	ldr	r0, [sp, #12]
 8004966:	b019      	add	sp, #100	; 0x64
 8004968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800496c:	4b8f      	ldr	r3, [pc, #572]	; (8004bac <_dtoa_r+0x2e4>)
 800496e:	9303      	str	r3, [sp, #12]
 8004970:	3303      	adds	r3, #3
 8004972:	e7f5      	b.n	8004960 <_dtoa_r+0x98>
 8004974:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004978:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800497c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004980:	2200      	movs	r2, #0
 8004982:	2300      	movs	r3, #0
 8004984:	f7fc f828 	bl	80009d8 <__aeabi_dcmpeq>
 8004988:	4680      	mov	r8, r0
 800498a:	b160      	cbz	r0, 80049a6 <_dtoa_r+0xde>
 800498c:	2301      	movs	r3, #1
 800498e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 8562 	beq.w	800545e <_dtoa_r+0xb96>
 800499a:	4b86      	ldr	r3, [pc, #536]	; (8004bb4 <_dtoa_r+0x2ec>)
 800499c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	9303      	str	r3, [sp, #12]
 80049a4:	e7de      	b.n	8004964 <_dtoa_r+0x9c>
 80049a6:	ab16      	add	r3, sp, #88	; 0x58
 80049a8:	9301      	str	r3, [sp, #4]
 80049aa:	ab17      	add	r3, sp, #92	; 0x5c
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	4628      	mov	r0, r5
 80049b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80049b4:	f001 f98a 	bl	8005ccc <__d2b>
 80049b8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80049bc:	4682      	mov	sl, r0
 80049be:	2c00      	cmp	r4, #0
 80049c0:	d07e      	beq.n	8004ac0 <_dtoa_r+0x1f8>
 80049c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80049c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049c8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80049cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049d0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80049d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80049d8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80049dc:	4619      	mov	r1, r3
 80049de:	2200      	movs	r2, #0
 80049e0:	4b75      	ldr	r3, [pc, #468]	; (8004bb8 <_dtoa_r+0x2f0>)
 80049e2:	f7fb fbd9 	bl	8000198 <__aeabi_dsub>
 80049e6:	a368      	add	r3, pc, #416	; (adr r3, 8004b88 <_dtoa_r+0x2c0>)
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	f7fb fd8c 	bl	8000508 <__aeabi_dmul>
 80049f0:	a367      	add	r3, pc, #412	; (adr r3, 8004b90 <_dtoa_r+0x2c8>)
 80049f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f6:	f7fb fbd1 	bl	800019c <__adddf3>
 80049fa:	4606      	mov	r6, r0
 80049fc:	4620      	mov	r0, r4
 80049fe:	460f      	mov	r7, r1
 8004a00:	f7fb fd18 	bl	8000434 <__aeabi_i2d>
 8004a04:	a364      	add	r3, pc, #400	; (adr r3, 8004b98 <_dtoa_r+0x2d0>)
 8004a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0a:	f7fb fd7d 	bl	8000508 <__aeabi_dmul>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	4630      	mov	r0, r6
 8004a14:	4639      	mov	r1, r7
 8004a16:	f7fb fbc1 	bl	800019c <__adddf3>
 8004a1a:	4606      	mov	r6, r0
 8004a1c:	460f      	mov	r7, r1
 8004a1e:	f7fc f823 	bl	8000a68 <__aeabi_d2iz>
 8004a22:	2200      	movs	r2, #0
 8004a24:	4683      	mov	fp, r0
 8004a26:	2300      	movs	r3, #0
 8004a28:	4630      	mov	r0, r6
 8004a2a:	4639      	mov	r1, r7
 8004a2c:	f7fb ffde 	bl	80009ec <__aeabi_dcmplt>
 8004a30:	b148      	cbz	r0, 8004a46 <_dtoa_r+0x17e>
 8004a32:	4658      	mov	r0, fp
 8004a34:	f7fb fcfe 	bl	8000434 <__aeabi_i2d>
 8004a38:	4632      	mov	r2, r6
 8004a3a:	463b      	mov	r3, r7
 8004a3c:	f7fb ffcc 	bl	80009d8 <__aeabi_dcmpeq>
 8004a40:	b908      	cbnz	r0, 8004a46 <_dtoa_r+0x17e>
 8004a42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004a46:	f1bb 0f16 	cmp.w	fp, #22
 8004a4a:	d857      	bhi.n	8004afc <_dtoa_r+0x234>
 8004a4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a50:	4b5a      	ldr	r3, [pc, #360]	; (8004bbc <_dtoa_r+0x2f4>)
 8004a52:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5a:	f7fb ffc7 	bl	80009ec <__aeabi_dcmplt>
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	d04e      	beq.n	8004b00 <_dtoa_r+0x238>
 8004a62:	2300      	movs	r3, #0
 8004a64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004a68:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004a6c:	1b1b      	subs	r3, r3, r4
 8004a6e:	1e5a      	subs	r2, r3, #1
 8004a70:	bf46      	itte	mi
 8004a72:	f1c3 0901 	rsbmi	r9, r3, #1
 8004a76:	2300      	movmi	r3, #0
 8004a78:	f04f 0900 	movpl.w	r9, #0
 8004a7c:	9209      	str	r2, [sp, #36]	; 0x24
 8004a7e:	bf48      	it	mi
 8004a80:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004a82:	f1bb 0f00 	cmp.w	fp, #0
 8004a86:	db3d      	blt.n	8004b04 <_dtoa_r+0x23c>
 8004a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a8a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8004a8e:	445b      	add	r3, fp
 8004a90:	9309      	str	r3, [sp, #36]	; 0x24
 8004a92:	2300      	movs	r3, #0
 8004a94:	930a      	str	r3, [sp, #40]	; 0x28
 8004a96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a98:	2b09      	cmp	r3, #9
 8004a9a:	d867      	bhi.n	8004b6c <_dtoa_r+0x2a4>
 8004a9c:	2b05      	cmp	r3, #5
 8004a9e:	bfc4      	itt	gt
 8004aa0:	3b04      	subgt	r3, #4
 8004aa2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004aa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004aa6:	bfc8      	it	gt
 8004aa8:	2400      	movgt	r4, #0
 8004aaa:	f1a3 0302 	sub.w	r3, r3, #2
 8004aae:	bfd8      	it	le
 8004ab0:	2401      	movle	r4, #1
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	f200 8086 	bhi.w	8004bc4 <_dtoa_r+0x2fc>
 8004ab8:	e8df f003 	tbb	[pc, r3]
 8004abc:	5637392c 	.word	0x5637392c
 8004ac0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004ac4:	441c      	add	r4, r3
 8004ac6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	bfc1      	itttt	gt
 8004ace:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004ad2:	fa09 f903 	lslgt.w	r9, r9, r3
 8004ad6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8004ada:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004ade:	bfd6      	itet	le
 8004ae0:	f1c3 0320 	rsble	r3, r3, #32
 8004ae4:	ea49 0003 	orrgt.w	r0, r9, r3
 8004ae8:	fa06 f003 	lslle.w	r0, r6, r3
 8004aec:	f7fb fc92 	bl	8000414 <__aeabi_ui2d>
 8004af0:	2201      	movs	r2, #1
 8004af2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004af6:	3c01      	subs	r4, #1
 8004af8:	9213      	str	r2, [sp, #76]	; 0x4c
 8004afa:	e76f      	b.n	80049dc <_dtoa_r+0x114>
 8004afc:	2301      	movs	r3, #1
 8004afe:	e7b3      	b.n	8004a68 <_dtoa_r+0x1a0>
 8004b00:	900f      	str	r0, [sp, #60]	; 0x3c
 8004b02:	e7b2      	b.n	8004a6a <_dtoa_r+0x1a2>
 8004b04:	f1cb 0300 	rsb	r3, fp, #0
 8004b08:	930a      	str	r3, [sp, #40]	; 0x28
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	eba9 090b 	sub.w	r9, r9, fp
 8004b10:	930e      	str	r3, [sp, #56]	; 0x38
 8004b12:	e7c0      	b.n	8004a96 <_dtoa_r+0x1ce>
 8004b14:	2300      	movs	r3, #0
 8004b16:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	dc55      	bgt.n	8004bca <_dtoa_r+0x302>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	461a      	mov	r2, r3
 8004b22:	9306      	str	r3, [sp, #24]
 8004b24:	9308      	str	r3, [sp, #32]
 8004b26:	9223      	str	r2, [sp, #140]	; 0x8c
 8004b28:	e00b      	b.n	8004b42 <_dtoa_r+0x27a>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e7f3      	b.n	8004b16 <_dtoa_r+0x24e>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004b34:	445b      	add	r3, fp
 8004b36:	9306      	str	r3, [sp, #24]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	9308      	str	r3, [sp, #32]
 8004b3e:	bfb8      	it	lt
 8004b40:	2301      	movlt	r3, #1
 8004b42:	2100      	movs	r1, #0
 8004b44:	2204      	movs	r2, #4
 8004b46:	69e8      	ldr	r0, [r5, #28]
 8004b48:	f102 0614 	add.w	r6, r2, #20
 8004b4c:	429e      	cmp	r6, r3
 8004b4e:	d940      	bls.n	8004bd2 <_dtoa_r+0x30a>
 8004b50:	6041      	str	r1, [r0, #4]
 8004b52:	4628      	mov	r0, r5
 8004b54:	f000 fd98 	bl	8005688 <_Balloc>
 8004b58:	9003      	str	r0, [sp, #12]
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d13c      	bne.n	8004bd8 <_dtoa_r+0x310>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	f240 11af 	movw	r1, #431	; 0x1af
 8004b64:	4b16      	ldr	r3, [pc, #88]	; (8004bc0 <_dtoa_r+0x2f8>)
 8004b66:	e6c3      	b.n	80048f0 <_dtoa_r+0x28>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e7e1      	b.n	8004b30 <_dtoa_r+0x268>
 8004b6c:	2401      	movs	r4, #1
 8004b6e:	2300      	movs	r3, #0
 8004b70:	940b      	str	r4, [sp, #44]	; 0x2c
 8004b72:	9322      	str	r3, [sp, #136]	; 0x88
 8004b74:	f04f 33ff 	mov.w	r3, #4294967295
 8004b78:	2200      	movs	r2, #0
 8004b7a:	9306      	str	r3, [sp, #24]
 8004b7c:	9308      	str	r3, [sp, #32]
 8004b7e:	2312      	movs	r3, #18
 8004b80:	e7d1      	b.n	8004b26 <_dtoa_r+0x25e>
 8004b82:	bf00      	nop
 8004b84:	f3af 8000 	nop.w
 8004b88:	636f4361 	.word	0x636f4361
 8004b8c:	3fd287a7 	.word	0x3fd287a7
 8004b90:	8b60c8b3 	.word	0x8b60c8b3
 8004b94:	3fc68a28 	.word	0x3fc68a28
 8004b98:	509f79fb 	.word	0x509f79fb
 8004b9c:	3fd34413 	.word	0x3fd34413
 8004ba0:	08006945 	.word	0x08006945
 8004ba4:	0800695c 	.word	0x0800695c
 8004ba8:	7ff00000 	.word	0x7ff00000
 8004bac:	08006941 	.word	0x08006941
 8004bb0:	08006938 	.word	0x08006938
 8004bb4:	08006915 	.word	0x08006915
 8004bb8:	3ff80000 	.word	0x3ff80000
 8004bbc:	08006a48 	.word	0x08006a48
 8004bc0:	080069b4 	.word	0x080069b4
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bc8:	e7d4      	b.n	8004b74 <_dtoa_r+0x2ac>
 8004bca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004bcc:	9306      	str	r3, [sp, #24]
 8004bce:	9308      	str	r3, [sp, #32]
 8004bd0:	e7b7      	b.n	8004b42 <_dtoa_r+0x27a>
 8004bd2:	3101      	adds	r1, #1
 8004bd4:	0052      	lsls	r2, r2, #1
 8004bd6:	e7b7      	b.n	8004b48 <_dtoa_r+0x280>
 8004bd8:	69eb      	ldr	r3, [r5, #28]
 8004bda:	9a03      	ldr	r2, [sp, #12]
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	9b08      	ldr	r3, [sp, #32]
 8004be0:	2b0e      	cmp	r3, #14
 8004be2:	f200 80a8 	bhi.w	8004d36 <_dtoa_r+0x46e>
 8004be6:	2c00      	cmp	r4, #0
 8004be8:	f000 80a5 	beq.w	8004d36 <_dtoa_r+0x46e>
 8004bec:	f1bb 0f00 	cmp.w	fp, #0
 8004bf0:	dd34      	ble.n	8004c5c <_dtoa_r+0x394>
 8004bf2:	4b9a      	ldr	r3, [pc, #616]	; (8004e5c <_dtoa_r+0x594>)
 8004bf4:	f00b 020f 	and.w	r2, fp, #15
 8004bf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bfc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004c00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c04:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004c08:	ea4f 142b 	mov.w	r4, fp, asr #4
 8004c0c:	d016      	beq.n	8004c3c <_dtoa_r+0x374>
 8004c0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c12:	4b93      	ldr	r3, [pc, #588]	; (8004e60 <_dtoa_r+0x598>)
 8004c14:	2703      	movs	r7, #3
 8004c16:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c1a:	f7fb fd9f 	bl	800075c <__aeabi_ddiv>
 8004c1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c22:	f004 040f 	and.w	r4, r4, #15
 8004c26:	4e8e      	ldr	r6, [pc, #568]	; (8004e60 <_dtoa_r+0x598>)
 8004c28:	b954      	cbnz	r4, 8004c40 <_dtoa_r+0x378>
 8004c2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004c2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c32:	f7fb fd93 	bl	800075c <__aeabi_ddiv>
 8004c36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c3a:	e029      	b.n	8004c90 <_dtoa_r+0x3c8>
 8004c3c:	2702      	movs	r7, #2
 8004c3e:	e7f2      	b.n	8004c26 <_dtoa_r+0x35e>
 8004c40:	07e1      	lsls	r1, r4, #31
 8004c42:	d508      	bpl.n	8004c56 <_dtoa_r+0x38e>
 8004c44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c48:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004c4c:	f7fb fc5c 	bl	8000508 <__aeabi_dmul>
 8004c50:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c54:	3701      	adds	r7, #1
 8004c56:	1064      	asrs	r4, r4, #1
 8004c58:	3608      	adds	r6, #8
 8004c5a:	e7e5      	b.n	8004c28 <_dtoa_r+0x360>
 8004c5c:	f000 80a5 	beq.w	8004daa <_dtoa_r+0x4e2>
 8004c60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c64:	f1cb 0400 	rsb	r4, fp, #0
 8004c68:	4b7c      	ldr	r3, [pc, #496]	; (8004e5c <_dtoa_r+0x594>)
 8004c6a:	f004 020f 	and.w	r2, r4, #15
 8004c6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	f7fb fc47 	bl	8000508 <__aeabi_dmul>
 8004c7a:	2702      	movs	r7, #2
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c82:	4e77      	ldr	r6, [pc, #476]	; (8004e60 <_dtoa_r+0x598>)
 8004c84:	1124      	asrs	r4, r4, #4
 8004c86:	2c00      	cmp	r4, #0
 8004c88:	f040 8084 	bne.w	8004d94 <_dtoa_r+0x4cc>
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1d2      	bne.n	8004c36 <_dtoa_r+0x36e>
 8004c90:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004c94:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004c98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8087 	beq.w	8004dae <_dtoa_r+0x4e6>
 8004ca0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	4b6f      	ldr	r3, [pc, #444]	; (8004e64 <_dtoa_r+0x59c>)
 8004ca8:	f7fb fea0 	bl	80009ec <__aeabi_dcmplt>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d07e      	beq.n	8004dae <_dtoa_r+0x4e6>
 8004cb0:	9b08      	ldr	r3, [sp, #32]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d07b      	beq.n	8004dae <_dtoa_r+0x4e6>
 8004cb6:	9b06      	ldr	r3, [sp, #24]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	dd38      	ble.n	8004d2e <_dtoa_r+0x466>
 8004cbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	4b69      	ldr	r3, [pc, #420]	; (8004e68 <_dtoa_r+0x5a0>)
 8004cc4:	f7fb fc20 	bl	8000508 <__aeabi_dmul>
 8004cc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ccc:	9c06      	ldr	r4, [sp, #24]
 8004cce:	f10b 38ff 	add.w	r8, fp, #4294967295
 8004cd2:	3701      	adds	r7, #1
 8004cd4:	4638      	mov	r0, r7
 8004cd6:	f7fb fbad 	bl	8000434 <__aeabi_i2d>
 8004cda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cde:	f7fb fc13 	bl	8000508 <__aeabi_dmul>
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	4b61      	ldr	r3, [pc, #388]	; (8004e6c <_dtoa_r+0x5a4>)
 8004ce6:	f7fb fa59 	bl	800019c <__adddf3>
 8004cea:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004cee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004cf2:	9611      	str	r6, [sp, #68]	; 0x44
 8004cf4:	2c00      	cmp	r4, #0
 8004cf6:	d15d      	bne.n	8004db4 <_dtoa_r+0x4ec>
 8004cf8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	4b5c      	ldr	r3, [pc, #368]	; (8004e70 <_dtoa_r+0x5a8>)
 8004d00:	f7fb fa4a 	bl	8000198 <__aeabi_dsub>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d0c:	4633      	mov	r3, r6
 8004d0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004d10:	f7fb fe8a 	bl	8000a28 <__aeabi_dcmpgt>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	f040 8295 	bne.w	8005244 <_dtoa_r+0x97c>
 8004d1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004d20:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004d24:	f7fb fe62 	bl	80009ec <__aeabi_dcmplt>
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	f040 8289 	bne.w	8005240 <_dtoa_r+0x978>
 8004d2e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004d32:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004d36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f2c0 8151 	blt.w	8004fe0 <_dtoa_r+0x718>
 8004d3e:	f1bb 0f0e 	cmp.w	fp, #14
 8004d42:	f300 814d 	bgt.w	8004fe0 <_dtoa_r+0x718>
 8004d46:	4b45      	ldr	r3, [pc, #276]	; (8004e5c <_dtoa_r+0x594>)
 8004d48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004d4c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d50:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004d54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f280 80da 	bge.w	8004f10 <_dtoa_r+0x648>
 8004d5c:	9b08      	ldr	r3, [sp, #32]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f300 80d6 	bgt.w	8004f10 <_dtoa_r+0x648>
 8004d64:	f040 826b 	bne.w	800523e <_dtoa_r+0x976>
 8004d68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	4b40      	ldr	r3, [pc, #256]	; (8004e70 <_dtoa_r+0x5a8>)
 8004d70:	f7fb fbca 	bl	8000508 <__aeabi_dmul>
 8004d74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d78:	f7fb fe4c 	bl	8000a14 <__aeabi_dcmpge>
 8004d7c:	9c08      	ldr	r4, [sp, #32]
 8004d7e:	4626      	mov	r6, r4
 8004d80:	2800      	cmp	r0, #0
 8004d82:	f040 8241 	bne.w	8005208 <_dtoa_r+0x940>
 8004d86:	2331      	movs	r3, #49	; 0x31
 8004d88:	9f03      	ldr	r7, [sp, #12]
 8004d8a:	f10b 0b01 	add.w	fp, fp, #1
 8004d8e:	f807 3b01 	strb.w	r3, [r7], #1
 8004d92:	e23d      	b.n	8005210 <_dtoa_r+0x948>
 8004d94:	07e2      	lsls	r2, r4, #31
 8004d96:	d505      	bpl.n	8004da4 <_dtoa_r+0x4dc>
 8004d98:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d9c:	f7fb fbb4 	bl	8000508 <__aeabi_dmul>
 8004da0:	2301      	movs	r3, #1
 8004da2:	3701      	adds	r7, #1
 8004da4:	1064      	asrs	r4, r4, #1
 8004da6:	3608      	adds	r6, #8
 8004da8:	e76d      	b.n	8004c86 <_dtoa_r+0x3be>
 8004daa:	2702      	movs	r7, #2
 8004dac:	e770      	b.n	8004c90 <_dtoa_r+0x3c8>
 8004dae:	46d8      	mov	r8, fp
 8004db0:	9c08      	ldr	r4, [sp, #32]
 8004db2:	e78f      	b.n	8004cd4 <_dtoa_r+0x40c>
 8004db4:	9903      	ldr	r1, [sp, #12]
 8004db6:	4b29      	ldr	r3, [pc, #164]	; (8004e5c <_dtoa_r+0x594>)
 8004db8:	4421      	add	r1, r4
 8004dba:	9112      	str	r1, [sp, #72]	; 0x48
 8004dbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004dbe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004dc2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004dc6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004dca:	2900      	cmp	r1, #0
 8004dcc:	d054      	beq.n	8004e78 <_dtoa_r+0x5b0>
 8004dce:	2000      	movs	r0, #0
 8004dd0:	4928      	ldr	r1, [pc, #160]	; (8004e74 <_dtoa_r+0x5ac>)
 8004dd2:	f7fb fcc3 	bl	800075c <__aeabi_ddiv>
 8004dd6:	463b      	mov	r3, r7
 8004dd8:	4632      	mov	r2, r6
 8004dda:	f7fb f9dd 	bl	8000198 <__aeabi_dsub>
 8004dde:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004de2:	9f03      	ldr	r7, [sp, #12]
 8004de4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004de8:	f7fb fe3e 	bl	8000a68 <__aeabi_d2iz>
 8004dec:	4604      	mov	r4, r0
 8004dee:	f7fb fb21 	bl	8000434 <__aeabi_i2d>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dfa:	f7fb f9cd 	bl	8000198 <__aeabi_dsub>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	3430      	adds	r4, #48	; 0x30
 8004e04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004e08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e0c:	f807 4b01 	strb.w	r4, [r7], #1
 8004e10:	f7fb fdec 	bl	80009ec <__aeabi_dcmplt>
 8004e14:	2800      	cmp	r0, #0
 8004e16:	d173      	bne.n	8004f00 <_dtoa_r+0x638>
 8004e18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	4911      	ldr	r1, [pc, #68]	; (8004e64 <_dtoa_r+0x59c>)
 8004e20:	f7fb f9ba 	bl	8000198 <__aeabi_dsub>
 8004e24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e28:	f7fb fde0 	bl	80009ec <__aeabi_dcmplt>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	f040 80b6 	bne.w	8004f9e <_dtoa_r+0x6d6>
 8004e32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e34:	429f      	cmp	r7, r3
 8004e36:	f43f af7a 	beq.w	8004d2e <_dtoa_r+0x466>
 8004e3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e3e:	2200      	movs	r2, #0
 8004e40:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <_dtoa_r+0x5a0>)
 8004e42:	f7fb fb61 	bl	8000508 <__aeabi_dmul>
 8004e46:	2200      	movs	r2, #0
 8004e48:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e50:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <_dtoa_r+0x5a0>)
 8004e52:	f7fb fb59 	bl	8000508 <__aeabi_dmul>
 8004e56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e5a:	e7c3      	b.n	8004de4 <_dtoa_r+0x51c>
 8004e5c:	08006a48 	.word	0x08006a48
 8004e60:	08006a20 	.word	0x08006a20
 8004e64:	3ff00000 	.word	0x3ff00000
 8004e68:	40240000 	.word	0x40240000
 8004e6c:	401c0000 	.word	0x401c0000
 8004e70:	40140000 	.word	0x40140000
 8004e74:	3fe00000 	.word	0x3fe00000
 8004e78:	4630      	mov	r0, r6
 8004e7a:	4639      	mov	r1, r7
 8004e7c:	f7fb fb44 	bl	8000508 <__aeabi_dmul>
 8004e80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e82:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e86:	9c03      	ldr	r4, [sp, #12]
 8004e88:	9314      	str	r3, [sp, #80]	; 0x50
 8004e8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e8e:	f7fb fdeb 	bl	8000a68 <__aeabi_d2iz>
 8004e92:	9015      	str	r0, [sp, #84]	; 0x54
 8004e94:	f7fb face 	bl	8000434 <__aeabi_i2d>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ea0:	f7fb f97a 	bl	8000198 <__aeabi_dsub>
 8004ea4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004ea6:	4606      	mov	r6, r0
 8004ea8:	3330      	adds	r3, #48	; 0x30
 8004eaa:	f804 3b01 	strb.w	r3, [r4], #1
 8004eae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004eb0:	460f      	mov	r7, r1
 8004eb2:	429c      	cmp	r4, r3
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	d124      	bne.n	8004f04 <_dtoa_r+0x63c>
 8004eba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ebe:	4baf      	ldr	r3, [pc, #700]	; (800517c <_dtoa_r+0x8b4>)
 8004ec0:	f7fb f96c 	bl	800019c <__adddf3>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4630      	mov	r0, r6
 8004eca:	4639      	mov	r1, r7
 8004ecc:	f7fb fdac 	bl	8000a28 <__aeabi_dcmpgt>
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	d163      	bne.n	8004f9c <_dtoa_r+0x6d4>
 8004ed4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ed8:	2000      	movs	r0, #0
 8004eda:	49a8      	ldr	r1, [pc, #672]	; (800517c <_dtoa_r+0x8b4>)
 8004edc:	f7fb f95c 	bl	8000198 <__aeabi_dsub>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	4639      	mov	r1, r7
 8004ee8:	f7fb fd80 	bl	80009ec <__aeabi_dcmplt>
 8004eec:	2800      	cmp	r0, #0
 8004eee:	f43f af1e 	beq.w	8004d2e <_dtoa_r+0x466>
 8004ef2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004ef4:	1e7b      	subs	r3, r7, #1
 8004ef6:	9314      	str	r3, [sp, #80]	; 0x50
 8004ef8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004efc:	2b30      	cmp	r3, #48	; 0x30
 8004efe:	d0f8      	beq.n	8004ef2 <_dtoa_r+0x62a>
 8004f00:	46c3      	mov	fp, r8
 8004f02:	e03b      	b.n	8004f7c <_dtoa_r+0x6b4>
 8004f04:	4b9e      	ldr	r3, [pc, #632]	; (8005180 <_dtoa_r+0x8b8>)
 8004f06:	f7fb faff 	bl	8000508 <__aeabi_dmul>
 8004f0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f0e:	e7bc      	b.n	8004e8a <_dtoa_r+0x5c2>
 8004f10:	9f03      	ldr	r7, [sp, #12]
 8004f12:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004f16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f1a:	4640      	mov	r0, r8
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	f7fb fc1d 	bl	800075c <__aeabi_ddiv>
 8004f22:	f7fb fda1 	bl	8000a68 <__aeabi_d2iz>
 8004f26:	4604      	mov	r4, r0
 8004f28:	f7fb fa84 	bl	8000434 <__aeabi_i2d>
 8004f2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f30:	f7fb faea 	bl	8000508 <__aeabi_dmul>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4640      	mov	r0, r8
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	f7fb f92c 	bl	8000198 <__aeabi_dsub>
 8004f40:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004f44:	f807 6b01 	strb.w	r6, [r7], #1
 8004f48:	9e03      	ldr	r6, [sp, #12]
 8004f4a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004f4e:	1bbe      	subs	r6, r7, r6
 8004f50:	45b4      	cmp	ip, r6
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	d136      	bne.n	8004fc6 <_dtoa_r+0x6fe>
 8004f58:	f7fb f920 	bl	800019c <__adddf3>
 8004f5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f60:	4680      	mov	r8, r0
 8004f62:	4689      	mov	r9, r1
 8004f64:	f7fb fd60 	bl	8000a28 <__aeabi_dcmpgt>
 8004f68:	bb58      	cbnz	r0, 8004fc2 <_dtoa_r+0x6fa>
 8004f6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f6e:	4640      	mov	r0, r8
 8004f70:	4649      	mov	r1, r9
 8004f72:	f7fb fd31 	bl	80009d8 <__aeabi_dcmpeq>
 8004f76:	b108      	cbz	r0, 8004f7c <_dtoa_r+0x6b4>
 8004f78:	07e3      	lsls	r3, r4, #31
 8004f7a:	d422      	bmi.n	8004fc2 <_dtoa_r+0x6fa>
 8004f7c:	4651      	mov	r1, sl
 8004f7e:	4628      	mov	r0, r5
 8004f80:	f000 fbc2 	bl	8005708 <_Bfree>
 8004f84:	2300      	movs	r3, #0
 8004f86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f88:	703b      	strb	r3, [r7, #0]
 8004f8a:	f10b 0301 	add.w	r3, fp, #1
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f43f ace6 	beq.w	8004964 <_dtoa_r+0x9c>
 8004f98:	601f      	str	r7, [r3, #0]
 8004f9a:	e4e3      	b.n	8004964 <_dtoa_r+0x9c>
 8004f9c:	4627      	mov	r7, r4
 8004f9e:	463b      	mov	r3, r7
 8004fa0:	461f      	mov	r7, r3
 8004fa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004fa6:	2a39      	cmp	r2, #57	; 0x39
 8004fa8:	d107      	bne.n	8004fba <_dtoa_r+0x6f2>
 8004faa:	9a03      	ldr	r2, [sp, #12]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d1f7      	bne.n	8004fa0 <_dtoa_r+0x6d8>
 8004fb0:	2230      	movs	r2, #48	; 0x30
 8004fb2:	9903      	ldr	r1, [sp, #12]
 8004fb4:	f108 0801 	add.w	r8, r8, #1
 8004fb8:	700a      	strb	r2, [r1, #0]
 8004fba:	781a      	ldrb	r2, [r3, #0]
 8004fbc:	3201      	adds	r2, #1
 8004fbe:	701a      	strb	r2, [r3, #0]
 8004fc0:	e79e      	b.n	8004f00 <_dtoa_r+0x638>
 8004fc2:	46d8      	mov	r8, fp
 8004fc4:	e7eb      	b.n	8004f9e <_dtoa_r+0x6d6>
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	4b6d      	ldr	r3, [pc, #436]	; (8005180 <_dtoa_r+0x8b8>)
 8004fca:	f7fb fa9d 	bl	8000508 <__aeabi_dmul>
 8004fce:	2200      	movs	r2, #0
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	4680      	mov	r8, r0
 8004fd4:	4689      	mov	r9, r1
 8004fd6:	f7fb fcff 	bl	80009d8 <__aeabi_dcmpeq>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	d09b      	beq.n	8004f16 <_dtoa_r+0x64e>
 8004fde:	e7cd      	b.n	8004f7c <_dtoa_r+0x6b4>
 8004fe0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004fe2:	2a00      	cmp	r2, #0
 8004fe4:	f000 80c4 	beq.w	8005170 <_dtoa_r+0x8a8>
 8004fe8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004fea:	2a01      	cmp	r2, #1
 8004fec:	f300 80a8 	bgt.w	8005140 <_dtoa_r+0x878>
 8004ff0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004ff2:	2a00      	cmp	r2, #0
 8004ff4:	f000 80a0 	beq.w	8005138 <_dtoa_r+0x870>
 8004ff8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004ffc:	464f      	mov	r7, r9
 8004ffe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005000:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005002:	2101      	movs	r1, #1
 8005004:	441a      	add	r2, r3
 8005006:	4628      	mov	r0, r5
 8005008:	4499      	add	r9, r3
 800500a:	9209      	str	r2, [sp, #36]	; 0x24
 800500c:	f000 fc32 	bl	8005874 <__i2b>
 8005010:	4606      	mov	r6, r0
 8005012:	b15f      	cbz	r7, 800502c <_dtoa_r+0x764>
 8005014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005016:	2b00      	cmp	r3, #0
 8005018:	dd08      	ble.n	800502c <_dtoa_r+0x764>
 800501a:	42bb      	cmp	r3, r7
 800501c:	bfa8      	it	ge
 800501e:	463b      	movge	r3, r7
 8005020:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005022:	eba9 0903 	sub.w	r9, r9, r3
 8005026:	1aff      	subs	r7, r7, r3
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	9309      	str	r3, [sp, #36]	; 0x24
 800502c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800502e:	b1f3      	cbz	r3, 800506e <_dtoa_r+0x7a6>
 8005030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 80a0 	beq.w	8005178 <_dtoa_r+0x8b0>
 8005038:	2c00      	cmp	r4, #0
 800503a:	dd10      	ble.n	800505e <_dtoa_r+0x796>
 800503c:	4631      	mov	r1, r6
 800503e:	4622      	mov	r2, r4
 8005040:	4628      	mov	r0, r5
 8005042:	f000 fcd5 	bl	80059f0 <__pow5mult>
 8005046:	4652      	mov	r2, sl
 8005048:	4601      	mov	r1, r0
 800504a:	4606      	mov	r6, r0
 800504c:	4628      	mov	r0, r5
 800504e:	f000 fc27 	bl	80058a0 <__multiply>
 8005052:	4680      	mov	r8, r0
 8005054:	4651      	mov	r1, sl
 8005056:	4628      	mov	r0, r5
 8005058:	f000 fb56 	bl	8005708 <_Bfree>
 800505c:	46c2      	mov	sl, r8
 800505e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005060:	1b1a      	subs	r2, r3, r4
 8005062:	d004      	beq.n	800506e <_dtoa_r+0x7a6>
 8005064:	4651      	mov	r1, sl
 8005066:	4628      	mov	r0, r5
 8005068:	f000 fcc2 	bl	80059f0 <__pow5mult>
 800506c:	4682      	mov	sl, r0
 800506e:	2101      	movs	r1, #1
 8005070:	4628      	mov	r0, r5
 8005072:	f000 fbff 	bl	8005874 <__i2b>
 8005076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005078:	4604      	mov	r4, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	f340 8082 	ble.w	8005184 <_dtoa_r+0x8bc>
 8005080:	461a      	mov	r2, r3
 8005082:	4601      	mov	r1, r0
 8005084:	4628      	mov	r0, r5
 8005086:	f000 fcb3 	bl	80059f0 <__pow5mult>
 800508a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800508c:	4604      	mov	r4, r0
 800508e:	2b01      	cmp	r3, #1
 8005090:	dd7b      	ble.n	800518a <_dtoa_r+0x8c2>
 8005092:	f04f 0800 	mov.w	r8, #0
 8005096:	6923      	ldr	r3, [r4, #16]
 8005098:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800509c:	6918      	ldr	r0, [r3, #16]
 800509e:	f000 fb9b 	bl	80057d8 <__hi0bits>
 80050a2:	f1c0 0020 	rsb	r0, r0, #32
 80050a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050a8:	4418      	add	r0, r3
 80050aa:	f010 001f 	ands.w	r0, r0, #31
 80050ae:	f000 8092 	beq.w	80051d6 <_dtoa_r+0x90e>
 80050b2:	f1c0 0320 	rsb	r3, r0, #32
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	f340 8085 	ble.w	80051c6 <_dtoa_r+0x8fe>
 80050bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050be:	f1c0 001c 	rsb	r0, r0, #28
 80050c2:	4403      	add	r3, r0
 80050c4:	4481      	add	r9, r0
 80050c6:	4407      	add	r7, r0
 80050c8:	9309      	str	r3, [sp, #36]	; 0x24
 80050ca:	f1b9 0f00 	cmp.w	r9, #0
 80050ce:	dd05      	ble.n	80050dc <_dtoa_r+0x814>
 80050d0:	4651      	mov	r1, sl
 80050d2:	464a      	mov	r2, r9
 80050d4:	4628      	mov	r0, r5
 80050d6:	f000 fce5 	bl	8005aa4 <__lshift>
 80050da:	4682      	mov	sl, r0
 80050dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050de:	2b00      	cmp	r3, #0
 80050e0:	dd05      	ble.n	80050ee <_dtoa_r+0x826>
 80050e2:	4621      	mov	r1, r4
 80050e4:	461a      	mov	r2, r3
 80050e6:	4628      	mov	r0, r5
 80050e8:	f000 fcdc 	bl	8005aa4 <__lshift>
 80050ec:	4604      	mov	r4, r0
 80050ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d072      	beq.n	80051da <_dtoa_r+0x912>
 80050f4:	4621      	mov	r1, r4
 80050f6:	4650      	mov	r0, sl
 80050f8:	f000 fd40 	bl	8005b7c <__mcmp>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	da6c      	bge.n	80051da <_dtoa_r+0x912>
 8005100:	2300      	movs	r3, #0
 8005102:	4651      	mov	r1, sl
 8005104:	220a      	movs	r2, #10
 8005106:	4628      	mov	r0, r5
 8005108:	f000 fb20 	bl	800574c <__multadd>
 800510c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800510e:	4682      	mov	sl, r0
 8005110:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 81ac 	beq.w	8005472 <_dtoa_r+0xbaa>
 800511a:	2300      	movs	r3, #0
 800511c:	4631      	mov	r1, r6
 800511e:	220a      	movs	r2, #10
 8005120:	4628      	mov	r0, r5
 8005122:	f000 fb13 	bl	800574c <__multadd>
 8005126:	9b06      	ldr	r3, [sp, #24]
 8005128:	4606      	mov	r6, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	f300 8093 	bgt.w	8005256 <_dtoa_r+0x98e>
 8005130:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005132:	2b02      	cmp	r3, #2
 8005134:	dc59      	bgt.n	80051ea <_dtoa_r+0x922>
 8005136:	e08e      	b.n	8005256 <_dtoa_r+0x98e>
 8005138:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800513a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800513e:	e75d      	b.n	8004ffc <_dtoa_r+0x734>
 8005140:	9b08      	ldr	r3, [sp, #32]
 8005142:	1e5c      	subs	r4, r3, #1
 8005144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005146:	42a3      	cmp	r3, r4
 8005148:	bfbf      	itttt	lt
 800514a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800514c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800514e:	1ae3      	sublt	r3, r4, r3
 8005150:	18d2      	addlt	r2, r2, r3
 8005152:	bfa8      	it	ge
 8005154:	1b1c      	subge	r4, r3, r4
 8005156:	9b08      	ldr	r3, [sp, #32]
 8005158:	bfbe      	ittt	lt
 800515a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800515c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800515e:	2400      	movlt	r4, #0
 8005160:	2b00      	cmp	r3, #0
 8005162:	bfb5      	itete	lt
 8005164:	eba9 0703 	sublt.w	r7, r9, r3
 8005168:	464f      	movge	r7, r9
 800516a:	2300      	movlt	r3, #0
 800516c:	9b08      	ldrge	r3, [sp, #32]
 800516e:	e747      	b.n	8005000 <_dtoa_r+0x738>
 8005170:	464f      	mov	r7, r9
 8005172:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005174:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005176:	e74c      	b.n	8005012 <_dtoa_r+0x74a>
 8005178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800517a:	e773      	b.n	8005064 <_dtoa_r+0x79c>
 800517c:	3fe00000 	.word	0x3fe00000
 8005180:	40240000 	.word	0x40240000
 8005184:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005186:	2b01      	cmp	r3, #1
 8005188:	dc18      	bgt.n	80051bc <_dtoa_r+0x8f4>
 800518a:	9b04      	ldr	r3, [sp, #16]
 800518c:	b9b3      	cbnz	r3, 80051bc <_dtoa_r+0x8f4>
 800518e:	9b05      	ldr	r3, [sp, #20]
 8005190:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005194:	b993      	cbnz	r3, 80051bc <_dtoa_r+0x8f4>
 8005196:	9b05      	ldr	r3, [sp, #20]
 8005198:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800519c:	0d1b      	lsrs	r3, r3, #20
 800519e:	051b      	lsls	r3, r3, #20
 80051a0:	b17b      	cbz	r3, 80051c2 <_dtoa_r+0x8fa>
 80051a2:	f04f 0801 	mov.w	r8, #1
 80051a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051a8:	f109 0901 	add.w	r9, r9, #1
 80051ac:	3301      	adds	r3, #1
 80051ae:	9309      	str	r3, [sp, #36]	; 0x24
 80051b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f47f af6f 	bne.w	8005096 <_dtoa_r+0x7ce>
 80051b8:	2001      	movs	r0, #1
 80051ba:	e774      	b.n	80050a6 <_dtoa_r+0x7de>
 80051bc:	f04f 0800 	mov.w	r8, #0
 80051c0:	e7f6      	b.n	80051b0 <_dtoa_r+0x8e8>
 80051c2:	4698      	mov	r8, r3
 80051c4:	e7f4      	b.n	80051b0 <_dtoa_r+0x8e8>
 80051c6:	d080      	beq.n	80050ca <_dtoa_r+0x802>
 80051c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051ca:	331c      	adds	r3, #28
 80051cc:	441a      	add	r2, r3
 80051ce:	4499      	add	r9, r3
 80051d0:	441f      	add	r7, r3
 80051d2:	9209      	str	r2, [sp, #36]	; 0x24
 80051d4:	e779      	b.n	80050ca <_dtoa_r+0x802>
 80051d6:	4603      	mov	r3, r0
 80051d8:	e7f6      	b.n	80051c8 <_dtoa_r+0x900>
 80051da:	9b08      	ldr	r3, [sp, #32]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	dc34      	bgt.n	800524a <_dtoa_r+0x982>
 80051e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	dd31      	ble.n	800524a <_dtoa_r+0x982>
 80051e6:	9b08      	ldr	r3, [sp, #32]
 80051e8:	9306      	str	r3, [sp, #24]
 80051ea:	9b06      	ldr	r3, [sp, #24]
 80051ec:	b963      	cbnz	r3, 8005208 <_dtoa_r+0x940>
 80051ee:	4621      	mov	r1, r4
 80051f0:	2205      	movs	r2, #5
 80051f2:	4628      	mov	r0, r5
 80051f4:	f000 faaa 	bl	800574c <__multadd>
 80051f8:	4601      	mov	r1, r0
 80051fa:	4604      	mov	r4, r0
 80051fc:	4650      	mov	r0, sl
 80051fe:	f000 fcbd 	bl	8005b7c <__mcmp>
 8005202:	2800      	cmp	r0, #0
 8005204:	f73f adbf 	bgt.w	8004d86 <_dtoa_r+0x4be>
 8005208:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800520a:	9f03      	ldr	r7, [sp, #12]
 800520c:	ea6f 0b03 	mvn.w	fp, r3
 8005210:	f04f 0800 	mov.w	r8, #0
 8005214:	4621      	mov	r1, r4
 8005216:	4628      	mov	r0, r5
 8005218:	f000 fa76 	bl	8005708 <_Bfree>
 800521c:	2e00      	cmp	r6, #0
 800521e:	f43f aead 	beq.w	8004f7c <_dtoa_r+0x6b4>
 8005222:	f1b8 0f00 	cmp.w	r8, #0
 8005226:	d005      	beq.n	8005234 <_dtoa_r+0x96c>
 8005228:	45b0      	cmp	r8, r6
 800522a:	d003      	beq.n	8005234 <_dtoa_r+0x96c>
 800522c:	4641      	mov	r1, r8
 800522e:	4628      	mov	r0, r5
 8005230:	f000 fa6a 	bl	8005708 <_Bfree>
 8005234:	4631      	mov	r1, r6
 8005236:	4628      	mov	r0, r5
 8005238:	f000 fa66 	bl	8005708 <_Bfree>
 800523c:	e69e      	b.n	8004f7c <_dtoa_r+0x6b4>
 800523e:	2400      	movs	r4, #0
 8005240:	4626      	mov	r6, r4
 8005242:	e7e1      	b.n	8005208 <_dtoa_r+0x940>
 8005244:	46c3      	mov	fp, r8
 8005246:	4626      	mov	r6, r4
 8005248:	e59d      	b.n	8004d86 <_dtoa_r+0x4be>
 800524a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 80c8 	beq.w	80053e2 <_dtoa_r+0xb1a>
 8005252:	9b08      	ldr	r3, [sp, #32]
 8005254:	9306      	str	r3, [sp, #24]
 8005256:	2f00      	cmp	r7, #0
 8005258:	dd05      	ble.n	8005266 <_dtoa_r+0x99e>
 800525a:	4631      	mov	r1, r6
 800525c:	463a      	mov	r2, r7
 800525e:	4628      	mov	r0, r5
 8005260:	f000 fc20 	bl	8005aa4 <__lshift>
 8005264:	4606      	mov	r6, r0
 8005266:	f1b8 0f00 	cmp.w	r8, #0
 800526a:	d05b      	beq.n	8005324 <_dtoa_r+0xa5c>
 800526c:	4628      	mov	r0, r5
 800526e:	6871      	ldr	r1, [r6, #4]
 8005270:	f000 fa0a 	bl	8005688 <_Balloc>
 8005274:	4607      	mov	r7, r0
 8005276:	b928      	cbnz	r0, 8005284 <_dtoa_r+0x9bc>
 8005278:	4602      	mov	r2, r0
 800527a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800527e:	4b81      	ldr	r3, [pc, #516]	; (8005484 <_dtoa_r+0xbbc>)
 8005280:	f7ff bb36 	b.w	80048f0 <_dtoa_r+0x28>
 8005284:	6932      	ldr	r2, [r6, #16]
 8005286:	f106 010c 	add.w	r1, r6, #12
 800528a:	3202      	adds	r2, #2
 800528c:	0092      	lsls	r2, r2, #2
 800528e:	300c      	adds	r0, #12
 8005290:	f000 ff9e 	bl	80061d0 <memcpy>
 8005294:	2201      	movs	r2, #1
 8005296:	4639      	mov	r1, r7
 8005298:	4628      	mov	r0, r5
 800529a:	f000 fc03 	bl	8005aa4 <__lshift>
 800529e:	46b0      	mov	r8, r6
 80052a0:	4606      	mov	r6, r0
 80052a2:	9b03      	ldr	r3, [sp, #12]
 80052a4:	9a03      	ldr	r2, [sp, #12]
 80052a6:	3301      	adds	r3, #1
 80052a8:	9308      	str	r3, [sp, #32]
 80052aa:	9b06      	ldr	r3, [sp, #24]
 80052ac:	4413      	add	r3, r2
 80052ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80052b0:	9b04      	ldr	r3, [sp, #16]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	930a      	str	r3, [sp, #40]	; 0x28
 80052b8:	9b08      	ldr	r3, [sp, #32]
 80052ba:	4621      	mov	r1, r4
 80052bc:	3b01      	subs	r3, #1
 80052be:	4650      	mov	r0, sl
 80052c0:	9304      	str	r3, [sp, #16]
 80052c2:	f7ff fa78 	bl	80047b6 <quorem>
 80052c6:	4641      	mov	r1, r8
 80052c8:	9006      	str	r0, [sp, #24]
 80052ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80052ce:	4650      	mov	r0, sl
 80052d0:	f000 fc54 	bl	8005b7c <__mcmp>
 80052d4:	4632      	mov	r2, r6
 80052d6:	9009      	str	r0, [sp, #36]	; 0x24
 80052d8:	4621      	mov	r1, r4
 80052da:	4628      	mov	r0, r5
 80052dc:	f000 fc6a 	bl	8005bb4 <__mdiff>
 80052e0:	68c2      	ldr	r2, [r0, #12]
 80052e2:	4607      	mov	r7, r0
 80052e4:	bb02      	cbnz	r2, 8005328 <_dtoa_r+0xa60>
 80052e6:	4601      	mov	r1, r0
 80052e8:	4650      	mov	r0, sl
 80052ea:	f000 fc47 	bl	8005b7c <__mcmp>
 80052ee:	4602      	mov	r2, r0
 80052f0:	4639      	mov	r1, r7
 80052f2:	4628      	mov	r0, r5
 80052f4:	920c      	str	r2, [sp, #48]	; 0x30
 80052f6:	f000 fa07 	bl	8005708 <_Bfree>
 80052fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052fe:	9f08      	ldr	r7, [sp, #32]
 8005300:	ea43 0102 	orr.w	r1, r3, r2
 8005304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005306:	4319      	orrs	r1, r3
 8005308:	d110      	bne.n	800532c <_dtoa_r+0xa64>
 800530a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800530e:	d029      	beq.n	8005364 <_dtoa_r+0xa9c>
 8005310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005312:	2b00      	cmp	r3, #0
 8005314:	dd02      	ble.n	800531c <_dtoa_r+0xa54>
 8005316:	9b06      	ldr	r3, [sp, #24]
 8005318:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800531c:	9b04      	ldr	r3, [sp, #16]
 800531e:	f883 9000 	strb.w	r9, [r3]
 8005322:	e777      	b.n	8005214 <_dtoa_r+0x94c>
 8005324:	4630      	mov	r0, r6
 8005326:	e7ba      	b.n	800529e <_dtoa_r+0x9d6>
 8005328:	2201      	movs	r2, #1
 800532a:	e7e1      	b.n	80052f0 <_dtoa_r+0xa28>
 800532c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800532e:	2b00      	cmp	r3, #0
 8005330:	db04      	blt.n	800533c <_dtoa_r+0xa74>
 8005332:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005334:	430b      	orrs	r3, r1
 8005336:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005338:	430b      	orrs	r3, r1
 800533a:	d120      	bne.n	800537e <_dtoa_r+0xab6>
 800533c:	2a00      	cmp	r2, #0
 800533e:	dded      	ble.n	800531c <_dtoa_r+0xa54>
 8005340:	4651      	mov	r1, sl
 8005342:	2201      	movs	r2, #1
 8005344:	4628      	mov	r0, r5
 8005346:	f000 fbad 	bl	8005aa4 <__lshift>
 800534a:	4621      	mov	r1, r4
 800534c:	4682      	mov	sl, r0
 800534e:	f000 fc15 	bl	8005b7c <__mcmp>
 8005352:	2800      	cmp	r0, #0
 8005354:	dc03      	bgt.n	800535e <_dtoa_r+0xa96>
 8005356:	d1e1      	bne.n	800531c <_dtoa_r+0xa54>
 8005358:	f019 0f01 	tst.w	r9, #1
 800535c:	d0de      	beq.n	800531c <_dtoa_r+0xa54>
 800535e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005362:	d1d8      	bne.n	8005316 <_dtoa_r+0xa4e>
 8005364:	2339      	movs	r3, #57	; 0x39
 8005366:	9a04      	ldr	r2, [sp, #16]
 8005368:	7013      	strb	r3, [r2, #0]
 800536a:	463b      	mov	r3, r7
 800536c:	461f      	mov	r7, r3
 800536e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005372:	3b01      	subs	r3, #1
 8005374:	2a39      	cmp	r2, #57	; 0x39
 8005376:	d06b      	beq.n	8005450 <_dtoa_r+0xb88>
 8005378:	3201      	adds	r2, #1
 800537a:	701a      	strb	r2, [r3, #0]
 800537c:	e74a      	b.n	8005214 <_dtoa_r+0x94c>
 800537e:	2a00      	cmp	r2, #0
 8005380:	dd07      	ble.n	8005392 <_dtoa_r+0xaca>
 8005382:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005386:	d0ed      	beq.n	8005364 <_dtoa_r+0xa9c>
 8005388:	9a04      	ldr	r2, [sp, #16]
 800538a:	f109 0301 	add.w	r3, r9, #1
 800538e:	7013      	strb	r3, [r2, #0]
 8005390:	e740      	b.n	8005214 <_dtoa_r+0x94c>
 8005392:	9b08      	ldr	r3, [sp, #32]
 8005394:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005396:	f803 9c01 	strb.w	r9, [r3, #-1]
 800539a:	4293      	cmp	r3, r2
 800539c:	d042      	beq.n	8005424 <_dtoa_r+0xb5c>
 800539e:	4651      	mov	r1, sl
 80053a0:	2300      	movs	r3, #0
 80053a2:	220a      	movs	r2, #10
 80053a4:	4628      	mov	r0, r5
 80053a6:	f000 f9d1 	bl	800574c <__multadd>
 80053aa:	45b0      	cmp	r8, r6
 80053ac:	4682      	mov	sl, r0
 80053ae:	f04f 0300 	mov.w	r3, #0
 80053b2:	f04f 020a 	mov.w	r2, #10
 80053b6:	4641      	mov	r1, r8
 80053b8:	4628      	mov	r0, r5
 80053ba:	d107      	bne.n	80053cc <_dtoa_r+0xb04>
 80053bc:	f000 f9c6 	bl	800574c <__multadd>
 80053c0:	4680      	mov	r8, r0
 80053c2:	4606      	mov	r6, r0
 80053c4:	9b08      	ldr	r3, [sp, #32]
 80053c6:	3301      	adds	r3, #1
 80053c8:	9308      	str	r3, [sp, #32]
 80053ca:	e775      	b.n	80052b8 <_dtoa_r+0x9f0>
 80053cc:	f000 f9be 	bl	800574c <__multadd>
 80053d0:	4631      	mov	r1, r6
 80053d2:	4680      	mov	r8, r0
 80053d4:	2300      	movs	r3, #0
 80053d6:	220a      	movs	r2, #10
 80053d8:	4628      	mov	r0, r5
 80053da:	f000 f9b7 	bl	800574c <__multadd>
 80053de:	4606      	mov	r6, r0
 80053e0:	e7f0      	b.n	80053c4 <_dtoa_r+0xafc>
 80053e2:	9b08      	ldr	r3, [sp, #32]
 80053e4:	9306      	str	r3, [sp, #24]
 80053e6:	9f03      	ldr	r7, [sp, #12]
 80053e8:	4621      	mov	r1, r4
 80053ea:	4650      	mov	r0, sl
 80053ec:	f7ff f9e3 	bl	80047b6 <quorem>
 80053f0:	9b03      	ldr	r3, [sp, #12]
 80053f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80053f6:	f807 9b01 	strb.w	r9, [r7], #1
 80053fa:	1afa      	subs	r2, r7, r3
 80053fc:	9b06      	ldr	r3, [sp, #24]
 80053fe:	4293      	cmp	r3, r2
 8005400:	dd07      	ble.n	8005412 <_dtoa_r+0xb4a>
 8005402:	4651      	mov	r1, sl
 8005404:	2300      	movs	r3, #0
 8005406:	220a      	movs	r2, #10
 8005408:	4628      	mov	r0, r5
 800540a:	f000 f99f 	bl	800574c <__multadd>
 800540e:	4682      	mov	sl, r0
 8005410:	e7ea      	b.n	80053e8 <_dtoa_r+0xb20>
 8005412:	9b06      	ldr	r3, [sp, #24]
 8005414:	f04f 0800 	mov.w	r8, #0
 8005418:	2b00      	cmp	r3, #0
 800541a:	bfcc      	ite	gt
 800541c:	461f      	movgt	r7, r3
 800541e:	2701      	movle	r7, #1
 8005420:	9b03      	ldr	r3, [sp, #12]
 8005422:	441f      	add	r7, r3
 8005424:	4651      	mov	r1, sl
 8005426:	2201      	movs	r2, #1
 8005428:	4628      	mov	r0, r5
 800542a:	f000 fb3b 	bl	8005aa4 <__lshift>
 800542e:	4621      	mov	r1, r4
 8005430:	4682      	mov	sl, r0
 8005432:	f000 fba3 	bl	8005b7c <__mcmp>
 8005436:	2800      	cmp	r0, #0
 8005438:	dc97      	bgt.n	800536a <_dtoa_r+0xaa2>
 800543a:	d102      	bne.n	8005442 <_dtoa_r+0xb7a>
 800543c:	f019 0f01 	tst.w	r9, #1
 8005440:	d193      	bne.n	800536a <_dtoa_r+0xaa2>
 8005442:	463b      	mov	r3, r7
 8005444:	461f      	mov	r7, r3
 8005446:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800544a:	2a30      	cmp	r2, #48	; 0x30
 800544c:	d0fa      	beq.n	8005444 <_dtoa_r+0xb7c>
 800544e:	e6e1      	b.n	8005214 <_dtoa_r+0x94c>
 8005450:	9a03      	ldr	r2, [sp, #12]
 8005452:	429a      	cmp	r2, r3
 8005454:	d18a      	bne.n	800536c <_dtoa_r+0xaa4>
 8005456:	2331      	movs	r3, #49	; 0x31
 8005458:	f10b 0b01 	add.w	fp, fp, #1
 800545c:	e797      	b.n	800538e <_dtoa_r+0xac6>
 800545e:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <_dtoa_r+0xbc0>)
 8005460:	f7ff ba9f 	b.w	80049a2 <_dtoa_r+0xda>
 8005464:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005466:	2b00      	cmp	r3, #0
 8005468:	f47f aa77 	bne.w	800495a <_dtoa_r+0x92>
 800546c:	4b07      	ldr	r3, [pc, #28]	; (800548c <_dtoa_r+0xbc4>)
 800546e:	f7ff ba98 	b.w	80049a2 <_dtoa_r+0xda>
 8005472:	9b06      	ldr	r3, [sp, #24]
 8005474:	2b00      	cmp	r3, #0
 8005476:	dcb6      	bgt.n	80053e6 <_dtoa_r+0xb1e>
 8005478:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800547a:	2b02      	cmp	r3, #2
 800547c:	f73f aeb5 	bgt.w	80051ea <_dtoa_r+0x922>
 8005480:	e7b1      	b.n	80053e6 <_dtoa_r+0xb1e>
 8005482:	bf00      	nop
 8005484:	080069b4 	.word	0x080069b4
 8005488:	08006914 	.word	0x08006914
 800548c:	08006938 	.word	0x08006938

08005490 <_free_r>:
 8005490:	b538      	push	{r3, r4, r5, lr}
 8005492:	4605      	mov	r5, r0
 8005494:	2900      	cmp	r1, #0
 8005496:	d040      	beq.n	800551a <_free_r+0x8a>
 8005498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800549c:	1f0c      	subs	r4, r1, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	bfb8      	it	lt
 80054a2:	18e4      	addlt	r4, r4, r3
 80054a4:	f000 f8e4 	bl	8005670 <__malloc_lock>
 80054a8:	4a1c      	ldr	r2, [pc, #112]	; (800551c <_free_r+0x8c>)
 80054aa:	6813      	ldr	r3, [r2, #0]
 80054ac:	b933      	cbnz	r3, 80054bc <_free_r+0x2c>
 80054ae:	6063      	str	r3, [r4, #4]
 80054b0:	6014      	str	r4, [r2, #0]
 80054b2:	4628      	mov	r0, r5
 80054b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054b8:	f000 b8e0 	b.w	800567c <__malloc_unlock>
 80054bc:	42a3      	cmp	r3, r4
 80054be:	d908      	bls.n	80054d2 <_free_r+0x42>
 80054c0:	6820      	ldr	r0, [r4, #0]
 80054c2:	1821      	adds	r1, r4, r0
 80054c4:	428b      	cmp	r3, r1
 80054c6:	bf01      	itttt	eq
 80054c8:	6819      	ldreq	r1, [r3, #0]
 80054ca:	685b      	ldreq	r3, [r3, #4]
 80054cc:	1809      	addeq	r1, r1, r0
 80054ce:	6021      	streq	r1, [r4, #0]
 80054d0:	e7ed      	b.n	80054ae <_free_r+0x1e>
 80054d2:	461a      	mov	r2, r3
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	b10b      	cbz	r3, 80054dc <_free_r+0x4c>
 80054d8:	42a3      	cmp	r3, r4
 80054da:	d9fa      	bls.n	80054d2 <_free_r+0x42>
 80054dc:	6811      	ldr	r1, [r2, #0]
 80054de:	1850      	adds	r0, r2, r1
 80054e0:	42a0      	cmp	r0, r4
 80054e2:	d10b      	bne.n	80054fc <_free_r+0x6c>
 80054e4:	6820      	ldr	r0, [r4, #0]
 80054e6:	4401      	add	r1, r0
 80054e8:	1850      	adds	r0, r2, r1
 80054ea:	4283      	cmp	r3, r0
 80054ec:	6011      	str	r1, [r2, #0]
 80054ee:	d1e0      	bne.n	80054b2 <_free_r+0x22>
 80054f0:	6818      	ldr	r0, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	4408      	add	r0, r1
 80054f6:	6010      	str	r0, [r2, #0]
 80054f8:	6053      	str	r3, [r2, #4]
 80054fa:	e7da      	b.n	80054b2 <_free_r+0x22>
 80054fc:	d902      	bls.n	8005504 <_free_r+0x74>
 80054fe:	230c      	movs	r3, #12
 8005500:	602b      	str	r3, [r5, #0]
 8005502:	e7d6      	b.n	80054b2 <_free_r+0x22>
 8005504:	6820      	ldr	r0, [r4, #0]
 8005506:	1821      	adds	r1, r4, r0
 8005508:	428b      	cmp	r3, r1
 800550a:	bf01      	itttt	eq
 800550c:	6819      	ldreq	r1, [r3, #0]
 800550e:	685b      	ldreq	r3, [r3, #4]
 8005510:	1809      	addeq	r1, r1, r0
 8005512:	6021      	streq	r1, [r4, #0]
 8005514:	6063      	str	r3, [r4, #4]
 8005516:	6054      	str	r4, [r2, #4]
 8005518:	e7cb      	b.n	80054b2 <_free_r+0x22>
 800551a:	bd38      	pop	{r3, r4, r5, pc}
 800551c:	200003e4 	.word	0x200003e4

08005520 <malloc>:
 8005520:	4b02      	ldr	r3, [pc, #8]	; (800552c <malloc+0xc>)
 8005522:	4601      	mov	r1, r0
 8005524:	6818      	ldr	r0, [r3, #0]
 8005526:	f000 b823 	b.w	8005570 <_malloc_r>
 800552a:	bf00      	nop
 800552c:	20000064 	.word	0x20000064

08005530 <sbrk_aligned>:
 8005530:	b570      	push	{r4, r5, r6, lr}
 8005532:	4e0e      	ldr	r6, [pc, #56]	; (800556c <sbrk_aligned+0x3c>)
 8005534:	460c      	mov	r4, r1
 8005536:	6831      	ldr	r1, [r6, #0]
 8005538:	4605      	mov	r5, r0
 800553a:	b911      	cbnz	r1, 8005542 <sbrk_aligned+0x12>
 800553c:	f000 fe38 	bl	80061b0 <_sbrk_r>
 8005540:	6030      	str	r0, [r6, #0]
 8005542:	4621      	mov	r1, r4
 8005544:	4628      	mov	r0, r5
 8005546:	f000 fe33 	bl	80061b0 <_sbrk_r>
 800554a:	1c43      	adds	r3, r0, #1
 800554c:	d00a      	beq.n	8005564 <sbrk_aligned+0x34>
 800554e:	1cc4      	adds	r4, r0, #3
 8005550:	f024 0403 	bic.w	r4, r4, #3
 8005554:	42a0      	cmp	r0, r4
 8005556:	d007      	beq.n	8005568 <sbrk_aligned+0x38>
 8005558:	1a21      	subs	r1, r4, r0
 800555a:	4628      	mov	r0, r5
 800555c:	f000 fe28 	bl	80061b0 <_sbrk_r>
 8005560:	3001      	adds	r0, #1
 8005562:	d101      	bne.n	8005568 <sbrk_aligned+0x38>
 8005564:	f04f 34ff 	mov.w	r4, #4294967295
 8005568:	4620      	mov	r0, r4
 800556a:	bd70      	pop	{r4, r5, r6, pc}
 800556c:	200003e8 	.word	0x200003e8

08005570 <_malloc_r>:
 8005570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005574:	1ccd      	adds	r5, r1, #3
 8005576:	f025 0503 	bic.w	r5, r5, #3
 800557a:	3508      	adds	r5, #8
 800557c:	2d0c      	cmp	r5, #12
 800557e:	bf38      	it	cc
 8005580:	250c      	movcc	r5, #12
 8005582:	2d00      	cmp	r5, #0
 8005584:	4607      	mov	r7, r0
 8005586:	db01      	blt.n	800558c <_malloc_r+0x1c>
 8005588:	42a9      	cmp	r1, r5
 800558a:	d905      	bls.n	8005598 <_malloc_r+0x28>
 800558c:	230c      	movs	r3, #12
 800558e:	2600      	movs	r6, #0
 8005590:	603b      	str	r3, [r7, #0]
 8005592:	4630      	mov	r0, r6
 8005594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005598:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800566c <_malloc_r+0xfc>
 800559c:	f000 f868 	bl	8005670 <__malloc_lock>
 80055a0:	f8d8 3000 	ldr.w	r3, [r8]
 80055a4:	461c      	mov	r4, r3
 80055a6:	bb5c      	cbnz	r4, 8005600 <_malloc_r+0x90>
 80055a8:	4629      	mov	r1, r5
 80055aa:	4638      	mov	r0, r7
 80055ac:	f7ff ffc0 	bl	8005530 <sbrk_aligned>
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	4604      	mov	r4, r0
 80055b4:	d155      	bne.n	8005662 <_malloc_r+0xf2>
 80055b6:	f8d8 4000 	ldr.w	r4, [r8]
 80055ba:	4626      	mov	r6, r4
 80055bc:	2e00      	cmp	r6, #0
 80055be:	d145      	bne.n	800564c <_malloc_r+0xdc>
 80055c0:	2c00      	cmp	r4, #0
 80055c2:	d048      	beq.n	8005656 <_malloc_r+0xe6>
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	4631      	mov	r1, r6
 80055c8:	4638      	mov	r0, r7
 80055ca:	eb04 0903 	add.w	r9, r4, r3
 80055ce:	f000 fdef 	bl	80061b0 <_sbrk_r>
 80055d2:	4581      	cmp	r9, r0
 80055d4:	d13f      	bne.n	8005656 <_malloc_r+0xe6>
 80055d6:	6821      	ldr	r1, [r4, #0]
 80055d8:	4638      	mov	r0, r7
 80055da:	1a6d      	subs	r5, r5, r1
 80055dc:	4629      	mov	r1, r5
 80055de:	f7ff ffa7 	bl	8005530 <sbrk_aligned>
 80055e2:	3001      	adds	r0, #1
 80055e4:	d037      	beq.n	8005656 <_malloc_r+0xe6>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	442b      	add	r3, r5
 80055ea:	6023      	str	r3, [r4, #0]
 80055ec:	f8d8 3000 	ldr.w	r3, [r8]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d038      	beq.n	8005666 <_malloc_r+0xf6>
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	42a2      	cmp	r2, r4
 80055f8:	d12b      	bne.n	8005652 <_malloc_r+0xe2>
 80055fa:	2200      	movs	r2, #0
 80055fc:	605a      	str	r2, [r3, #4]
 80055fe:	e00f      	b.n	8005620 <_malloc_r+0xb0>
 8005600:	6822      	ldr	r2, [r4, #0]
 8005602:	1b52      	subs	r2, r2, r5
 8005604:	d41f      	bmi.n	8005646 <_malloc_r+0xd6>
 8005606:	2a0b      	cmp	r2, #11
 8005608:	d917      	bls.n	800563a <_malloc_r+0xca>
 800560a:	1961      	adds	r1, r4, r5
 800560c:	42a3      	cmp	r3, r4
 800560e:	6025      	str	r5, [r4, #0]
 8005610:	bf18      	it	ne
 8005612:	6059      	strne	r1, [r3, #4]
 8005614:	6863      	ldr	r3, [r4, #4]
 8005616:	bf08      	it	eq
 8005618:	f8c8 1000 	streq.w	r1, [r8]
 800561c:	5162      	str	r2, [r4, r5]
 800561e:	604b      	str	r3, [r1, #4]
 8005620:	4638      	mov	r0, r7
 8005622:	f104 060b 	add.w	r6, r4, #11
 8005626:	f000 f829 	bl	800567c <__malloc_unlock>
 800562a:	f026 0607 	bic.w	r6, r6, #7
 800562e:	1d23      	adds	r3, r4, #4
 8005630:	1af2      	subs	r2, r6, r3
 8005632:	d0ae      	beq.n	8005592 <_malloc_r+0x22>
 8005634:	1b9b      	subs	r3, r3, r6
 8005636:	50a3      	str	r3, [r4, r2]
 8005638:	e7ab      	b.n	8005592 <_malloc_r+0x22>
 800563a:	42a3      	cmp	r3, r4
 800563c:	6862      	ldr	r2, [r4, #4]
 800563e:	d1dd      	bne.n	80055fc <_malloc_r+0x8c>
 8005640:	f8c8 2000 	str.w	r2, [r8]
 8005644:	e7ec      	b.n	8005620 <_malloc_r+0xb0>
 8005646:	4623      	mov	r3, r4
 8005648:	6864      	ldr	r4, [r4, #4]
 800564a:	e7ac      	b.n	80055a6 <_malloc_r+0x36>
 800564c:	4634      	mov	r4, r6
 800564e:	6876      	ldr	r6, [r6, #4]
 8005650:	e7b4      	b.n	80055bc <_malloc_r+0x4c>
 8005652:	4613      	mov	r3, r2
 8005654:	e7cc      	b.n	80055f0 <_malloc_r+0x80>
 8005656:	230c      	movs	r3, #12
 8005658:	4638      	mov	r0, r7
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	f000 f80e 	bl	800567c <__malloc_unlock>
 8005660:	e797      	b.n	8005592 <_malloc_r+0x22>
 8005662:	6025      	str	r5, [r4, #0]
 8005664:	e7dc      	b.n	8005620 <_malloc_r+0xb0>
 8005666:	605b      	str	r3, [r3, #4]
 8005668:	deff      	udf	#255	; 0xff
 800566a:	bf00      	nop
 800566c:	200003e4 	.word	0x200003e4

08005670 <__malloc_lock>:
 8005670:	4801      	ldr	r0, [pc, #4]	; (8005678 <__malloc_lock+0x8>)
 8005672:	f7ff b890 	b.w	8004796 <__retarget_lock_acquire_recursive>
 8005676:	bf00      	nop
 8005678:	200003e0 	.word	0x200003e0

0800567c <__malloc_unlock>:
 800567c:	4801      	ldr	r0, [pc, #4]	; (8005684 <__malloc_unlock+0x8>)
 800567e:	f7ff b88b 	b.w	8004798 <__retarget_lock_release_recursive>
 8005682:	bf00      	nop
 8005684:	200003e0 	.word	0x200003e0

08005688 <_Balloc>:
 8005688:	b570      	push	{r4, r5, r6, lr}
 800568a:	69c6      	ldr	r6, [r0, #28]
 800568c:	4604      	mov	r4, r0
 800568e:	460d      	mov	r5, r1
 8005690:	b976      	cbnz	r6, 80056b0 <_Balloc+0x28>
 8005692:	2010      	movs	r0, #16
 8005694:	f7ff ff44 	bl	8005520 <malloc>
 8005698:	4602      	mov	r2, r0
 800569a:	61e0      	str	r0, [r4, #28]
 800569c:	b920      	cbnz	r0, 80056a8 <_Balloc+0x20>
 800569e:	216b      	movs	r1, #107	; 0x6b
 80056a0:	4b17      	ldr	r3, [pc, #92]	; (8005700 <_Balloc+0x78>)
 80056a2:	4818      	ldr	r0, [pc, #96]	; (8005704 <_Balloc+0x7c>)
 80056a4:	f000 fda2 	bl	80061ec <__assert_func>
 80056a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056ac:	6006      	str	r6, [r0, #0]
 80056ae:	60c6      	str	r6, [r0, #12]
 80056b0:	69e6      	ldr	r6, [r4, #28]
 80056b2:	68f3      	ldr	r3, [r6, #12]
 80056b4:	b183      	cbz	r3, 80056d8 <_Balloc+0x50>
 80056b6:	69e3      	ldr	r3, [r4, #28]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80056be:	b9b8      	cbnz	r0, 80056f0 <_Balloc+0x68>
 80056c0:	2101      	movs	r1, #1
 80056c2:	fa01 f605 	lsl.w	r6, r1, r5
 80056c6:	1d72      	adds	r2, r6, #5
 80056c8:	4620      	mov	r0, r4
 80056ca:	0092      	lsls	r2, r2, #2
 80056cc:	f000 fdac 	bl	8006228 <_calloc_r>
 80056d0:	b160      	cbz	r0, 80056ec <_Balloc+0x64>
 80056d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80056d6:	e00e      	b.n	80056f6 <_Balloc+0x6e>
 80056d8:	2221      	movs	r2, #33	; 0x21
 80056da:	2104      	movs	r1, #4
 80056dc:	4620      	mov	r0, r4
 80056de:	f000 fda3 	bl	8006228 <_calloc_r>
 80056e2:	69e3      	ldr	r3, [r4, #28]
 80056e4:	60f0      	str	r0, [r6, #12]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e4      	bne.n	80056b6 <_Balloc+0x2e>
 80056ec:	2000      	movs	r0, #0
 80056ee:	bd70      	pop	{r4, r5, r6, pc}
 80056f0:	6802      	ldr	r2, [r0, #0]
 80056f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80056f6:	2300      	movs	r3, #0
 80056f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80056fc:	e7f7      	b.n	80056ee <_Balloc+0x66>
 80056fe:	bf00      	nop
 8005700:	08006945 	.word	0x08006945
 8005704:	080069c5 	.word	0x080069c5

08005708 <_Bfree>:
 8005708:	b570      	push	{r4, r5, r6, lr}
 800570a:	69c6      	ldr	r6, [r0, #28]
 800570c:	4605      	mov	r5, r0
 800570e:	460c      	mov	r4, r1
 8005710:	b976      	cbnz	r6, 8005730 <_Bfree+0x28>
 8005712:	2010      	movs	r0, #16
 8005714:	f7ff ff04 	bl	8005520 <malloc>
 8005718:	4602      	mov	r2, r0
 800571a:	61e8      	str	r0, [r5, #28]
 800571c:	b920      	cbnz	r0, 8005728 <_Bfree+0x20>
 800571e:	218f      	movs	r1, #143	; 0x8f
 8005720:	4b08      	ldr	r3, [pc, #32]	; (8005744 <_Bfree+0x3c>)
 8005722:	4809      	ldr	r0, [pc, #36]	; (8005748 <_Bfree+0x40>)
 8005724:	f000 fd62 	bl	80061ec <__assert_func>
 8005728:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800572c:	6006      	str	r6, [r0, #0]
 800572e:	60c6      	str	r6, [r0, #12]
 8005730:	b13c      	cbz	r4, 8005742 <_Bfree+0x3a>
 8005732:	69eb      	ldr	r3, [r5, #28]
 8005734:	6862      	ldr	r2, [r4, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800573c:	6021      	str	r1, [r4, #0]
 800573e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005742:	bd70      	pop	{r4, r5, r6, pc}
 8005744:	08006945 	.word	0x08006945
 8005748:	080069c5 	.word	0x080069c5

0800574c <__multadd>:
 800574c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005750:	4607      	mov	r7, r0
 8005752:	460c      	mov	r4, r1
 8005754:	461e      	mov	r6, r3
 8005756:	2000      	movs	r0, #0
 8005758:	690d      	ldr	r5, [r1, #16]
 800575a:	f101 0c14 	add.w	ip, r1, #20
 800575e:	f8dc 3000 	ldr.w	r3, [ip]
 8005762:	3001      	adds	r0, #1
 8005764:	b299      	uxth	r1, r3
 8005766:	fb02 6101 	mla	r1, r2, r1, r6
 800576a:	0c1e      	lsrs	r6, r3, #16
 800576c:	0c0b      	lsrs	r3, r1, #16
 800576e:	fb02 3306 	mla	r3, r2, r6, r3
 8005772:	b289      	uxth	r1, r1
 8005774:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005778:	4285      	cmp	r5, r0
 800577a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800577e:	f84c 1b04 	str.w	r1, [ip], #4
 8005782:	dcec      	bgt.n	800575e <__multadd+0x12>
 8005784:	b30e      	cbz	r6, 80057ca <__multadd+0x7e>
 8005786:	68a3      	ldr	r3, [r4, #8]
 8005788:	42ab      	cmp	r3, r5
 800578a:	dc19      	bgt.n	80057c0 <__multadd+0x74>
 800578c:	6861      	ldr	r1, [r4, #4]
 800578e:	4638      	mov	r0, r7
 8005790:	3101      	adds	r1, #1
 8005792:	f7ff ff79 	bl	8005688 <_Balloc>
 8005796:	4680      	mov	r8, r0
 8005798:	b928      	cbnz	r0, 80057a6 <__multadd+0x5a>
 800579a:	4602      	mov	r2, r0
 800579c:	21ba      	movs	r1, #186	; 0xba
 800579e:	4b0c      	ldr	r3, [pc, #48]	; (80057d0 <__multadd+0x84>)
 80057a0:	480c      	ldr	r0, [pc, #48]	; (80057d4 <__multadd+0x88>)
 80057a2:	f000 fd23 	bl	80061ec <__assert_func>
 80057a6:	6922      	ldr	r2, [r4, #16]
 80057a8:	f104 010c 	add.w	r1, r4, #12
 80057ac:	3202      	adds	r2, #2
 80057ae:	0092      	lsls	r2, r2, #2
 80057b0:	300c      	adds	r0, #12
 80057b2:	f000 fd0d 	bl	80061d0 <memcpy>
 80057b6:	4621      	mov	r1, r4
 80057b8:	4638      	mov	r0, r7
 80057ba:	f7ff ffa5 	bl	8005708 <_Bfree>
 80057be:	4644      	mov	r4, r8
 80057c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80057c4:	3501      	adds	r5, #1
 80057c6:	615e      	str	r6, [r3, #20]
 80057c8:	6125      	str	r5, [r4, #16]
 80057ca:	4620      	mov	r0, r4
 80057cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057d0:	080069b4 	.word	0x080069b4
 80057d4:	080069c5 	.word	0x080069c5

080057d8 <__hi0bits>:
 80057d8:	0c02      	lsrs	r2, r0, #16
 80057da:	0412      	lsls	r2, r2, #16
 80057dc:	4603      	mov	r3, r0
 80057de:	b9ca      	cbnz	r2, 8005814 <__hi0bits+0x3c>
 80057e0:	0403      	lsls	r3, r0, #16
 80057e2:	2010      	movs	r0, #16
 80057e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80057e8:	bf04      	itt	eq
 80057ea:	021b      	lsleq	r3, r3, #8
 80057ec:	3008      	addeq	r0, #8
 80057ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80057f2:	bf04      	itt	eq
 80057f4:	011b      	lsleq	r3, r3, #4
 80057f6:	3004      	addeq	r0, #4
 80057f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80057fc:	bf04      	itt	eq
 80057fe:	009b      	lsleq	r3, r3, #2
 8005800:	3002      	addeq	r0, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	db05      	blt.n	8005812 <__hi0bits+0x3a>
 8005806:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800580a:	f100 0001 	add.w	r0, r0, #1
 800580e:	bf08      	it	eq
 8005810:	2020      	moveq	r0, #32
 8005812:	4770      	bx	lr
 8005814:	2000      	movs	r0, #0
 8005816:	e7e5      	b.n	80057e4 <__hi0bits+0xc>

08005818 <__lo0bits>:
 8005818:	6803      	ldr	r3, [r0, #0]
 800581a:	4602      	mov	r2, r0
 800581c:	f013 0007 	ands.w	r0, r3, #7
 8005820:	d00b      	beq.n	800583a <__lo0bits+0x22>
 8005822:	07d9      	lsls	r1, r3, #31
 8005824:	d421      	bmi.n	800586a <__lo0bits+0x52>
 8005826:	0798      	lsls	r0, r3, #30
 8005828:	bf49      	itett	mi
 800582a:	085b      	lsrmi	r3, r3, #1
 800582c:	089b      	lsrpl	r3, r3, #2
 800582e:	2001      	movmi	r0, #1
 8005830:	6013      	strmi	r3, [r2, #0]
 8005832:	bf5c      	itt	pl
 8005834:	2002      	movpl	r0, #2
 8005836:	6013      	strpl	r3, [r2, #0]
 8005838:	4770      	bx	lr
 800583a:	b299      	uxth	r1, r3
 800583c:	b909      	cbnz	r1, 8005842 <__lo0bits+0x2a>
 800583e:	2010      	movs	r0, #16
 8005840:	0c1b      	lsrs	r3, r3, #16
 8005842:	b2d9      	uxtb	r1, r3
 8005844:	b909      	cbnz	r1, 800584a <__lo0bits+0x32>
 8005846:	3008      	adds	r0, #8
 8005848:	0a1b      	lsrs	r3, r3, #8
 800584a:	0719      	lsls	r1, r3, #28
 800584c:	bf04      	itt	eq
 800584e:	091b      	lsreq	r3, r3, #4
 8005850:	3004      	addeq	r0, #4
 8005852:	0799      	lsls	r1, r3, #30
 8005854:	bf04      	itt	eq
 8005856:	089b      	lsreq	r3, r3, #2
 8005858:	3002      	addeq	r0, #2
 800585a:	07d9      	lsls	r1, r3, #31
 800585c:	d403      	bmi.n	8005866 <__lo0bits+0x4e>
 800585e:	085b      	lsrs	r3, r3, #1
 8005860:	f100 0001 	add.w	r0, r0, #1
 8005864:	d003      	beq.n	800586e <__lo0bits+0x56>
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	4770      	bx	lr
 800586a:	2000      	movs	r0, #0
 800586c:	4770      	bx	lr
 800586e:	2020      	movs	r0, #32
 8005870:	4770      	bx	lr
	...

08005874 <__i2b>:
 8005874:	b510      	push	{r4, lr}
 8005876:	460c      	mov	r4, r1
 8005878:	2101      	movs	r1, #1
 800587a:	f7ff ff05 	bl	8005688 <_Balloc>
 800587e:	4602      	mov	r2, r0
 8005880:	b928      	cbnz	r0, 800588e <__i2b+0x1a>
 8005882:	f240 1145 	movw	r1, #325	; 0x145
 8005886:	4b04      	ldr	r3, [pc, #16]	; (8005898 <__i2b+0x24>)
 8005888:	4804      	ldr	r0, [pc, #16]	; (800589c <__i2b+0x28>)
 800588a:	f000 fcaf 	bl	80061ec <__assert_func>
 800588e:	2301      	movs	r3, #1
 8005890:	6144      	str	r4, [r0, #20]
 8005892:	6103      	str	r3, [r0, #16]
 8005894:	bd10      	pop	{r4, pc}
 8005896:	bf00      	nop
 8005898:	080069b4 	.word	0x080069b4
 800589c:	080069c5 	.word	0x080069c5

080058a0 <__multiply>:
 80058a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a4:	4691      	mov	r9, r2
 80058a6:	690a      	ldr	r2, [r1, #16]
 80058a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80058ac:	460c      	mov	r4, r1
 80058ae:	429a      	cmp	r2, r3
 80058b0:	bfbe      	ittt	lt
 80058b2:	460b      	movlt	r3, r1
 80058b4:	464c      	movlt	r4, r9
 80058b6:	4699      	movlt	r9, r3
 80058b8:	6927      	ldr	r7, [r4, #16]
 80058ba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80058be:	68a3      	ldr	r3, [r4, #8]
 80058c0:	6861      	ldr	r1, [r4, #4]
 80058c2:	eb07 060a 	add.w	r6, r7, sl
 80058c6:	42b3      	cmp	r3, r6
 80058c8:	b085      	sub	sp, #20
 80058ca:	bfb8      	it	lt
 80058cc:	3101      	addlt	r1, #1
 80058ce:	f7ff fedb 	bl	8005688 <_Balloc>
 80058d2:	b930      	cbnz	r0, 80058e2 <__multiply+0x42>
 80058d4:	4602      	mov	r2, r0
 80058d6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80058da:	4b43      	ldr	r3, [pc, #268]	; (80059e8 <__multiply+0x148>)
 80058dc:	4843      	ldr	r0, [pc, #268]	; (80059ec <__multiply+0x14c>)
 80058de:	f000 fc85 	bl	80061ec <__assert_func>
 80058e2:	f100 0514 	add.w	r5, r0, #20
 80058e6:	462b      	mov	r3, r5
 80058e8:	2200      	movs	r2, #0
 80058ea:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80058ee:	4543      	cmp	r3, r8
 80058f0:	d321      	bcc.n	8005936 <__multiply+0x96>
 80058f2:	f104 0314 	add.w	r3, r4, #20
 80058f6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80058fa:	f109 0314 	add.w	r3, r9, #20
 80058fe:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005902:	9202      	str	r2, [sp, #8]
 8005904:	1b3a      	subs	r2, r7, r4
 8005906:	3a15      	subs	r2, #21
 8005908:	f022 0203 	bic.w	r2, r2, #3
 800590c:	3204      	adds	r2, #4
 800590e:	f104 0115 	add.w	r1, r4, #21
 8005912:	428f      	cmp	r7, r1
 8005914:	bf38      	it	cc
 8005916:	2204      	movcc	r2, #4
 8005918:	9201      	str	r2, [sp, #4]
 800591a:	9a02      	ldr	r2, [sp, #8]
 800591c:	9303      	str	r3, [sp, #12]
 800591e:	429a      	cmp	r2, r3
 8005920:	d80c      	bhi.n	800593c <__multiply+0x9c>
 8005922:	2e00      	cmp	r6, #0
 8005924:	dd03      	ble.n	800592e <__multiply+0x8e>
 8005926:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800592a:	2b00      	cmp	r3, #0
 800592c:	d05a      	beq.n	80059e4 <__multiply+0x144>
 800592e:	6106      	str	r6, [r0, #16]
 8005930:	b005      	add	sp, #20
 8005932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005936:	f843 2b04 	str.w	r2, [r3], #4
 800593a:	e7d8      	b.n	80058ee <__multiply+0x4e>
 800593c:	f8b3 a000 	ldrh.w	sl, [r3]
 8005940:	f1ba 0f00 	cmp.w	sl, #0
 8005944:	d023      	beq.n	800598e <__multiply+0xee>
 8005946:	46a9      	mov	r9, r5
 8005948:	f04f 0c00 	mov.w	ip, #0
 800594c:	f104 0e14 	add.w	lr, r4, #20
 8005950:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005954:	f8d9 1000 	ldr.w	r1, [r9]
 8005958:	fa1f fb82 	uxth.w	fp, r2
 800595c:	b289      	uxth	r1, r1
 800595e:	fb0a 110b 	mla	r1, sl, fp, r1
 8005962:	4461      	add	r1, ip
 8005964:	f8d9 c000 	ldr.w	ip, [r9]
 8005968:	0c12      	lsrs	r2, r2, #16
 800596a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800596e:	fb0a c202 	mla	r2, sl, r2, ip
 8005972:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005976:	b289      	uxth	r1, r1
 8005978:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800597c:	4577      	cmp	r7, lr
 800597e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005982:	f849 1b04 	str.w	r1, [r9], #4
 8005986:	d8e3      	bhi.n	8005950 <__multiply+0xb0>
 8005988:	9a01      	ldr	r2, [sp, #4]
 800598a:	f845 c002 	str.w	ip, [r5, r2]
 800598e:	9a03      	ldr	r2, [sp, #12]
 8005990:	3304      	adds	r3, #4
 8005992:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005996:	f1b9 0f00 	cmp.w	r9, #0
 800599a:	d021      	beq.n	80059e0 <__multiply+0x140>
 800599c:	46ae      	mov	lr, r5
 800599e:	f04f 0a00 	mov.w	sl, #0
 80059a2:	6829      	ldr	r1, [r5, #0]
 80059a4:	f104 0c14 	add.w	ip, r4, #20
 80059a8:	f8bc b000 	ldrh.w	fp, [ip]
 80059ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80059b0:	b289      	uxth	r1, r1
 80059b2:	fb09 220b 	mla	r2, r9, fp, r2
 80059b6:	4452      	add	r2, sl
 80059b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80059bc:	f84e 1b04 	str.w	r1, [lr], #4
 80059c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80059c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80059c8:	f8be 1000 	ldrh.w	r1, [lr]
 80059cc:	4567      	cmp	r7, ip
 80059ce:	fb09 110a 	mla	r1, r9, sl, r1
 80059d2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80059d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80059da:	d8e5      	bhi.n	80059a8 <__multiply+0x108>
 80059dc:	9a01      	ldr	r2, [sp, #4]
 80059de:	50a9      	str	r1, [r5, r2]
 80059e0:	3504      	adds	r5, #4
 80059e2:	e79a      	b.n	800591a <__multiply+0x7a>
 80059e4:	3e01      	subs	r6, #1
 80059e6:	e79c      	b.n	8005922 <__multiply+0x82>
 80059e8:	080069b4 	.word	0x080069b4
 80059ec:	080069c5 	.word	0x080069c5

080059f0 <__pow5mult>:
 80059f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059f4:	4615      	mov	r5, r2
 80059f6:	f012 0203 	ands.w	r2, r2, #3
 80059fa:	4606      	mov	r6, r0
 80059fc:	460f      	mov	r7, r1
 80059fe:	d007      	beq.n	8005a10 <__pow5mult+0x20>
 8005a00:	4c25      	ldr	r4, [pc, #148]	; (8005a98 <__pow5mult+0xa8>)
 8005a02:	3a01      	subs	r2, #1
 8005a04:	2300      	movs	r3, #0
 8005a06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a0a:	f7ff fe9f 	bl	800574c <__multadd>
 8005a0e:	4607      	mov	r7, r0
 8005a10:	10ad      	asrs	r5, r5, #2
 8005a12:	d03d      	beq.n	8005a90 <__pow5mult+0xa0>
 8005a14:	69f4      	ldr	r4, [r6, #28]
 8005a16:	b97c      	cbnz	r4, 8005a38 <__pow5mult+0x48>
 8005a18:	2010      	movs	r0, #16
 8005a1a:	f7ff fd81 	bl	8005520 <malloc>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	61f0      	str	r0, [r6, #28]
 8005a22:	b928      	cbnz	r0, 8005a30 <__pow5mult+0x40>
 8005a24:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005a28:	4b1c      	ldr	r3, [pc, #112]	; (8005a9c <__pow5mult+0xac>)
 8005a2a:	481d      	ldr	r0, [pc, #116]	; (8005aa0 <__pow5mult+0xb0>)
 8005a2c:	f000 fbde 	bl	80061ec <__assert_func>
 8005a30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a34:	6004      	str	r4, [r0, #0]
 8005a36:	60c4      	str	r4, [r0, #12]
 8005a38:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005a3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a40:	b94c      	cbnz	r4, 8005a56 <__pow5mult+0x66>
 8005a42:	f240 2171 	movw	r1, #625	; 0x271
 8005a46:	4630      	mov	r0, r6
 8005a48:	f7ff ff14 	bl	8005874 <__i2b>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	4604      	mov	r4, r0
 8005a50:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a54:	6003      	str	r3, [r0, #0]
 8005a56:	f04f 0900 	mov.w	r9, #0
 8005a5a:	07eb      	lsls	r3, r5, #31
 8005a5c:	d50a      	bpl.n	8005a74 <__pow5mult+0x84>
 8005a5e:	4639      	mov	r1, r7
 8005a60:	4622      	mov	r2, r4
 8005a62:	4630      	mov	r0, r6
 8005a64:	f7ff ff1c 	bl	80058a0 <__multiply>
 8005a68:	4680      	mov	r8, r0
 8005a6a:	4639      	mov	r1, r7
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	f7ff fe4b 	bl	8005708 <_Bfree>
 8005a72:	4647      	mov	r7, r8
 8005a74:	106d      	asrs	r5, r5, #1
 8005a76:	d00b      	beq.n	8005a90 <__pow5mult+0xa0>
 8005a78:	6820      	ldr	r0, [r4, #0]
 8005a7a:	b938      	cbnz	r0, 8005a8c <__pow5mult+0x9c>
 8005a7c:	4622      	mov	r2, r4
 8005a7e:	4621      	mov	r1, r4
 8005a80:	4630      	mov	r0, r6
 8005a82:	f7ff ff0d 	bl	80058a0 <__multiply>
 8005a86:	6020      	str	r0, [r4, #0]
 8005a88:	f8c0 9000 	str.w	r9, [r0]
 8005a8c:	4604      	mov	r4, r0
 8005a8e:	e7e4      	b.n	8005a5a <__pow5mult+0x6a>
 8005a90:	4638      	mov	r0, r7
 8005a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a96:	bf00      	nop
 8005a98:	08006b10 	.word	0x08006b10
 8005a9c:	08006945 	.word	0x08006945
 8005aa0:	080069c5 	.word	0x080069c5

08005aa4 <__lshift>:
 8005aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa8:	460c      	mov	r4, r1
 8005aaa:	4607      	mov	r7, r0
 8005aac:	4691      	mov	r9, r2
 8005aae:	6923      	ldr	r3, [r4, #16]
 8005ab0:	6849      	ldr	r1, [r1, #4]
 8005ab2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ab6:	68a3      	ldr	r3, [r4, #8]
 8005ab8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005abc:	f108 0601 	add.w	r6, r8, #1
 8005ac0:	42b3      	cmp	r3, r6
 8005ac2:	db0b      	blt.n	8005adc <__lshift+0x38>
 8005ac4:	4638      	mov	r0, r7
 8005ac6:	f7ff fddf 	bl	8005688 <_Balloc>
 8005aca:	4605      	mov	r5, r0
 8005acc:	b948      	cbnz	r0, 8005ae2 <__lshift+0x3e>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005ad4:	4b27      	ldr	r3, [pc, #156]	; (8005b74 <__lshift+0xd0>)
 8005ad6:	4828      	ldr	r0, [pc, #160]	; (8005b78 <__lshift+0xd4>)
 8005ad8:	f000 fb88 	bl	80061ec <__assert_func>
 8005adc:	3101      	adds	r1, #1
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	e7ee      	b.n	8005ac0 <__lshift+0x1c>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f100 0114 	add.w	r1, r0, #20
 8005ae8:	f100 0210 	add.w	r2, r0, #16
 8005aec:	4618      	mov	r0, r3
 8005aee:	4553      	cmp	r3, sl
 8005af0:	db33      	blt.n	8005b5a <__lshift+0xb6>
 8005af2:	6920      	ldr	r0, [r4, #16]
 8005af4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005af8:	f104 0314 	add.w	r3, r4, #20
 8005afc:	f019 091f 	ands.w	r9, r9, #31
 8005b00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b08:	d02b      	beq.n	8005b62 <__lshift+0xbe>
 8005b0a:	468a      	mov	sl, r1
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f1c9 0e20 	rsb	lr, r9, #32
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	fa00 f009 	lsl.w	r0, r0, r9
 8005b18:	4310      	orrs	r0, r2
 8005b1a:	f84a 0b04 	str.w	r0, [sl], #4
 8005b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b22:	459c      	cmp	ip, r3
 8005b24:	fa22 f20e 	lsr.w	r2, r2, lr
 8005b28:	d8f3      	bhi.n	8005b12 <__lshift+0x6e>
 8005b2a:	ebac 0304 	sub.w	r3, ip, r4
 8005b2e:	3b15      	subs	r3, #21
 8005b30:	f023 0303 	bic.w	r3, r3, #3
 8005b34:	3304      	adds	r3, #4
 8005b36:	f104 0015 	add.w	r0, r4, #21
 8005b3a:	4584      	cmp	ip, r0
 8005b3c:	bf38      	it	cc
 8005b3e:	2304      	movcc	r3, #4
 8005b40:	50ca      	str	r2, [r1, r3]
 8005b42:	b10a      	cbz	r2, 8005b48 <__lshift+0xa4>
 8005b44:	f108 0602 	add.w	r6, r8, #2
 8005b48:	3e01      	subs	r6, #1
 8005b4a:	4638      	mov	r0, r7
 8005b4c:	4621      	mov	r1, r4
 8005b4e:	612e      	str	r6, [r5, #16]
 8005b50:	f7ff fdda 	bl	8005708 <_Bfree>
 8005b54:	4628      	mov	r0, r5
 8005b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b5e:	3301      	adds	r3, #1
 8005b60:	e7c5      	b.n	8005aee <__lshift+0x4a>
 8005b62:	3904      	subs	r1, #4
 8005b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b68:	459c      	cmp	ip, r3
 8005b6a:	f841 2f04 	str.w	r2, [r1, #4]!
 8005b6e:	d8f9      	bhi.n	8005b64 <__lshift+0xc0>
 8005b70:	e7ea      	b.n	8005b48 <__lshift+0xa4>
 8005b72:	bf00      	nop
 8005b74:	080069b4 	.word	0x080069b4
 8005b78:	080069c5 	.word	0x080069c5

08005b7c <__mcmp>:
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	690a      	ldr	r2, [r1, #16]
 8005b80:	6900      	ldr	r0, [r0, #16]
 8005b82:	b530      	push	{r4, r5, lr}
 8005b84:	1a80      	subs	r0, r0, r2
 8005b86:	d10d      	bne.n	8005ba4 <__mcmp+0x28>
 8005b88:	3314      	adds	r3, #20
 8005b8a:	3114      	adds	r1, #20
 8005b8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005b90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005b94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005b98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005b9c:	4295      	cmp	r5, r2
 8005b9e:	d002      	beq.n	8005ba6 <__mcmp+0x2a>
 8005ba0:	d304      	bcc.n	8005bac <__mcmp+0x30>
 8005ba2:	2001      	movs	r0, #1
 8005ba4:	bd30      	pop	{r4, r5, pc}
 8005ba6:	42a3      	cmp	r3, r4
 8005ba8:	d3f4      	bcc.n	8005b94 <__mcmp+0x18>
 8005baa:	e7fb      	b.n	8005ba4 <__mcmp+0x28>
 8005bac:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb0:	e7f8      	b.n	8005ba4 <__mcmp+0x28>
	...

08005bb4 <__mdiff>:
 8005bb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb8:	460d      	mov	r5, r1
 8005bba:	4607      	mov	r7, r0
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	4614      	mov	r4, r2
 8005bc2:	f7ff ffdb 	bl	8005b7c <__mcmp>
 8005bc6:	1e06      	subs	r6, r0, #0
 8005bc8:	d111      	bne.n	8005bee <__mdiff+0x3a>
 8005bca:	4631      	mov	r1, r6
 8005bcc:	4638      	mov	r0, r7
 8005bce:	f7ff fd5b 	bl	8005688 <_Balloc>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	b928      	cbnz	r0, 8005be2 <__mdiff+0x2e>
 8005bd6:	f240 2137 	movw	r1, #567	; 0x237
 8005bda:	4b3a      	ldr	r3, [pc, #232]	; (8005cc4 <__mdiff+0x110>)
 8005bdc:	483a      	ldr	r0, [pc, #232]	; (8005cc8 <__mdiff+0x114>)
 8005bde:	f000 fb05 	bl	80061ec <__assert_func>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005be8:	4610      	mov	r0, r2
 8005bea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bee:	bfa4      	itt	ge
 8005bf0:	4623      	movge	r3, r4
 8005bf2:	462c      	movge	r4, r5
 8005bf4:	4638      	mov	r0, r7
 8005bf6:	6861      	ldr	r1, [r4, #4]
 8005bf8:	bfa6      	itte	ge
 8005bfa:	461d      	movge	r5, r3
 8005bfc:	2600      	movge	r6, #0
 8005bfe:	2601      	movlt	r6, #1
 8005c00:	f7ff fd42 	bl	8005688 <_Balloc>
 8005c04:	4602      	mov	r2, r0
 8005c06:	b918      	cbnz	r0, 8005c10 <__mdiff+0x5c>
 8005c08:	f240 2145 	movw	r1, #581	; 0x245
 8005c0c:	4b2d      	ldr	r3, [pc, #180]	; (8005cc4 <__mdiff+0x110>)
 8005c0e:	e7e5      	b.n	8005bdc <__mdiff+0x28>
 8005c10:	f102 0814 	add.w	r8, r2, #20
 8005c14:	46c2      	mov	sl, r8
 8005c16:	f04f 0c00 	mov.w	ip, #0
 8005c1a:	6927      	ldr	r7, [r4, #16]
 8005c1c:	60c6      	str	r6, [r0, #12]
 8005c1e:	692e      	ldr	r6, [r5, #16]
 8005c20:	f104 0014 	add.w	r0, r4, #20
 8005c24:	f105 0914 	add.w	r9, r5, #20
 8005c28:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005c2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005c30:	3410      	adds	r4, #16
 8005c32:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005c36:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c3a:	fa1f f18b 	uxth.w	r1, fp
 8005c3e:	4461      	add	r1, ip
 8005c40:	fa1f fc83 	uxth.w	ip, r3
 8005c44:	0c1b      	lsrs	r3, r3, #16
 8005c46:	eba1 010c 	sub.w	r1, r1, ip
 8005c4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005c4e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005c52:	b289      	uxth	r1, r1
 8005c54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005c58:	454e      	cmp	r6, r9
 8005c5a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005c5e:	f84a 1b04 	str.w	r1, [sl], #4
 8005c62:	d8e6      	bhi.n	8005c32 <__mdiff+0x7e>
 8005c64:	1b73      	subs	r3, r6, r5
 8005c66:	3b15      	subs	r3, #21
 8005c68:	f023 0303 	bic.w	r3, r3, #3
 8005c6c:	3515      	adds	r5, #21
 8005c6e:	3304      	adds	r3, #4
 8005c70:	42ae      	cmp	r6, r5
 8005c72:	bf38      	it	cc
 8005c74:	2304      	movcc	r3, #4
 8005c76:	4418      	add	r0, r3
 8005c78:	4443      	add	r3, r8
 8005c7a:	461e      	mov	r6, r3
 8005c7c:	4605      	mov	r5, r0
 8005c7e:	4575      	cmp	r5, lr
 8005c80:	d30e      	bcc.n	8005ca0 <__mdiff+0xec>
 8005c82:	f10e 0103 	add.w	r1, lr, #3
 8005c86:	1a09      	subs	r1, r1, r0
 8005c88:	f021 0103 	bic.w	r1, r1, #3
 8005c8c:	3803      	subs	r0, #3
 8005c8e:	4586      	cmp	lr, r0
 8005c90:	bf38      	it	cc
 8005c92:	2100      	movcc	r1, #0
 8005c94:	440b      	add	r3, r1
 8005c96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005c9a:	b189      	cbz	r1, 8005cc0 <__mdiff+0x10c>
 8005c9c:	6117      	str	r7, [r2, #16]
 8005c9e:	e7a3      	b.n	8005be8 <__mdiff+0x34>
 8005ca0:	f855 8b04 	ldr.w	r8, [r5], #4
 8005ca4:	fa1f f188 	uxth.w	r1, r8
 8005ca8:	4461      	add	r1, ip
 8005caa:	140c      	asrs	r4, r1, #16
 8005cac:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005cb0:	b289      	uxth	r1, r1
 8005cb2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005cb6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005cba:	f846 1b04 	str.w	r1, [r6], #4
 8005cbe:	e7de      	b.n	8005c7e <__mdiff+0xca>
 8005cc0:	3f01      	subs	r7, #1
 8005cc2:	e7e8      	b.n	8005c96 <__mdiff+0xe2>
 8005cc4:	080069b4 	.word	0x080069b4
 8005cc8:	080069c5 	.word	0x080069c5

08005ccc <__d2b>:
 8005ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cce:	2101      	movs	r1, #1
 8005cd0:	4617      	mov	r7, r2
 8005cd2:	461c      	mov	r4, r3
 8005cd4:	9e08      	ldr	r6, [sp, #32]
 8005cd6:	f7ff fcd7 	bl	8005688 <_Balloc>
 8005cda:	4605      	mov	r5, r0
 8005cdc:	b930      	cbnz	r0, 8005cec <__d2b+0x20>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	f240 310f 	movw	r1, #783	; 0x30f
 8005ce4:	4b22      	ldr	r3, [pc, #136]	; (8005d70 <__d2b+0xa4>)
 8005ce6:	4823      	ldr	r0, [pc, #140]	; (8005d74 <__d2b+0xa8>)
 8005ce8:	f000 fa80 	bl	80061ec <__assert_func>
 8005cec:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005cf0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005cf4:	bb24      	cbnz	r4, 8005d40 <__d2b+0x74>
 8005cf6:	2f00      	cmp	r7, #0
 8005cf8:	9301      	str	r3, [sp, #4]
 8005cfa:	d026      	beq.n	8005d4a <__d2b+0x7e>
 8005cfc:	4668      	mov	r0, sp
 8005cfe:	9700      	str	r7, [sp, #0]
 8005d00:	f7ff fd8a 	bl	8005818 <__lo0bits>
 8005d04:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005d08:	b1e8      	cbz	r0, 8005d46 <__d2b+0x7a>
 8005d0a:	f1c0 0320 	rsb	r3, r0, #32
 8005d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d12:	430b      	orrs	r3, r1
 8005d14:	40c2      	lsrs	r2, r0
 8005d16:	616b      	str	r3, [r5, #20]
 8005d18:	9201      	str	r2, [sp, #4]
 8005d1a:	9b01      	ldr	r3, [sp, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	bf14      	ite	ne
 8005d20:	2102      	movne	r1, #2
 8005d22:	2101      	moveq	r1, #1
 8005d24:	61ab      	str	r3, [r5, #24]
 8005d26:	6129      	str	r1, [r5, #16]
 8005d28:	b1bc      	cbz	r4, 8005d5a <__d2b+0x8e>
 8005d2a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005d2e:	4404      	add	r4, r0
 8005d30:	6034      	str	r4, [r6, #0]
 8005d32:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d38:	6018      	str	r0, [r3, #0]
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	b003      	add	sp, #12
 8005d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d44:	e7d7      	b.n	8005cf6 <__d2b+0x2a>
 8005d46:	6169      	str	r1, [r5, #20]
 8005d48:	e7e7      	b.n	8005d1a <__d2b+0x4e>
 8005d4a:	a801      	add	r0, sp, #4
 8005d4c:	f7ff fd64 	bl	8005818 <__lo0bits>
 8005d50:	9b01      	ldr	r3, [sp, #4]
 8005d52:	2101      	movs	r1, #1
 8005d54:	616b      	str	r3, [r5, #20]
 8005d56:	3020      	adds	r0, #32
 8005d58:	e7e5      	b.n	8005d26 <__d2b+0x5a>
 8005d5a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005d5e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8005d62:	6030      	str	r0, [r6, #0]
 8005d64:	6918      	ldr	r0, [r3, #16]
 8005d66:	f7ff fd37 	bl	80057d8 <__hi0bits>
 8005d6a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005d6e:	e7e2      	b.n	8005d36 <__d2b+0x6a>
 8005d70:	080069b4 	.word	0x080069b4
 8005d74:	080069c5 	.word	0x080069c5

08005d78 <__ssputs_r>:
 8005d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d7c:	461f      	mov	r7, r3
 8005d7e:	688e      	ldr	r6, [r1, #8]
 8005d80:	4682      	mov	sl, r0
 8005d82:	42be      	cmp	r6, r7
 8005d84:	460c      	mov	r4, r1
 8005d86:	4690      	mov	r8, r2
 8005d88:	680b      	ldr	r3, [r1, #0]
 8005d8a:	d82c      	bhi.n	8005de6 <__ssputs_r+0x6e>
 8005d8c:	898a      	ldrh	r2, [r1, #12]
 8005d8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d92:	d026      	beq.n	8005de2 <__ssputs_r+0x6a>
 8005d94:	6965      	ldr	r5, [r4, #20]
 8005d96:	6909      	ldr	r1, [r1, #16]
 8005d98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d9c:	eba3 0901 	sub.w	r9, r3, r1
 8005da0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005da4:	1c7b      	adds	r3, r7, #1
 8005da6:	444b      	add	r3, r9
 8005da8:	106d      	asrs	r5, r5, #1
 8005daa:	429d      	cmp	r5, r3
 8005dac:	bf38      	it	cc
 8005dae:	461d      	movcc	r5, r3
 8005db0:	0553      	lsls	r3, r2, #21
 8005db2:	d527      	bpl.n	8005e04 <__ssputs_r+0x8c>
 8005db4:	4629      	mov	r1, r5
 8005db6:	f7ff fbdb 	bl	8005570 <_malloc_r>
 8005dba:	4606      	mov	r6, r0
 8005dbc:	b360      	cbz	r0, 8005e18 <__ssputs_r+0xa0>
 8005dbe:	464a      	mov	r2, r9
 8005dc0:	6921      	ldr	r1, [r4, #16]
 8005dc2:	f000 fa05 	bl	80061d0 <memcpy>
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd0:	81a3      	strh	r3, [r4, #12]
 8005dd2:	6126      	str	r6, [r4, #16]
 8005dd4:	444e      	add	r6, r9
 8005dd6:	6026      	str	r6, [r4, #0]
 8005dd8:	463e      	mov	r6, r7
 8005dda:	6165      	str	r5, [r4, #20]
 8005ddc:	eba5 0509 	sub.w	r5, r5, r9
 8005de0:	60a5      	str	r5, [r4, #8]
 8005de2:	42be      	cmp	r6, r7
 8005de4:	d900      	bls.n	8005de8 <__ssputs_r+0x70>
 8005de6:	463e      	mov	r6, r7
 8005de8:	4632      	mov	r2, r6
 8005dea:	4641      	mov	r1, r8
 8005dec:	6820      	ldr	r0, [r4, #0]
 8005dee:	f000 f9c5 	bl	800617c <memmove>
 8005df2:	2000      	movs	r0, #0
 8005df4:	68a3      	ldr	r3, [r4, #8]
 8005df6:	1b9b      	subs	r3, r3, r6
 8005df8:	60a3      	str	r3, [r4, #8]
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	4433      	add	r3, r6
 8005dfe:	6023      	str	r3, [r4, #0]
 8005e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e04:	462a      	mov	r2, r5
 8005e06:	f000 fa35 	bl	8006274 <_realloc_r>
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	d1e0      	bne.n	8005dd2 <__ssputs_r+0x5a>
 8005e10:	4650      	mov	r0, sl
 8005e12:	6921      	ldr	r1, [r4, #16]
 8005e14:	f7ff fb3c 	bl	8005490 <_free_r>
 8005e18:	230c      	movs	r3, #12
 8005e1a:	f8ca 3000 	str.w	r3, [sl]
 8005e1e:	89a3      	ldrh	r3, [r4, #12]
 8005e20:	f04f 30ff 	mov.w	r0, #4294967295
 8005e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e28:	81a3      	strh	r3, [r4, #12]
 8005e2a:	e7e9      	b.n	8005e00 <__ssputs_r+0x88>

08005e2c <_svfiprintf_r>:
 8005e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e30:	4698      	mov	r8, r3
 8005e32:	898b      	ldrh	r3, [r1, #12]
 8005e34:	4607      	mov	r7, r0
 8005e36:	061b      	lsls	r3, r3, #24
 8005e38:	460d      	mov	r5, r1
 8005e3a:	4614      	mov	r4, r2
 8005e3c:	b09d      	sub	sp, #116	; 0x74
 8005e3e:	d50e      	bpl.n	8005e5e <_svfiprintf_r+0x32>
 8005e40:	690b      	ldr	r3, [r1, #16]
 8005e42:	b963      	cbnz	r3, 8005e5e <_svfiprintf_r+0x32>
 8005e44:	2140      	movs	r1, #64	; 0x40
 8005e46:	f7ff fb93 	bl	8005570 <_malloc_r>
 8005e4a:	6028      	str	r0, [r5, #0]
 8005e4c:	6128      	str	r0, [r5, #16]
 8005e4e:	b920      	cbnz	r0, 8005e5a <_svfiprintf_r+0x2e>
 8005e50:	230c      	movs	r3, #12
 8005e52:	603b      	str	r3, [r7, #0]
 8005e54:	f04f 30ff 	mov.w	r0, #4294967295
 8005e58:	e0d0      	b.n	8005ffc <_svfiprintf_r+0x1d0>
 8005e5a:	2340      	movs	r3, #64	; 0x40
 8005e5c:	616b      	str	r3, [r5, #20]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	9309      	str	r3, [sp, #36]	; 0x24
 8005e62:	2320      	movs	r3, #32
 8005e64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e68:	2330      	movs	r3, #48	; 0x30
 8005e6a:	f04f 0901 	mov.w	r9, #1
 8005e6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e72:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006014 <_svfiprintf_r+0x1e8>
 8005e76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e7a:	4623      	mov	r3, r4
 8005e7c:	469a      	mov	sl, r3
 8005e7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e82:	b10a      	cbz	r2, 8005e88 <_svfiprintf_r+0x5c>
 8005e84:	2a25      	cmp	r2, #37	; 0x25
 8005e86:	d1f9      	bne.n	8005e7c <_svfiprintf_r+0x50>
 8005e88:	ebba 0b04 	subs.w	fp, sl, r4
 8005e8c:	d00b      	beq.n	8005ea6 <_svfiprintf_r+0x7a>
 8005e8e:	465b      	mov	r3, fp
 8005e90:	4622      	mov	r2, r4
 8005e92:	4629      	mov	r1, r5
 8005e94:	4638      	mov	r0, r7
 8005e96:	f7ff ff6f 	bl	8005d78 <__ssputs_r>
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	f000 80a9 	beq.w	8005ff2 <_svfiprintf_r+0x1c6>
 8005ea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ea2:	445a      	add	r2, fp
 8005ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 80a1 	beq.w	8005ff2 <_svfiprintf_r+0x1c6>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eba:	f10a 0a01 	add.w	sl, sl, #1
 8005ebe:	9304      	str	r3, [sp, #16]
 8005ec0:	9307      	str	r3, [sp, #28]
 8005ec2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ec6:	931a      	str	r3, [sp, #104]	; 0x68
 8005ec8:	4654      	mov	r4, sl
 8005eca:	2205      	movs	r2, #5
 8005ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ed0:	4850      	ldr	r0, [pc, #320]	; (8006014 <_svfiprintf_r+0x1e8>)
 8005ed2:	f7fe fc62 	bl	800479a <memchr>
 8005ed6:	9a04      	ldr	r2, [sp, #16]
 8005ed8:	b9d8      	cbnz	r0, 8005f12 <_svfiprintf_r+0xe6>
 8005eda:	06d0      	lsls	r0, r2, #27
 8005edc:	bf44      	itt	mi
 8005ede:	2320      	movmi	r3, #32
 8005ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ee4:	0711      	lsls	r1, r2, #28
 8005ee6:	bf44      	itt	mi
 8005ee8:	232b      	movmi	r3, #43	; 0x2b
 8005eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eee:	f89a 3000 	ldrb.w	r3, [sl]
 8005ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ef4:	d015      	beq.n	8005f22 <_svfiprintf_r+0xf6>
 8005ef6:	4654      	mov	r4, sl
 8005ef8:	2000      	movs	r0, #0
 8005efa:	f04f 0c0a 	mov.w	ip, #10
 8005efe:	9a07      	ldr	r2, [sp, #28]
 8005f00:	4621      	mov	r1, r4
 8005f02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f06:	3b30      	subs	r3, #48	; 0x30
 8005f08:	2b09      	cmp	r3, #9
 8005f0a:	d94d      	bls.n	8005fa8 <_svfiprintf_r+0x17c>
 8005f0c:	b1b0      	cbz	r0, 8005f3c <_svfiprintf_r+0x110>
 8005f0e:	9207      	str	r2, [sp, #28]
 8005f10:	e014      	b.n	8005f3c <_svfiprintf_r+0x110>
 8005f12:	eba0 0308 	sub.w	r3, r0, r8
 8005f16:	fa09 f303 	lsl.w	r3, r9, r3
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	46a2      	mov	sl, r4
 8005f1e:	9304      	str	r3, [sp, #16]
 8005f20:	e7d2      	b.n	8005ec8 <_svfiprintf_r+0x9c>
 8005f22:	9b03      	ldr	r3, [sp, #12]
 8005f24:	1d19      	adds	r1, r3, #4
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	9103      	str	r1, [sp, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	bfbb      	ittet	lt
 8005f2e:	425b      	neglt	r3, r3
 8005f30:	f042 0202 	orrlt.w	r2, r2, #2
 8005f34:	9307      	strge	r3, [sp, #28]
 8005f36:	9307      	strlt	r3, [sp, #28]
 8005f38:	bfb8      	it	lt
 8005f3a:	9204      	strlt	r2, [sp, #16]
 8005f3c:	7823      	ldrb	r3, [r4, #0]
 8005f3e:	2b2e      	cmp	r3, #46	; 0x2e
 8005f40:	d10c      	bne.n	8005f5c <_svfiprintf_r+0x130>
 8005f42:	7863      	ldrb	r3, [r4, #1]
 8005f44:	2b2a      	cmp	r3, #42	; 0x2a
 8005f46:	d134      	bne.n	8005fb2 <_svfiprintf_r+0x186>
 8005f48:	9b03      	ldr	r3, [sp, #12]
 8005f4a:	3402      	adds	r4, #2
 8005f4c:	1d1a      	adds	r2, r3, #4
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	9203      	str	r2, [sp, #12]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	bfb8      	it	lt
 8005f56:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f5a:	9305      	str	r3, [sp, #20]
 8005f5c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006018 <_svfiprintf_r+0x1ec>
 8005f60:	2203      	movs	r2, #3
 8005f62:	4650      	mov	r0, sl
 8005f64:	7821      	ldrb	r1, [r4, #0]
 8005f66:	f7fe fc18 	bl	800479a <memchr>
 8005f6a:	b138      	cbz	r0, 8005f7c <_svfiprintf_r+0x150>
 8005f6c:	2240      	movs	r2, #64	; 0x40
 8005f6e:	9b04      	ldr	r3, [sp, #16]
 8005f70:	eba0 000a 	sub.w	r0, r0, sl
 8005f74:	4082      	lsls	r2, r0
 8005f76:	4313      	orrs	r3, r2
 8005f78:	3401      	adds	r4, #1
 8005f7a:	9304      	str	r3, [sp, #16]
 8005f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f80:	2206      	movs	r2, #6
 8005f82:	4826      	ldr	r0, [pc, #152]	; (800601c <_svfiprintf_r+0x1f0>)
 8005f84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f88:	f7fe fc07 	bl	800479a <memchr>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	d038      	beq.n	8006002 <_svfiprintf_r+0x1d6>
 8005f90:	4b23      	ldr	r3, [pc, #140]	; (8006020 <_svfiprintf_r+0x1f4>)
 8005f92:	bb1b      	cbnz	r3, 8005fdc <_svfiprintf_r+0x1b0>
 8005f94:	9b03      	ldr	r3, [sp, #12]
 8005f96:	3307      	adds	r3, #7
 8005f98:	f023 0307 	bic.w	r3, r3, #7
 8005f9c:	3308      	adds	r3, #8
 8005f9e:	9303      	str	r3, [sp, #12]
 8005fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa2:	4433      	add	r3, r6
 8005fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa6:	e768      	b.n	8005e7a <_svfiprintf_r+0x4e>
 8005fa8:	460c      	mov	r4, r1
 8005faa:	2001      	movs	r0, #1
 8005fac:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fb0:	e7a6      	b.n	8005f00 <_svfiprintf_r+0xd4>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f04f 0c0a 	mov.w	ip, #10
 8005fb8:	4619      	mov	r1, r3
 8005fba:	3401      	adds	r4, #1
 8005fbc:	9305      	str	r3, [sp, #20]
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fc4:	3a30      	subs	r2, #48	; 0x30
 8005fc6:	2a09      	cmp	r2, #9
 8005fc8:	d903      	bls.n	8005fd2 <_svfiprintf_r+0x1a6>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0c6      	beq.n	8005f5c <_svfiprintf_r+0x130>
 8005fce:	9105      	str	r1, [sp, #20]
 8005fd0:	e7c4      	b.n	8005f5c <_svfiprintf_r+0x130>
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fda:	e7f0      	b.n	8005fbe <_svfiprintf_r+0x192>
 8005fdc:	ab03      	add	r3, sp, #12
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	462a      	mov	r2, r5
 8005fe2:	4638      	mov	r0, r7
 8005fe4:	4b0f      	ldr	r3, [pc, #60]	; (8006024 <_svfiprintf_r+0x1f8>)
 8005fe6:	a904      	add	r1, sp, #16
 8005fe8:	f7fd fe5c 	bl	8003ca4 <_printf_float>
 8005fec:	1c42      	adds	r2, r0, #1
 8005fee:	4606      	mov	r6, r0
 8005ff0:	d1d6      	bne.n	8005fa0 <_svfiprintf_r+0x174>
 8005ff2:	89ab      	ldrh	r3, [r5, #12]
 8005ff4:	065b      	lsls	r3, r3, #25
 8005ff6:	f53f af2d 	bmi.w	8005e54 <_svfiprintf_r+0x28>
 8005ffa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ffc:	b01d      	add	sp, #116	; 0x74
 8005ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006002:	ab03      	add	r3, sp, #12
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	462a      	mov	r2, r5
 8006008:	4638      	mov	r0, r7
 800600a:	4b06      	ldr	r3, [pc, #24]	; (8006024 <_svfiprintf_r+0x1f8>)
 800600c:	a904      	add	r1, sp, #16
 800600e:	f7fe f8e9 	bl	80041e4 <_printf_i>
 8006012:	e7eb      	b.n	8005fec <_svfiprintf_r+0x1c0>
 8006014:	08006b1c 	.word	0x08006b1c
 8006018:	08006b22 	.word	0x08006b22
 800601c:	08006b26 	.word	0x08006b26
 8006020:	08003ca5 	.word	0x08003ca5
 8006024:	08005d79 	.word	0x08005d79

08006028 <__sflush_r>:
 8006028:	898a      	ldrh	r2, [r1, #12]
 800602a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602c:	4605      	mov	r5, r0
 800602e:	0710      	lsls	r0, r2, #28
 8006030:	460c      	mov	r4, r1
 8006032:	d457      	bmi.n	80060e4 <__sflush_r+0xbc>
 8006034:	684b      	ldr	r3, [r1, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	dc04      	bgt.n	8006044 <__sflush_r+0x1c>
 800603a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800603c:	2b00      	cmp	r3, #0
 800603e:	dc01      	bgt.n	8006044 <__sflush_r+0x1c>
 8006040:	2000      	movs	r0, #0
 8006042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006046:	2e00      	cmp	r6, #0
 8006048:	d0fa      	beq.n	8006040 <__sflush_r+0x18>
 800604a:	2300      	movs	r3, #0
 800604c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006050:	682f      	ldr	r7, [r5, #0]
 8006052:	6a21      	ldr	r1, [r4, #32]
 8006054:	602b      	str	r3, [r5, #0]
 8006056:	d032      	beq.n	80060be <__sflush_r+0x96>
 8006058:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800605a:	89a3      	ldrh	r3, [r4, #12]
 800605c:	075a      	lsls	r2, r3, #29
 800605e:	d505      	bpl.n	800606c <__sflush_r+0x44>
 8006060:	6863      	ldr	r3, [r4, #4]
 8006062:	1ac0      	subs	r0, r0, r3
 8006064:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006066:	b10b      	cbz	r3, 800606c <__sflush_r+0x44>
 8006068:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800606a:	1ac0      	subs	r0, r0, r3
 800606c:	2300      	movs	r3, #0
 800606e:	4602      	mov	r2, r0
 8006070:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006072:	4628      	mov	r0, r5
 8006074:	6a21      	ldr	r1, [r4, #32]
 8006076:	47b0      	blx	r6
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	89a3      	ldrh	r3, [r4, #12]
 800607c:	d106      	bne.n	800608c <__sflush_r+0x64>
 800607e:	6829      	ldr	r1, [r5, #0]
 8006080:	291d      	cmp	r1, #29
 8006082:	d82b      	bhi.n	80060dc <__sflush_r+0xb4>
 8006084:	4a28      	ldr	r2, [pc, #160]	; (8006128 <__sflush_r+0x100>)
 8006086:	410a      	asrs	r2, r1
 8006088:	07d6      	lsls	r6, r2, #31
 800608a:	d427      	bmi.n	80060dc <__sflush_r+0xb4>
 800608c:	2200      	movs	r2, #0
 800608e:	6062      	str	r2, [r4, #4]
 8006090:	6922      	ldr	r2, [r4, #16]
 8006092:	04d9      	lsls	r1, r3, #19
 8006094:	6022      	str	r2, [r4, #0]
 8006096:	d504      	bpl.n	80060a2 <__sflush_r+0x7a>
 8006098:	1c42      	adds	r2, r0, #1
 800609a:	d101      	bne.n	80060a0 <__sflush_r+0x78>
 800609c:	682b      	ldr	r3, [r5, #0]
 800609e:	b903      	cbnz	r3, 80060a2 <__sflush_r+0x7a>
 80060a0:	6560      	str	r0, [r4, #84]	; 0x54
 80060a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060a4:	602f      	str	r7, [r5, #0]
 80060a6:	2900      	cmp	r1, #0
 80060a8:	d0ca      	beq.n	8006040 <__sflush_r+0x18>
 80060aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060ae:	4299      	cmp	r1, r3
 80060b0:	d002      	beq.n	80060b8 <__sflush_r+0x90>
 80060b2:	4628      	mov	r0, r5
 80060b4:	f7ff f9ec 	bl	8005490 <_free_r>
 80060b8:	2000      	movs	r0, #0
 80060ba:	6360      	str	r0, [r4, #52]	; 0x34
 80060bc:	e7c1      	b.n	8006042 <__sflush_r+0x1a>
 80060be:	2301      	movs	r3, #1
 80060c0:	4628      	mov	r0, r5
 80060c2:	47b0      	blx	r6
 80060c4:	1c41      	adds	r1, r0, #1
 80060c6:	d1c8      	bne.n	800605a <__sflush_r+0x32>
 80060c8:	682b      	ldr	r3, [r5, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d0c5      	beq.n	800605a <__sflush_r+0x32>
 80060ce:	2b1d      	cmp	r3, #29
 80060d0:	d001      	beq.n	80060d6 <__sflush_r+0xae>
 80060d2:	2b16      	cmp	r3, #22
 80060d4:	d101      	bne.n	80060da <__sflush_r+0xb2>
 80060d6:	602f      	str	r7, [r5, #0]
 80060d8:	e7b2      	b.n	8006040 <__sflush_r+0x18>
 80060da:	89a3      	ldrh	r3, [r4, #12]
 80060dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060e0:	81a3      	strh	r3, [r4, #12]
 80060e2:	e7ae      	b.n	8006042 <__sflush_r+0x1a>
 80060e4:	690f      	ldr	r7, [r1, #16]
 80060e6:	2f00      	cmp	r7, #0
 80060e8:	d0aa      	beq.n	8006040 <__sflush_r+0x18>
 80060ea:	0793      	lsls	r3, r2, #30
 80060ec:	bf18      	it	ne
 80060ee:	2300      	movne	r3, #0
 80060f0:	680e      	ldr	r6, [r1, #0]
 80060f2:	bf08      	it	eq
 80060f4:	694b      	ldreq	r3, [r1, #20]
 80060f6:	1bf6      	subs	r6, r6, r7
 80060f8:	600f      	str	r7, [r1, #0]
 80060fa:	608b      	str	r3, [r1, #8]
 80060fc:	2e00      	cmp	r6, #0
 80060fe:	dd9f      	ble.n	8006040 <__sflush_r+0x18>
 8006100:	4633      	mov	r3, r6
 8006102:	463a      	mov	r2, r7
 8006104:	4628      	mov	r0, r5
 8006106:	6a21      	ldr	r1, [r4, #32]
 8006108:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800610c:	47e0      	blx	ip
 800610e:	2800      	cmp	r0, #0
 8006110:	dc06      	bgt.n	8006120 <__sflush_r+0xf8>
 8006112:	89a3      	ldrh	r3, [r4, #12]
 8006114:	f04f 30ff 	mov.w	r0, #4294967295
 8006118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800611c:	81a3      	strh	r3, [r4, #12]
 800611e:	e790      	b.n	8006042 <__sflush_r+0x1a>
 8006120:	4407      	add	r7, r0
 8006122:	1a36      	subs	r6, r6, r0
 8006124:	e7ea      	b.n	80060fc <__sflush_r+0xd4>
 8006126:	bf00      	nop
 8006128:	dfbffffe 	.word	0xdfbffffe

0800612c <_fflush_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	690b      	ldr	r3, [r1, #16]
 8006130:	4605      	mov	r5, r0
 8006132:	460c      	mov	r4, r1
 8006134:	b913      	cbnz	r3, 800613c <_fflush_r+0x10>
 8006136:	2500      	movs	r5, #0
 8006138:	4628      	mov	r0, r5
 800613a:	bd38      	pop	{r3, r4, r5, pc}
 800613c:	b118      	cbz	r0, 8006146 <_fflush_r+0x1a>
 800613e:	6a03      	ldr	r3, [r0, #32]
 8006140:	b90b      	cbnz	r3, 8006146 <_fflush_r+0x1a>
 8006142:	f7fe f9fd 	bl	8004540 <__sinit>
 8006146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0f3      	beq.n	8006136 <_fflush_r+0xa>
 800614e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006150:	07d0      	lsls	r0, r2, #31
 8006152:	d404      	bmi.n	800615e <_fflush_r+0x32>
 8006154:	0599      	lsls	r1, r3, #22
 8006156:	d402      	bmi.n	800615e <_fflush_r+0x32>
 8006158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800615a:	f7fe fb1c 	bl	8004796 <__retarget_lock_acquire_recursive>
 800615e:	4628      	mov	r0, r5
 8006160:	4621      	mov	r1, r4
 8006162:	f7ff ff61 	bl	8006028 <__sflush_r>
 8006166:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006168:	4605      	mov	r5, r0
 800616a:	07da      	lsls	r2, r3, #31
 800616c:	d4e4      	bmi.n	8006138 <_fflush_r+0xc>
 800616e:	89a3      	ldrh	r3, [r4, #12]
 8006170:	059b      	lsls	r3, r3, #22
 8006172:	d4e1      	bmi.n	8006138 <_fflush_r+0xc>
 8006174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006176:	f7fe fb0f 	bl	8004798 <__retarget_lock_release_recursive>
 800617a:	e7dd      	b.n	8006138 <_fflush_r+0xc>

0800617c <memmove>:
 800617c:	4288      	cmp	r0, r1
 800617e:	b510      	push	{r4, lr}
 8006180:	eb01 0402 	add.w	r4, r1, r2
 8006184:	d902      	bls.n	800618c <memmove+0x10>
 8006186:	4284      	cmp	r4, r0
 8006188:	4623      	mov	r3, r4
 800618a:	d807      	bhi.n	800619c <memmove+0x20>
 800618c:	1e43      	subs	r3, r0, #1
 800618e:	42a1      	cmp	r1, r4
 8006190:	d008      	beq.n	80061a4 <memmove+0x28>
 8006192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800619a:	e7f8      	b.n	800618e <memmove+0x12>
 800619c:	4601      	mov	r1, r0
 800619e:	4402      	add	r2, r0
 80061a0:	428a      	cmp	r2, r1
 80061a2:	d100      	bne.n	80061a6 <memmove+0x2a>
 80061a4:	bd10      	pop	{r4, pc}
 80061a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061ae:	e7f7      	b.n	80061a0 <memmove+0x24>

080061b0 <_sbrk_r>:
 80061b0:	b538      	push	{r3, r4, r5, lr}
 80061b2:	2300      	movs	r3, #0
 80061b4:	4d05      	ldr	r5, [pc, #20]	; (80061cc <_sbrk_r+0x1c>)
 80061b6:	4604      	mov	r4, r0
 80061b8:	4608      	mov	r0, r1
 80061ba:	602b      	str	r3, [r5, #0]
 80061bc:	f7fb fcc4 	bl	8001b48 <_sbrk>
 80061c0:	1c43      	adds	r3, r0, #1
 80061c2:	d102      	bne.n	80061ca <_sbrk_r+0x1a>
 80061c4:	682b      	ldr	r3, [r5, #0]
 80061c6:	b103      	cbz	r3, 80061ca <_sbrk_r+0x1a>
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	bd38      	pop	{r3, r4, r5, pc}
 80061cc:	200003dc 	.word	0x200003dc

080061d0 <memcpy>:
 80061d0:	440a      	add	r2, r1
 80061d2:	4291      	cmp	r1, r2
 80061d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80061d8:	d100      	bne.n	80061dc <memcpy+0xc>
 80061da:	4770      	bx	lr
 80061dc:	b510      	push	{r4, lr}
 80061de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061e2:	4291      	cmp	r1, r2
 80061e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061e8:	d1f9      	bne.n	80061de <memcpy+0xe>
 80061ea:	bd10      	pop	{r4, pc}

080061ec <__assert_func>:
 80061ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061ee:	4614      	mov	r4, r2
 80061f0:	461a      	mov	r2, r3
 80061f2:	4b09      	ldr	r3, [pc, #36]	; (8006218 <__assert_func+0x2c>)
 80061f4:	4605      	mov	r5, r0
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68d8      	ldr	r0, [r3, #12]
 80061fa:	b14c      	cbz	r4, 8006210 <__assert_func+0x24>
 80061fc:	4b07      	ldr	r3, [pc, #28]	; (800621c <__assert_func+0x30>)
 80061fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006202:	9100      	str	r1, [sp, #0]
 8006204:	462b      	mov	r3, r5
 8006206:	4906      	ldr	r1, [pc, #24]	; (8006220 <__assert_func+0x34>)
 8006208:	f000 f870 	bl	80062ec <fiprintf>
 800620c:	f000 f880 	bl	8006310 <abort>
 8006210:	4b04      	ldr	r3, [pc, #16]	; (8006224 <__assert_func+0x38>)
 8006212:	461c      	mov	r4, r3
 8006214:	e7f3      	b.n	80061fe <__assert_func+0x12>
 8006216:	bf00      	nop
 8006218:	20000064 	.word	0x20000064
 800621c:	08006b37 	.word	0x08006b37
 8006220:	08006b44 	.word	0x08006b44
 8006224:	08006b72 	.word	0x08006b72

08006228 <_calloc_r>:
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	fba1 5402 	umull	r5, r4, r1, r2
 800622e:	b934      	cbnz	r4, 800623e <_calloc_r+0x16>
 8006230:	4629      	mov	r1, r5
 8006232:	f7ff f99d 	bl	8005570 <_malloc_r>
 8006236:	4606      	mov	r6, r0
 8006238:	b928      	cbnz	r0, 8006246 <_calloc_r+0x1e>
 800623a:	4630      	mov	r0, r6
 800623c:	bd70      	pop	{r4, r5, r6, pc}
 800623e:	220c      	movs	r2, #12
 8006240:	2600      	movs	r6, #0
 8006242:	6002      	str	r2, [r0, #0]
 8006244:	e7f9      	b.n	800623a <_calloc_r+0x12>
 8006246:	462a      	mov	r2, r5
 8006248:	4621      	mov	r1, r4
 800624a:	f7fe fa26 	bl	800469a <memset>
 800624e:	e7f4      	b.n	800623a <_calloc_r+0x12>

08006250 <__ascii_mbtowc>:
 8006250:	b082      	sub	sp, #8
 8006252:	b901      	cbnz	r1, 8006256 <__ascii_mbtowc+0x6>
 8006254:	a901      	add	r1, sp, #4
 8006256:	b142      	cbz	r2, 800626a <__ascii_mbtowc+0x1a>
 8006258:	b14b      	cbz	r3, 800626e <__ascii_mbtowc+0x1e>
 800625a:	7813      	ldrb	r3, [r2, #0]
 800625c:	600b      	str	r3, [r1, #0]
 800625e:	7812      	ldrb	r2, [r2, #0]
 8006260:	1e10      	subs	r0, r2, #0
 8006262:	bf18      	it	ne
 8006264:	2001      	movne	r0, #1
 8006266:	b002      	add	sp, #8
 8006268:	4770      	bx	lr
 800626a:	4610      	mov	r0, r2
 800626c:	e7fb      	b.n	8006266 <__ascii_mbtowc+0x16>
 800626e:	f06f 0001 	mvn.w	r0, #1
 8006272:	e7f8      	b.n	8006266 <__ascii_mbtowc+0x16>

08006274 <_realloc_r>:
 8006274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006278:	4680      	mov	r8, r0
 800627a:	4614      	mov	r4, r2
 800627c:	460e      	mov	r6, r1
 800627e:	b921      	cbnz	r1, 800628a <_realloc_r+0x16>
 8006280:	4611      	mov	r1, r2
 8006282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006286:	f7ff b973 	b.w	8005570 <_malloc_r>
 800628a:	b92a      	cbnz	r2, 8006298 <_realloc_r+0x24>
 800628c:	f7ff f900 	bl	8005490 <_free_r>
 8006290:	4625      	mov	r5, r4
 8006292:	4628      	mov	r0, r5
 8006294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006298:	f000 f841 	bl	800631e <_malloc_usable_size_r>
 800629c:	4284      	cmp	r4, r0
 800629e:	4607      	mov	r7, r0
 80062a0:	d802      	bhi.n	80062a8 <_realloc_r+0x34>
 80062a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80062a6:	d812      	bhi.n	80062ce <_realloc_r+0x5a>
 80062a8:	4621      	mov	r1, r4
 80062aa:	4640      	mov	r0, r8
 80062ac:	f7ff f960 	bl	8005570 <_malloc_r>
 80062b0:	4605      	mov	r5, r0
 80062b2:	2800      	cmp	r0, #0
 80062b4:	d0ed      	beq.n	8006292 <_realloc_r+0x1e>
 80062b6:	42bc      	cmp	r4, r7
 80062b8:	4622      	mov	r2, r4
 80062ba:	4631      	mov	r1, r6
 80062bc:	bf28      	it	cs
 80062be:	463a      	movcs	r2, r7
 80062c0:	f7ff ff86 	bl	80061d0 <memcpy>
 80062c4:	4631      	mov	r1, r6
 80062c6:	4640      	mov	r0, r8
 80062c8:	f7ff f8e2 	bl	8005490 <_free_r>
 80062cc:	e7e1      	b.n	8006292 <_realloc_r+0x1e>
 80062ce:	4635      	mov	r5, r6
 80062d0:	e7df      	b.n	8006292 <_realloc_r+0x1e>

080062d2 <__ascii_wctomb>:
 80062d2:	4603      	mov	r3, r0
 80062d4:	4608      	mov	r0, r1
 80062d6:	b141      	cbz	r1, 80062ea <__ascii_wctomb+0x18>
 80062d8:	2aff      	cmp	r2, #255	; 0xff
 80062da:	d904      	bls.n	80062e6 <__ascii_wctomb+0x14>
 80062dc:	228a      	movs	r2, #138	; 0x8a
 80062de:	f04f 30ff 	mov.w	r0, #4294967295
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	4770      	bx	lr
 80062e6:	2001      	movs	r0, #1
 80062e8:	700a      	strb	r2, [r1, #0]
 80062ea:	4770      	bx	lr

080062ec <fiprintf>:
 80062ec:	b40e      	push	{r1, r2, r3}
 80062ee:	b503      	push	{r0, r1, lr}
 80062f0:	4601      	mov	r1, r0
 80062f2:	ab03      	add	r3, sp, #12
 80062f4:	4805      	ldr	r0, [pc, #20]	; (800630c <fiprintf+0x20>)
 80062f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80062fa:	6800      	ldr	r0, [r0, #0]
 80062fc:	9301      	str	r3, [sp, #4]
 80062fe:	f000 f83d 	bl	800637c <_vfiprintf_r>
 8006302:	b002      	add	sp, #8
 8006304:	f85d eb04 	ldr.w	lr, [sp], #4
 8006308:	b003      	add	sp, #12
 800630a:	4770      	bx	lr
 800630c:	20000064 	.word	0x20000064

08006310 <abort>:
 8006310:	2006      	movs	r0, #6
 8006312:	b508      	push	{r3, lr}
 8006314:	f000 fa0a 	bl	800672c <raise>
 8006318:	2001      	movs	r0, #1
 800631a:	f7fb fba1 	bl	8001a60 <_exit>

0800631e <_malloc_usable_size_r>:
 800631e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006322:	1f18      	subs	r0, r3, #4
 8006324:	2b00      	cmp	r3, #0
 8006326:	bfbc      	itt	lt
 8006328:	580b      	ldrlt	r3, [r1, r0]
 800632a:	18c0      	addlt	r0, r0, r3
 800632c:	4770      	bx	lr

0800632e <__sfputc_r>:
 800632e:	6893      	ldr	r3, [r2, #8]
 8006330:	b410      	push	{r4}
 8006332:	3b01      	subs	r3, #1
 8006334:	2b00      	cmp	r3, #0
 8006336:	6093      	str	r3, [r2, #8]
 8006338:	da07      	bge.n	800634a <__sfputc_r+0x1c>
 800633a:	6994      	ldr	r4, [r2, #24]
 800633c:	42a3      	cmp	r3, r4
 800633e:	db01      	blt.n	8006344 <__sfputc_r+0x16>
 8006340:	290a      	cmp	r1, #10
 8006342:	d102      	bne.n	800634a <__sfputc_r+0x1c>
 8006344:	bc10      	pop	{r4}
 8006346:	f000 b933 	b.w	80065b0 <__swbuf_r>
 800634a:	6813      	ldr	r3, [r2, #0]
 800634c:	1c58      	adds	r0, r3, #1
 800634e:	6010      	str	r0, [r2, #0]
 8006350:	7019      	strb	r1, [r3, #0]
 8006352:	4608      	mov	r0, r1
 8006354:	bc10      	pop	{r4}
 8006356:	4770      	bx	lr

08006358 <__sfputs_r>:
 8006358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635a:	4606      	mov	r6, r0
 800635c:	460f      	mov	r7, r1
 800635e:	4614      	mov	r4, r2
 8006360:	18d5      	adds	r5, r2, r3
 8006362:	42ac      	cmp	r4, r5
 8006364:	d101      	bne.n	800636a <__sfputs_r+0x12>
 8006366:	2000      	movs	r0, #0
 8006368:	e007      	b.n	800637a <__sfputs_r+0x22>
 800636a:	463a      	mov	r2, r7
 800636c:	4630      	mov	r0, r6
 800636e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006372:	f7ff ffdc 	bl	800632e <__sfputc_r>
 8006376:	1c43      	adds	r3, r0, #1
 8006378:	d1f3      	bne.n	8006362 <__sfputs_r+0xa>
 800637a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800637c <_vfiprintf_r>:
 800637c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006380:	460d      	mov	r5, r1
 8006382:	4614      	mov	r4, r2
 8006384:	4698      	mov	r8, r3
 8006386:	4606      	mov	r6, r0
 8006388:	b09d      	sub	sp, #116	; 0x74
 800638a:	b118      	cbz	r0, 8006394 <_vfiprintf_r+0x18>
 800638c:	6a03      	ldr	r3, [r0, #32]
 800638e:	b90b      	cbnz	r3, 8006394 <_vfiprintf_r+0x18>
 8006390:	f7fe f8d6 	bl	8004540 <__sinit>
 8006394:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006396:	07d9      	lsls	r1, r3, #31
 8006398:	d405      	bmi.n	80063a6 <_vfiprintf_r+0x2a>
 800639a:	89ab      	ldrh	r3, [r5, #12]
 800639c:	059a      	lsls	r2, r3, #22
 800639e:	d402      	bmi.n	80063a6 <_vfiprintf_r+0x2a>
 80063a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063a2:	f7fe f9f8 	bl	8004796 <__retarget_lock_acquire_recursive>
 80063a6:	89ab      	ldrh	r3, [r5, #12]
 80063a8:	071b      	lsls	r3, r3, #28
 80063aa:	d501      	bpl.n	80063b0 <_vfiprintf_r+0x34>
 80063ac:	692b      	ldr	r3, [r5, #16]
 80063ae:	b99b      	cbnz	r3, 80063d8 <_vfiprintf_r+0x5c>
 80063b0:	4629      	mov	r1, r5
 80063b2:	4630      	mov	r0, r6
 80063b4:	f000 f93a 	bl	800662c <__swsetup_r>
 80063b8:	b170      	cbz	r0, 80063d8 <_vfiprintf_r+0x5c>
 80063ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063bc:	07dc      	lsls	r4, r3, #31
 80063be:	d504      	bpl.n	80063ca <_vfiprintf_r+0x4e>
 80063c0:	f04f 30ff 	mov.w	r0, #4294967295
 80063c4:	b01d      	add	sp, #116	; 0x74
 80063c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ca:	89ab      	ldrh	r3, [r5, #12]
 80063cc:	0598      	lsls	r0, r3, #22
 80063ce:	d4f7      	bmi.n	80063c0 <_vfiprintf_r+0x44>
 80063d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063d2:	f7fe f9e1 	bl	8004798 <__retarget_lock_release_recursive>
 80063d6:	e7f3      	b.n	80063c0 <_vfiprintf_r+0x44>
 80063d8:	2300      	movs	r3, #0
 80063da:	9309      	str	r3, [sp, #36]	; 0x24
 80063dc:	2320      	movs	r3, #32
 80063de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063e2:	2330      	movs	r3, #48	; 0x30
 80063e4:	f04f 0901 	mov.w	r9, #1
 80063e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80063ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800659c <_vfiprintf_r+0x220>
 80063f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063f4:	4623      	mov	r3, r4
 80063f6:	469a      	mov	sl, r3
 80063f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063fc:	b10a      	cbz	r2, 8006402 <_vfiprintf_r+0x86>
 80063fe:	2a25      	cmp	r2, #37	; 0x25
 8006400:	d1f9      	bne.n	80063f6 <_vfiprintf_r+0x7a>
 8006402:	ebba 0b04 	subs.w	fp, sl, r4
 8006406:	d00b      	beq.n	8006420 <_vfiprintf_r+0xa4>
 8006408:	465b      	mov	r3, fp
 800640a:	4622      	mov	r2, r4
 800640c:	4629      	mov	r1, r5
 800640e:	4630      	mov	r0, r6
 8006410:	f7ff ffa2 	bl	8006358 <__sfputs_r>
 8006414:	3001      	adds	r0, #1
 8006416:	f000 80a9 	beq.w	800656c <_vfiprintf_r+0x1f0>
 800641a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800641c:	445a      	add	r2, fp
 800641e:	9209      	str	r2, [sp, #36]	; 0x24
 8006420:	f89a 3000 	ldrb.w	r3, [sl]
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 80a1 	beq.w	800656c <_vfiprintf_r+0x1f0>
 800642a:	2300      	movs	r3, #0
 800642c:	f04f 32ff 	mov.w	r2, #4294967295
 8006430:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006434:	f10a 0a01 	add.w	sl, sl, #1
 8006438:	9304      	str	r3, [sp, #16]
 800643a:	9307      	str	r3, [sp, #28]
 800643c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006440:	931a      	str	r3, [sp, #104]	; 0x68
 8006442:	4654      	mov	r4, sl
 8006444:	2205      	movs	r2, #5
 8006446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800644a:	4854      	ldr	r0, [pc, #336]	; (800659c <_vfiprintf_r+0x220>)
 800644c:	f7fe f9a5 	bl	800479a <memchr>
 8006450:	9a04      	ldr	r2, [sp, #16]
 8006452:	b9d8      	cbnz	r0, 800648c <_vfiprintf_r+0x110>
 8006454:	06d1      	lsls	r1, r2, #27
 8006456:	bf44      	itt	mi
 8006458:	2320      	movmi	r3, #32
 800645a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800645e:	0713      	lsls	r3, r2, #28
 8006460:	bf44      	itt	mi
 8006462:	232b      	movmi	r3, #43	; 0x2b
 8006464:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006468:	f89a 3000 	ldrb.w	r3, [sl]
 800646c:	2b2a      	cmp	r3, #42	; 0x2a
 800646e:	d015      	beq.n	800649c <_vfiprintf_r+0x120>
 8006470:	4654      	mov	r4, sl
 8006472:	2000      	movs	r0, #0
 8006474:	f04f 0c0a 	mov.w	ip, #10
 8006478:	9a07      	ldr	r2, [sp, #28]
 800647a:	4621      	mov	r1, r4
 800647c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006480:	3b30      	subs	r3, #48	; 0x30
 8006482:	2b09      	cmp	r3, #9
 8006484:	d94d      	bls.n	8006522 <_vfiprintf_r+0x1a6>
 8006486:	b1b0      	cbz	r0, 80064b6 <_vfiprintf_r+0x13a>
 8006488:	9207      	str	r2, [sp, #28]
 800648a:	e014      	b.n	80064b6 <_vfiprintf_r+0x13a>
 800648c:	eba0 0308 	sub.w	r3, r0, r8
 8006490:	fa09 f303 	lsl.w	r3, r9, r3
 8006494:	4313      	orrs	r3, r2
 8006496:	46a2      	mov	sl, r4
 8006498:	9304      	str	r3, [sp, #16]
 800649a:	e7d2      	b.n	8006442 <_vfiprintf_r+0xc6>
 800649c:	9b03      	ldr	r3, [sp, #12]
 800649e:	1d19      	adds	r1, r3, #4
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	9103      	str	r1, [sp, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	bfbb      	ittet	lt
 80064a8:	425b      	neglt	r3, r3
 80064aa:	f042 0202 	orrlt.w	r2, r2, #2
 80064ae:	9307      	strge	r3, [sp, #28]
 80064b0:	9307      	strlt	r3, [sp, #28]
 80064b2:	bfb8      	it	lt
 80064b4:	9204      	strlt	r2, [sp, #16]
 80064b6:	7823      	ldrb	r3, [r4, #0]
 80064b8:	2b2e      	cmp	r3, #46	; 0x2e
 80064ba:	d10c      	bne.n	80064d6 <_vfiprintf_r+0x15a>
 80064bc:	7863      	ldrb	r3, [r4, #1]
 80064be:	2b2a      	cmp	r3, #42	; 0x2a
 80064c0:	d134      	bne.n	800652c <_vfiprintf_r+0x1b0>
 80064c2:	9b03      	ldr	r3, [sp, #12]
 80064c4:	3402      	adds	r4, #2
 80064c6:	1d1a      	adds	r2, r3, #4
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	9203      	str	r2, [sp, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	bfb8      	it	lt
 80064d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80064d4:	9305      	str	r3, [sp, #20]
 80064d6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80065a0 <_vfiprintf_r+0x224>
 80064da:	2203      	movs	r2, #3
 80064dc:	4650      	mov	r0, sl
 80064de:	7821      	ldrb	r1, [r4, #0]
 80064e0:	f7fe f95b 	bl	800479a <memchr>
 80064e4:	b138      	cbz	r0, 80064f6 <_vfiprintf_r+0x17a>
 80064e6:	2240      	movs	r2, #64	; 0x40
 80064e8:	9b04      	ldr	r3, [sp, #16]
 80064ea:	eba0 000a 	sub.w	r0, r0, sl
 80064ee:	4082      	lsls	r2, r0
 80064f0:	4313      	orrs	r3, r2
 80064f2:	3401      	adds	r4, #1
 80064f4:	9304      	str	r3, [sp, #16]
 80064f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064fa:	2206      	movs	r2, #6
 80064fc:	4829      	ldr	r0, [pc, #164]	; (80065a4 <_vfiprintf_r+0x228>)
 80064fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006502:	f7fe f94a 	bl	800479a <memchr>
 8006506:	2800      	cmp	r0, #0
 8006508:	d03f      	beq.n	800658a <_vfiprintf_r+0x20e>
 800650a:	4b27      	ldr	r3, [pc, #156]	; (80065a8 <_vfiprintf_r+0x22c>)
 800650c:	bb1b      	cbnz	r3, 8006556 <_vfiprintf_r+0x1da>
 800650e:	9b03      	ldr	r3, [sp, #12]
 8006510:	3307      	adds	r3, #7
 8006512:	f023 0307 	bic.w	r3, r3, #7
 8006516:	3308      	adds	r3, #8
 8006518:	9303      	str	r3, [sp, #12]
 800651a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800651c:	443b      	add	r3, r7
 800651e:	9309      	str	r3, [sp, #36]	; 0x24
 8006520:	e768      	b.n	80063f4 <_vfiprintf_r+0x78>
 8006522:	460c      	mov	r4, r1
 8006524:	2001      	movs	r0, #1
 8006526:	fb0c 3202 	mla	r2, ip, r2, r3
 800652a:	e7a6      	b.n	800647a <_vfiprintf_r+0xfe>
 800652c:	2300      	movs	r3, #0
 800652e:	f04f 0c0a 	mov.w	ip, #10
 8006532:	4619      	mov	r1, r3
 8006534:	3401      	adds	r4, #1
 8006536:	9305      	str	r3, [sp, #20]
 8006538:	4620      	mov	r0, r4
 800653a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800653e:	3a30      	subs	r2, #48	; 0x30
 8006540:	2a09      	cmp	r2, #9
 8006542:	d903      	bls.n	800654c <_vfiprintf_r+0x1d0>
 8006544:	2b00      	cmp	r3, #0
 8006546:	d0c6      	beq.n	80064d6 <_vfiprintf_r+0x15a>
 8006548:	9105      	str	r1, [sp, #20]
 800654a:	e7c4      	b.n	80064d6 <_vfiprintf_r+0x15a>
 800654c:	4604      	mov	r4, r0
 800654e:	2301      	movs	r3, #1
 8006550:	fb0c 2101 	mla	r1, ip, r1, r2
 8006554:	e7f0      	b.n	8006538 <_vfiprintf_r+0x1bc>
 8006556:	ab03      	add	r3, sp, #12
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	462a      	mov	r2, r5
 800655c:	4630      	mov	r0, r6
 800655e:	4b13      	ldr	r3, [pc, #76]	; (80065ac <_vfiprintf_r+0x230>)
 8006560:	a904      	add	r1, sp, #16
 8006562:	f7fd fb9f 	bl	8003ca4 <_printf_float>
 8006566:	4607      	mov	r7, r0
 8006568:	1c78      	adds	r0, r7, #1
 800656a:	d1d6      	bne.n	800651a <_vfiprintf_r+0x19e>
 800656c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800656e:	07d9      	lsls	r1, r3, #31
 8006570:	d405      	bmi.n	800657e <_vfiprintf_r+0x202>
 8006572:	89ab      	ldrh	r3, [r5, #12]
 8006574:	059a      	lsls	r2, r3, #22
 8006576:	d402      	bmi.n	800657e <_vfiprintf_r+0x202>
 8006578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800657a:	f7fe f90d 	bl	8004798 <__retarget_lock_release_recursive>
 800657e:	89ab      	ldrh	r3, [r5, #12]
 8006580:	065b      	lsls	r3, r3, #25
 8006582:	f53f af1d 	bmi.w	80063c0 <_vfiprintf_r+0x44>
 8006586:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006588:	e71c      	b.n	80063c4 <_vfiprintf_r+0x48>
 800658a:	ab03      	add	r3, sp, #12
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	462a      	mov	r2, r5
 8006590:	4630      	mov	r0, r6
 8006592:	4b06      	ldr	r3, [pc, #24]	; (80065ac <_vfiprintf_r+0x230>)
 8006594:	a904      	add	r1, sp, #16
 8006596:	f7fd fe25 	bl	80041e4 <_printf_i>
 800659a:	e7e4      	b.n	8006566 <_vfiprintf_r+0x1ea>
 800659c:	08006b1c 	.word	0x08006b1c
 80065a0:	08006b22 	.word	0x08006b22
 80065a4:	08006b26 	.word	0x08006b26
 80065a8:	08003ca5 	.word	0x08003ca5
 80065ac:	08006359 	.word	0x08006359

080065b0 <__swbuf_r>:
 80065b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b2:	460e      	mov	r6, r1
 80065b4:	4614      	mov	r4, r2
 80065b6:	4605      	mov	r5, r0
 80065b8:	b118      	cbz	r0, 80065c2 <__swbuf_r+0x12>
 80065ba:	6a03      	ldr	r3, [r0, #32]
 80065bc:	b90b      	cbnz	r3, 80065c2 <__swbuf_r+0x12>
 80065be:	f7fd ffbf 	bl	8004540 <__sinit>
 80065c2:	69a3      	ldr	r3, [r4, #24]
 80065c4:	60a3      	str	r3, [r4, #8]
 80065c6:	89a3      	ldrh	r3, [r4, #12]
 80065c8:	071a      	lsls	r2, r3, #28
 80065ca:	d525      	bpl.n	8006618 <__swbuf_r+0x68>
 80065cc:	6923      	ldr	r3, [r4, #16]
 80065ce:	b31b      	cbz	r3, 8006618 <__swbuf_r+0x68>
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	6922      	ldr	r2, [r4, #16]
 80065d4:	b2f6      	uxtb	r6, r6
 80065d6:	1a98      	subs	r0, r3, r2
 80065d8:	6963      	ldr	r3, [r4, #20]
 80065da:	4637      	mov	r7, r6
 80065dc:	4283      	cmp	r3, r0
 80065de:	dc04      	bgt.n	80065ea <__swbuf_r+0x3a>
 80065e0:	4621      	mov	r1, r4
 80065e2:	4628      	mov	r0, r5
 80065e4:	f7ff fda2 	bl	800612c <_fflush_r>
 80065e8:	b9e0      	cbnz	r0, 8006624 <__swbuf_r+0x74>
 80065ea:	68a3      	ldr	r3, [r4, #8]
 80065ec:	3b01      	subs	r3, #1
 80065ee:	60a3      	str	r3, [r4, #8]
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	6022      	str	r2, [r4, #0]
 80065f6:	701e      	strb	r6, [r3, #0]
 80065f8:	6962      	ldr	r2, [r4, #20]
 80065fa:	1c43      	adds	r3, r0, #1
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d004      	beq.n	800660a <__swbuf_r+0x5a>
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	07db      	lsls	r3, r3, #31
 8006604:	d506      	bpl.n	8006614 <__swbuf_r+0x64>
 8006606:	2e0a      	cmp	r6, #10
 8006608:	d104      	bne.n	8006614 <__swbuf_r+0x64>
 800660a:	4621      	mov	r1, r4
 800660c:	4628      	mov	r0, r5
 800660e:	f7ff fd8d 	bl	800612c <_fflush_r>
 8006612:	b938      	cbnz	r0, 8006624 <__swbuf_r+0x74>
 8006614:	4638      	mov	r0, r7
 8006616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006618:	4621      	mov	r1, r4
 800661a:	4628      	mov	r0, r5
 800661c:	f000 f806 	bl	800662c <__swsetup_r>
 8006620:	2800      	cmp	r0, #0
 8006622:	d0d5      	beq.n	80065d0 <__swbuf_r+0x20>
 8006624:	f04f 37ff 	mov.w	r7, #4294967295
 8006628:	e7f4      	b.n	8006614 <__swbuf_r+0x64>
	...

0800662c <__swsetup_r>:
 800662c:	b538      	push	{r3, r4, r5, lr}
 800662e:	4b2a      	ldr	r3, [pc, #168]	; (80066d8 <__swsetup_r+0xac>)
 8006630:	4605      	mov	r5, r0
 8006632:	6818      	ldr	r0, [r3, #0]
 8006634:	460c      	mov	r4, r1
 8006636:	b118      	cbz	r0, 8006640 <__swsetup_r+0x14>
 8006638:	6a03      	ldr	r3, [r0, #32]
 800663a:	b90b      	cbnz	r3, 8006640 <__swsetup_r+0x14>
 800663c:	f7fd ff80 	bl	8004540 <__sinit>
 8006640:	89a3      	ldrh	r3, [r4, #12]
 8006642:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006646:	0718      	lsls	r0, r3, #28
 8006648:	d422      	bmi.n	8006690 <__swsetup_r+0x64>
 800664a:	06d9      	lsls	r1, r3, #27
 800664c:	d407      	bmi.n	800665e <__swsetup_r+0x32>
 800664e:	2309      	movs	r3, #9
 8006650:	602b      	str	r3, [r5, #0]
 8006652:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006656:	f04f 30ff 	mov.w	r0, #4294967295
 800665a:	81a3      	strh	r3, [r4, #12]
 800665c:	e034      	b.n	80066c8 <__swsetup_r+0x9c>
 800665e:	0758      	lsls	r0, r3, #29
 8006660:	d512      	bpl.n	8006688 <__swsetup_r+0x5c>
 8006662:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006664:	b141      	cbz	r1, 8006678 <__swsetup_r+0x4c>
 8006666:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800666a:	4299      	cmp	r1, r3
 800666c:	d002      	beq.n	8006674 <__swsetup_r+0x48>
 800666e:	4628      	mov	r0, r5
 8006670:	f7fe ff0e 	bl	8005490 <_free_r>
 8006674:	2300      	movs	r3, #0
 8006676:	6363      	str	r3, [r4, #52]	; 0x34
 8006678:	89a3      	ldrh	r3, [r4, #12]
 800667a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800667e:	81a3      	strh	r3, [r4, #12]
 8006680:	2300      	movs	r3, #0
 8006682:	6063      	str	r3, [r4, #4]
 8006684:	6923      	ldr	r3, [r4, #16]
 8006686:	6023      	str	r3, [r4, #0]
 8006688:	89a3      	ldrh	r3, [r4, #12]
 800668a:	f043 0308 	orr.w	r3, r3, #8
 800668e:	81a3      	strh	r3, [r4, #12]
 8006690:	6923      	ldr	r3, [r4, #16]
 8006692:	b94b      	cbnz	r3, 80066a8 <__swsetup_r+0x7c>
 8006694:	89a3      	ldrh	r3, [r4, #12]
 8006696:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800669a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800669e:	d003      	beq.n	80066a8 <__swsetup_r+0x7c>
 80066a0:	4621      	mov	r1, r4
 80066a2:	4628      	mov	r0, r5
 80066a4:	f000 f883 	bl	80067ae <__smakebuf_r>
 80066a8:	89a0      	ldrh	r0, [r4, #12]
 80066aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066ae:	f010 0301 	ands.w	r3, r0, #1
 80066b2:	d00a      	beq.n	80066ca <__swsetup_r+0x9e>
 80066b4:	2300      	movs	r3, #0
 80066b6:	60a3      	str	r3, [r4, #8]
 80066b8:	6963      	ldr	r3, [r4, #20]
 80066ba:	425b      	negs	r3, r3
 80066bc:	61a3      	str	r3, [r4, #24]
 80066be:	6923      	ldr	r3, [r4, #16]
 80066c0:	b943      	cbnz	r3, 80066d4 <__swsetup_r+0xa8>
 80066c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066c6:	d1c4      	bne.n	8006652 <__swsetup_r+0x26>
 80066c8:	bd38      	pop	{r3, r4, r5, pc}
 80066ca:	0781      	lsls	r1, r0, #30
 80066cc:	bf58      	it	pl
 80066ce:	6963      	ldrpl	r3, [r4, #20]
 80066d0:	60a3      	str	r3, [r4, #8]
 80066d2:	e7f4      	b.n	80066be <__swsetup_r+0x92>
 80066d4:	2000      	movs	r0, #0
 80066d6:	e7f7      	b.n	80066c8 <__swsetup_r+0x9c>
 80066d8:	20000064 	.word	0x20000064

080066dc <_raise_r>:
 80066dc:	291f      	cmp	r1, #31
 80066de:	b538      	push	{r3, r4, r5, lr}
 80066e0:	4604      	mov	r4, r0
 80066e2:	460d      	mov	r5, r1
 80066e4:	d904      	bls.n	80066f0 <_raise_r+0x14>
 80066e6:	2316      	movs	r3, #22
 80066e8:	6003      	str	r3, [r0, #0]
 80066ea:	f04f 30ff 	mov.w	r0, #4294967295
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80066f2:	b112      	cbz	r2, 80066fa <_raise_r+0x1e>
 80066f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80066f8:	b94b      	cbnz	r3, 800670e <_raise_r+0x32>
 80066fa:	4620      	mov	r0, r4
 80066fc:	f000 f830 	bl	8006760 <_getpid_r>
 8006700:	462a      	mov	r2, r5
 8006702:	4601      	mov	r1, r0
 8006704:	4620      	mov	r0, r4
 8006706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800670a:	f000 b817 	b.w	800673c <_kill_r>
 800670e:	2b01      	cmp	r3, #1
 8006710:	d00a      	beq.n	8006728 <_raise_r+0x4c>
 8006712:	1c59      	adds	r1, r3, #1
 8006714:	d103      	bne.n	800671e <_raise_r+0x42>
 8006716:	2316      	movs	r3, #22
 8006718:	6003      	str	r3, [r0, #0]
 800671a:	2001      	movs	r0, #1
 800671c:	e7e7      	b.n	80066ee <_raise_r+0x12>
 800671e:	2400      	movs	r4, #0
 8006720:	4628      	mov	r0, r5
 8006722:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006726:	4798      	blx	r3
 8006728:	2000      	movs	r0, #0
 800672a:	e7e0      	b.n	80066ee <_raise_r+0x12>

0800672c <raise>:
 800672c:	4b02      	ldr	r3, [pc, #8]	; (8006738 <raise+0xc>)
 800672e:	4601      	mov	r1, r0
 8006730:	6818      	ldr	r0, [r3, #0]
 8006732:	f7ff bfd3 	b.w	80066dc <_raise_r>
 8006736:	bf00      	nop
 8006738:	20000064 	.word	0x20000064

0800673c <_kill_r>:
 800673c:	b538      	push	{r3, r4, r5, lr}
 800673e:	2300      	movs	r3, #0
 8006740:	4d06      	ldr	r5, [pc, #24]	; (800675c <_kill_r+0x20>)
 8006742:	4604      	mov	r4, r0
 8006744:	4608      	mov	r0, r1
 8006746:	4611      	mov	r1, r2
 8006748:	602b      	str	r3, [r5, #0]
 800674a:	f7fb f979 	bl	8001a40 <_kill>
 800674e:	1c43      	adds	r3, r0, #1
 8006750:	d102      	bne.n	8006758 <_kill_r+0x1c>
 8006752:	682b      	ldr	r3, [r5, #0]
 8006754:	b103      	cbz	r3, 8006758 <_kill_r+0x1c>
 8006756:	6023      	str	r3, [r4, #0]
 8006758:	bd38      	pop	{r3, r4, r5, pc}
 800675a:	bf00      	nop
 800675c:	200003dc 	.word	0x200003dc

08006760 <_getpid_r>:
 8006760:	f7fb b967 	b.w	8001a32 <_getpid>

08006764 <__swhatbuf_r>:
 8006764:	b570      	push	{r4, r5, r6, lr}
 8006766:	460c      	mov	r4, r1
 8006768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800676c:	4615      	mov	r5, r2
 800676e:	2900      	cmp	r1, #0
 8006770:	461e      	mov	r6, r3
 8006772:	b096      	sub	sp, #88	; 0x58
 8006774:	da0c      	bge.n	8006790 <__swhatbuf_r+0x2c>
 8006776:	89a3      	ldrh	r3, [r4, #12]
 8006778:	2100      	movs	r1, #0
 800677a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800677e:	bf0c      	ite	eq
 8006780:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006784:	2340      	movne	r3, #64	; 0x40
 8006786:	2000      	movs	r0, #0
 8006788:	6031      	str	r1, [r6, #0]
 800678a:	602b      	str	r3, [r5, #0]
 800678c:	b016      	add	sp, #88	; 0x58
 800678e:	bd70      	pop	{r4, r5, r6, pc}
 8006790:	466a      	mov	r2, sp
 8006792:	f000 f849 	bl	8006828 <_fstat_r>
 8006796:	2800      	cmp	r0, #0
 8006798:	dbed      	blt.n	8006776 <__swhatbuf_r+0x12>
 800679a:	9901      	ldr	r1, [sp, #4]
 800679c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80067a0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80067a4:	4259      	negs	r1, r3
 80067a6:	4159      	adcs	r1, r3
 80067a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067ac:	e7eb      	b.n	8006786 <__swhatbuf_r+0x22>

080067ae <__smakebuf_r>:
 80067ae:	898b      	ldrh	r3, [r1, #12]
 80067b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067b2:	079d      	lsls	r5, r3, #30
 80067b4:	4606      	mov	r6, r0
 80067b6:	460c      	mov	r4, r1
 80067b8:	d507      	bpl.n	80067ca <__smakebuf_r+0x1c>
 80067ba:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067be:	6023      	str	r3, [r4, #0]
 80067c0:	6123      	str	r3, [r4, #16]
 80067c2:	2301      	movs	r3, #1
 80067c4:	6163      	str	r3, [r4, #20]
 80067c6:	b002      	add	sp, #8
 80067c8:	bd70      	pop	{r4, r5, r6, pc}
 80067ca:	466a      	mov	r2, sp
 80067cc:	ab01      	add	r3, sp, #4
 80067ce:	f7ff ffc9 	bl	8006764 <__swhatbuf_r>
 80067d2:	9900      	ldr	r1, [sp, #0]
 80067d4:	4605      	mov	r5, r0
 80067d6:	4630      	mov	r0, r6
 80067d8:	f7fe feca 	bl	8005570 <_malloc_r>
 80067dc:	b948      	cbnz	r0, 80067f2 <__smakebuf_r+0x44>
 80067de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067e2:	059a      	lsls	r2, r3, #22
 80067e4:	d4ef      	bmi.n	80067c6 <__smakebuf_r+0x18>
 80067e6:	f023 0303 	bic.w	r3, r3, #3
 80067ea:	f043 0302 	orr.w	r3, r3, #2
 80067ee:	81a3      	strh	r3, [r4, #12]
 80067f0:	e7e3      	b.n	80067ba <__smakebuf_r+0xc>
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	6020      	str	r0, [r4, #0]
 80067f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067fa:	81a3      	strh	r3, [r4, #12]
 80067fc:	9b00      	ldr	r3, [sp, #0]
 80067fe:	6120      	str	r0, [r4, #16]
 8006800:	6163      	str	r3, [r4, #20]
 8006802:	9b01      	ldr	r3, [sp, #4]
 8006804:	b15b      	cbz	r3, 800681e <__smakebuf_r+0x70>
 8006806:	4630      	mov	r0, r6
 8006808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800680c:	f000 f81e 	bl	800684c <_isatty_r>
 8006810:	b128      	cbz	r0, 800681e <__smakebuf_r+0x70>
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	f023 0303 	bic.w	r3, r3, #3
 8006818:	f043 0301 	orr.w	r3, r3, #1
 800681c:	81a3      	strh	r3, [r4, #12]
 800681e:	89a3      	ldrh	r3, [r4, #12]
 8006820:	431d      	orrs	r5, r3
 8006822:	81a5      	strh	r5, [r4, #12]
 8006824:	e7cf      	b.n	80067c6 <__smakebuf_r+0x18>
	...

08006828 <_fstat_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	2300      	movs	r3, #0
 800682c:	4d06      	ldr	r5, [pc, #24]	; (8006848 <_fstat_r+0x20>)
 800682e:	4604      	mov	r4, r0
 8006830:	4608      	mov	r0, r1
 8006832:	4611      	mov	r1, r2
 8006834:	602b      	str	r3, [r5, #0]
 8006836:	f7fb f961 	bl	8001afc <_fstat>
 800683a:	1c43      	adds	r3, r0, #1
 800683c:	d102      	bne.n	8006844 <_fstat_r+0x1c>
 800683e:	682b      	ldr	r3, [r5, #0]
 8006840:	b103      	cbz	r3, 8006844 <_fstat_r+0x1c>
 8006842:	6023      	str	r3, [r4, #0]
 8006844:	bd38      	pop	{r3, r4, r5, pc}
 8006846:	bf00      	nop
 8006848:	200003dc 	.word	0x200003dc

0800684c <_isatty_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	2300      	movs	r3, #0
 8006850:	4d05      	ldr	r5, [pc, #20]	; (8006868 <_isatty_r+0x1c>)
 8006852:	4604      	mov	r4, r0
 8006854:	4608      	mov	r0, r1
 8006856:	602b      	str	r3, [r5, #0]
 8006858:	f7fb f95f 	bl	8001b1a <_isatty>
 800685c:	1c43      	adds	r3, r0, #1
 800685e:	d102      	bne.n	8006866 <_isatty_r+0x1a>
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	b103      	cbz	r3, 8006866 <_isatty_r+0x1a>
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	bd38      	pop	{r3, r4, r5, pc}
 8006868:	200003dc 	.word	0x200003dc

0800686c <_init>:
 800686c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686e:	bf00      	nop
 8006870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006872:	bc08      	pop	{r3}
 8006874:	469e      	mov	lr, r3
 8006876:	4770      	bx	lr

08006878 <_fini>:
 8006878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687a:	bf00      	nop
 800687c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800687e:	bc08      	pop	{r3}
 8006880:	469e      	mov	lr, r3
 8006882:	4770      	bx	lr
